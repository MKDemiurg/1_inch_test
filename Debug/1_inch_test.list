
1_inch_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000896c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08008afc  08008afc  00009afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c44  08008c44  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000000  08008c44  08008c44  0000a06c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c44  08008c44  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c44  08008c44  00009c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c48  08008c48  00009c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008c4c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a06c  2**0
                  CONTENTS
 10 .bss          000027d8  2000006c  2000006c  0000a06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002844  20002844  0000a06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138d7  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031d9  00000000  00000000  0001d973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  00020b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c96  00000000  00000000  00021bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200d5  00000000  00000000  00022856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015dd3  00000000  00000000  0004292b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba62a  00000000  00000000  000586fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112d28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004934  00000000  00000000  00112d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001176a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ae4 	.word	0x08008ae4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008ae4 	.word	0x08008ae4

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	@ (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	@ (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	@ 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000088 	.word	0x20000088
 8000200:	200000dc 	.word	0x200000dc

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b0a6      	sub	sp, #152	@ 0x98
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fe3b 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f8bd 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f99f 	bl	8000554 <MX_GPIO_Init>
  MX_DMA_Init();
 8000216:	f000 f977 	bl	8000508 <MX_DMA_Init>
  MX_SPI1_Init();
 800021a:	f000 f907 	bl	800042c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800021e:	f000 f943 	bl	80004a8 <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of spi_txrx_cplt_ */
  osSemaphoreStaticDef(spi_txrx_cplt_, &spi_txrx_cplt_ControlBlock);
 8000222:	2300      	movs	r3, #0
 8000224:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000228:	4b47      	ldr	r3, [pc, #284]	@ (8000348 <main+0x144>)
 800022a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  spi_txrx_cplt_Handle = osSemaphoreCreate(osSemaphore(spi_txrx_cplt_), 1);
 800022e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000232:	2101      	movs	r1, #1
 8000234:	4618      	mov	r0, r3
 8000236:	f005 fb33 	bl	80058a0 <osSemaphoreCreate>
 800023a:	4603      	mov	r3, r0
 800023c:	4a43      	ldr	r2, [pc, #268]	@ (800034c <main+0x148>)
 800023e:	6013      	str	r3, [r2, #0]

  /* definition and creation of usart_tx_event */
  osSemaphoreStaticDef(usart_tx_event, &usart_txc_eventControlBlock);
 8000240:	2300      	movs	r3, #0
 8000242:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000246:	4b42      	ldr	r3, [pc, #264]	@ (8000350 <main+0x14c>)
 8000248:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  usart_tx_eventHandle = osSemaphoreCreate(osSemaphore(usart_tx_event), 1);
 800024c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000250:	2101      	movs	r1, #1
 8000252:	4618      	mov	r0, r3
 8000254:	f005 fb24 	bl	80058a0 <osSemaphoreCreate>
 8000258:	4603      	mov	r3, r0
 800025a:	4a3e      	ldr	r2, [pc, #248]	@ (8000354 <main+0x150>)
 800025c:	6013      	str	r3, [r2, #0]

  /* definition and creation of usart_rx_event */
  osSemaphoreStaticDef(usart_rx_event, &usart_rx_eventControlBlock);
 800025e:	2300      	movs	r3, #0
 8000260:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000264:	4b3c      	ldr	r3, [pc, #240]	@ (8000358 <main+0x154>)
 8000266:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  usart_rx_eventHandle = osSemaphoreCreate(osSemaphore(usart_rx_event), 1);
 800026a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800026e:	2101      	movs	r1, #1
 8000270:	4618      	mov	r0, r3
 8000272:	f005 fb15 	bl	80058a0 <osSemaphoreCreate>
 8000276:	4603      	mov	r3, r0
 8000278:	4a38      	ldr	r2, [pc, #224]	@ (800035c <main+0x158>)
 800027a:	6013      	str	r3, [r2, #0]

  /* definition and creation of spi_rx_cplt */
  osSemaphoreStaticDef(spi_rx_cplt, &spi_rx_cpltControlBlock);
 800027c:	2300      	movs	r3, #0
 800027e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000280:	4b37      	ldr	r3, [pc, #220]	@ (8000360 <main+0x15c>)
 8000282:	67fb      	str	r3, [r7, #124]	@ 0x7c
  spi_rx_cpltHandle = osSemaphoreCreate(osSemaphore(spi_rx_cplt), 1);
 8000284:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000288:	2101      	movs	r1, #1
 800028a:	4618      	mov	r0, r3
 800028c:	f005 fb08 	bl	80058a0 <osSemaphoreCreate>
 8000290:	4603      	mov	r3, r0
 8000292:	4a34      	ldr	r2, [pc, #208]	@ (8000364 <main+0x160>)
 8000294:	6013      	str	r3, [r2, #0]
  /* definition and creation of usart_to_spi */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* Create the queue(s) */
  /* definition and creation of usart_to_spi */
  osMessageQDef(usart_to_spi, USART_TO_SPI_QUEUE_LENGTH, uint8_t*);
 8000296:	4b34      	ldr	r3, [pc, #208]	@ (8000368 <main+0x164>)
 8000298:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 800029c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800029e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  usart_to_spiHandle = osMessageCreate(osMessageQ(usart_to_spi), NULL);
 80002a2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f005 fb6f 	bl	800598c <osMessageCreate>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a2e      	ldr	r2, [pc, #184]	@ (800036c <main+0x168>)
 80002b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of spi_to_usart */
  osMessageQDef(spi_to_usart,SPI_TO_USART_QUEUE_LENGTH , uint8_t*);
 80002b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000368 <main+0x164>)
 80002b6:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80002ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  spi_to_usartHandle = osMessageCreate(osMessageQ(spi_to_usart), NULL);
 80002c0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f005 fb60 	bl	800598c <osMessageCreate>
 80002cc:	4603      	mov	r3, r0
 80002ce:	4a28      	ldr	r2, [pc, #160]	@ (8000370 <main+0x16c>)
 80002d0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002d2:	4b28      	ldr	r3, [pc, #160]	@ (8000374 <main+0x170>)
 80002d4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80002d8:	461d      	mov	r5, r3
 80002da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f005 fa77 	bl	80057e0 <osThreadCreate>
 80002f2:	4603      	mov	r3, r0
 80002f4:	4a20      	ldr	r2, [pc, #128]	@ (8000378 <main+0x174>)
 80002f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of spi_task */
  osThreadDef(spi_task, spi_handle_function, osPriorityHigh, 0, 512);
 80002f8:	4b20      	ldr	r3, [pc, #128]	@ (800037c <main+0x178>)
 80002fa:	f107 0420 	add.w	r4, r7, #32
 80002fe:	461d      	mov	r5, r3
 8000300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000304:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000308:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  spi_taskHandle = osThreadCreate(osThread(spi_task), NULL);
 800030c:	f107 0320 	add.w	r3, r7, #32
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f005 fa64 	bl	80057e0 <osThreadCreate>
 8000318:	4603      	mov	r3, r0
 800031a:	4a19      	ldr	r2, [pc, #100]	@ (8000380 <main+0x17c>)
 800031c:	6013      	str	r3, [r2, #0]

  /* definition and creation of usart_task */
  osThreadDef(usart_task, usart_handle_function, osPriorityNormal, 0, 512);
 800031e:	4b19      	ldr	r3, [pc, #100]	@ (8000384 <main+0x180>)
 8000320:	1d3c      	adds	r4, r7, #4
 8000322:	461d      	mov	r5, r3
 8000324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000328:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800032c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usart_taskHandle = osThreadCreate(osThread(usart_task), NULL);
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f005 fa53 	bl	80057e0 <osThreadCreate>
 800033a:	4603      	mov	r3, r0
 800033c:	4a12      	ldr	r2, [pc, #72]	@ (8000388 <main+0x184>)
 800033e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000340:	f005 fa47 	bl	80057d2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000344:	bf00      	nop
 8000346:	e7fd      	b.n	8000344 <main+0x140>
 8000348:	20000468 	.word	0x20000468
 800034c:	20000464 	.word	0x20000464
 8000350:	200004b8 	.word	0x200004b8
 8000354:	200004b4 	.word	0x200004b4
 8000358:	20000508 	.word	0x20000508
 800035c:	20000504 	.word	0x20000504
 8000360:	20000558 	.word	0x20000558
 8000364:	20000554 	.word	0x20000554
 8000368:	08008afc 	.word	0x08008afc
 800036c:	2000045c 	.word	0x2000045c
 8000370:	20000460 	.word	0x20000460
 8000374:	08008b18 	.word	0x08008b18
 8000378:	20000450 	.word	0x20000450
 800037c:	08008b40 	.word	0x08008b40
 8000380:	20000454 	.word	0x20000454
 8000384:	08008b68 	.word	0x08008b68
 8000388:	20000458 	.word	0x20000458

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b09e      	sub	sp, #120	@ 0x78
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000396:	2228      	movs	r2, #40	@ 0x28
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f008 f98e 	bl	80086bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b0:	463b      	mov	r3, r7
 80003b2:	223c      	movs	r2, #60	@ 0x3c
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f008 f980 	bl	80086bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003bc:	2302      	movs	r3, #2
 80003be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c0:	2301      	movs	r3, #1
 80003c2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c4:	2310      	movs	r3, #16
 80003c6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003c8:	2300      	movs	r3, #0
 80003ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003cc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80003d0:	4618      	mov	r0, r3
 80003d2:	f001 fa77 	bl	80018c4 <HAL_RCC_OscConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80003dc:	f000 fb0a 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e0:	230f      	movs	r3, #15
 80003e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003e4:	2300      	movs	r3, #0
 80003e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f002 faa0 	bl	8002940 <HAL_RCC_ClockConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000406:	f000 faf5 	bl	80009f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800040a:	2301      	movs	r3, #1
 800040c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800040e:	2300      	movs	r3, #0
 8000410:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000412:	463b      	mov	r3, r7
 8000414:	4618      	mov	r0, r3
 8000416:	f002 fcb3 	bl	8002d80 <HAL_RCCEx_PeriphCLKConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000420:	f000 fae8 	bl	80009f4 <Error_Handler>
  }
}
 8000424:	bf00      	nop
 8000426:	3778      	adds	r7, #120	@ 0x78
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000430:	4b1b      	ldr	r3, [pc, #108]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	@ (80004a4 <MX_SPI1_Init+0x78>)
 8000434:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000436:	4b1a      	ldr	r3, [pc, #104]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000438:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800043c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800043e:	4b18      	ldr	r3, [pc, #96]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000444:	4b16      	ldr	r3, [pc, #88]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000446:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800044a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800044c:	4b14      	ldr	r3, [pc, #80]	@ (80004a0 <MX_SPI1_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000452:	4b13      	ldr	r3, [pc, #76]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000458:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <MX_SPI1_Init+0x74>)
 800045a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800045e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000460:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000462:	2210      	movs	r2, #16
 8000464:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000466:	4b0e      	ldr	r3, [pc, #56]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800046c:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <MX_SPI1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000472:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000478:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <MX_SPI1_Init+0x74>)
 800047a:	2207      	movs	r2, #7
 800047c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800047e:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <MX_SPI1_Init+0x74>)
 8000486:	2208      	movs	r2, #8
 8000488:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800048a:	4805      	ldr	r0, [pc, #20]	@ (80004a0 <MX_SPI1_Init+0x74>)
 800048c:	f002 fe28 	bl	80030e0 <HAL_SPI_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000496:	f000 faad 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	200002dc 	.word	0x200002dc
 80004a4:	40013000 	.word	0x40013000

080004a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004ac:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <MX_USART1_UART_Init+0x58>)
 80004ae:	4a15      	ldr	r2, [pc, #84]	@ (8000504 <MX_USART1_UART_Init+0x5c>)
 80004b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <MX_USART1_UART_Init+0x58>)
 80004b4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80004b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ba:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <MX_USART1_UART_Init+0x58>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <MX_USART1_UART_Init+0x58>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000500 <MX_USART1_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <MX_USART1_UART_Init+0x58>)
 80004ce:	220c      	movs	r2, #12
 80004d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000500 <MX_USART1_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d8:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <MX_USART1_UART_Init+0x58>)
 80004da:	2200      	movs	r2, #0
 80004dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004de:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <MX_USART1_UART_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <MX_USART1_UART_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	@ (8000500 <MX_USART1_UART_Init+0x58>)
 80004ec:	f003 fdec 	bl	80040c8 <HAL_UART_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004f6:	f000 fa7d 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000384 	.word	0x20000384
 8000504:	40013800 	.word	0x40013800

08000508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800050e:	4b10      	ldr	r3, [pc, #64]	@ (8000550 <MX_DMA_Init+0x48>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a0f      	ldr	r2, [pc, #60]	@ (8000550 <MX_DMA_Init+0x48>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <MX_DMA_Init+0x48>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2105      	movs	r1, #5
 800052a:	200d      	movs	r0, #13
 800052c:	f000 fdeb 	bl	8001106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000530:	200d      	movs	r0, #13
 8000532:	f000 fe04 	bl	800113e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2105      	movs	r1, #5
 800053a:	200e      	movs	r0, #14
 800053c:	f000 fde3 	bl	8001106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000540:	200e      	movs	r0, #14
 8000542:	f000 fdfc 	bl	800113e <HAL_NVIC_EnableIRQ>

}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <MX_GPIO_Init+0x44>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a0e      	ldr	r2, [pc, #56]	@ (8000598 <MX_GPIO_Init+0x44>)
 8000560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000564:	6153      	str	r3, [r2, #20]
 8000566:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <MX_GPIO_Init+0x44>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <MX_GPIO_Init+0x44>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a08      	ldr	r2, [pc, #32]	@ (8000598 <MX_GPIO_Init+0x44>)
 8000578:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <MX_GPIO_Init+0x44>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  // определить логгирование
  return ch;
 80005a4:	687b      	ldr	r3, [r7, #4]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
	...

080005b4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if(hspi == &hspi1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a06      	ldr	r2, [pc, #24]	@ (80005d8 <HAL_SPI_TxRxCpltCallback+0x24>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d104      	bne.n	80005ce <HAL_SPI_TxRxCpltCallback+0x1a>
  {
	  osSemaphoreRelease(spi_txrx_cplt_Handle);
 80005c4:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <HAL_SPI_TxRxCpltCallback+0x28>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f005 f9a9 	bl	8005920 <osSemaphoreRelease>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200002dc 	.word	0x200002dc
 80005dc:	20000464 	.word	0x20000464

080005e0 <HAL_SPI_ErrorCallback>:


void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi1)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <HAL_SPI_ErrorCallback+0x28>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d107      	bne.n	8000600 <HAL_SPI_ErrorCallback+0x20>
	{
		osSemaphoreRelease(spi_txrx_cplt_Handle);
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <HAL_SPI_ErrorCallback+0x2c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f005 f993 	bl	8005920 <osSemaphoreRelease>
		puts("Error spi transmission");
 80005fa:	4805      	ldr	r0, [pc, #20]	@ (8000610 <HAL_SPI_ErrorCallback+0x30>)
 80005fc:	f007 ff7e 	bl	80084fc <puts>
	}
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200002dc 	.word	0x200002dc
 800060c:	20000464 	.word	0x20000464
 8000610:	08008b84 	.word	0x08008b84

08000614 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
	if(huart == &huart1)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a06      	ldr	r2, [pc, #24]	@ (800063c <HAL_UARTEx_RxEventCallback+0x28>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d104      	bne.n	8000632 <HAL_UARTEx_RxEventCallback+0x1e>
	{
		osSemaphoreRelease(usart_rx_eventHandle);
 8000628:	4b05      	ldr	r3, [pc, #20]	@ (8000640 <HAL_UARTEx_RxEventCallback+0x2c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f005 f977 	bl	8005920 <osSemaphoreRelease>
	}
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000384 	.word	0x20000384
 8000640:	20000504 	.word	0x20000504

08000644 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a06      	ldr	r2, [pc, #24]	@ (8000668 <HAL_UART_TxCpltCallback+0x24>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d104      	bne.n	800065e <HAL_UART_TxCpltCallback+0x1a>
	{
		osSemaphoreRelease(usart_tx_eventHandle);
 8000654:	4b05      	ldr	r3, [pc, #20]	@ (800066c <HAL_UART_TxCpltCallback+0x28>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f005 f961 	bl	8005920 <osSemaphoreRelease>
	}
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000384 	.word	0x20000384
 800066c:	200004b4 	.word	0x200004b4

08000670 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a07      	ldr	r2, [pc, #28]	@ (8000698 <HAL_UART_ErrorCallback+0x28>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d107      	bne.n	8000690 <HAL_UART_ErrorCallback+0x20>
	{
		osSemaphoreRelease(usart_rx_eventHandle);
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <HAL_UART_ErrorCallback+0x2c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	f005 f94b 	bl	8005920 <osSemaphoreRelease>
		puts("Error usart transmission");
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <HAL_UART_ErrorCallback+0x30>)
 800068c:	f007 ff36 	bl	80084fc <puts>
	}
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000384 	.word	0x20000384
 800069c:	20000504 	.word	0x20000504
 80006a0:	08008b9c 	.word	0x08008b9c

080006a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f005 f8e3 	bl	8005878 <osDelay>
 80006b2:	e7fb      	b.n	80006ac <StartDefaultTask+0x8>

080006b4 <spi_handle_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_spi_handle_function */
void spi_handle_function(void const * argument)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08c      	sub	sp, #48	@ 0x30
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN spi_handle_function */
  uint8_t * byte;								// указатель на текущий элемент приёмного буфера
  uint8_t  *rx_buffer = malloc(BUNDLE_SIZE);	// указатель на временно аллоцирумую память приёмного буфера
 80006bc:	2040      	movs	r0, #64	@ 0x40
 80006be:	f007 fd47 	bl	8008150 <malloc>
 80006c2:	4603      	mov	r3, r0
 80006c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint8_t  rx_buffer_itt = 0;					// итератор приёмного буфера
 80006c6:	2300      	movs	r3, #0
 80006c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  uint8_t * tx_buffer;							// указатель на буфер передачи

  bool transmission = false;					// флаг о необходимости помещения временного буфера в очередь
 80006cc:	2300      	movs	r3, #0
 80006ce:	77fb      	strb	r3, [r7, #31]

  /*!
   *  Составление сета из блокировки на очереди и семафоре/мютексе конца передачи по SPI
   */
  QueueSetHandle_t xQueueSet;
  xQueueSet = xQueueCreateSet( USART_TO_SPI_QUEUE_LENGTH + BINARY_SEMAPHORE_LENGTH);
 80006d0:	200b      	movs	r0, #11
 80006d2:	f006 fdb9 	bl	8007248 <xQueueCreateSet>
 80006d6:	61b8      	str	r0, [r7, #24]
  xQueueAddToSet(usart_to_spiHandle, xQueueSet);
 80006d8:	4b62      	ldr	r3, [pc, #392]	@ (8000864 <spi_handle_function+0x1b0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	69b9      	ldr	r1, [r7, #24]
 80006de:	4618      	mov	r0, r3
 80006e0:	f006 fdc1 	bl	8007266 <xQueueAddToSet>
  xQueueAddToSet(spi_txrx_cplt_Handle, xQueueSet);
 80006e4:	4b60      	ldr	r3, [pc, #384]	@ (8000868 <spi_handle_function+0x1b4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	69b9      	ldr	r1, [r7, #24]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 fdbb 	bl	8007266 <xQueueAddToSet>
  QueueSetMemberHandle_t xActivatedMember;
  for(;;)
  {
	  xActivatedMember = xQueueSelectFromSet( xQueueSet, SPI_POLLING_DELAY);
 80006f0:	2164      	movs	r1, #100	@ 0x64
 80006f2:	69b8      	ldr	r0, [r7, #24]
 80006f4:	f006 fdd8 	bl	80072a8 <xQueueSelectFromSet>
 80006f8:	6178      	str	r0, [r7, #20]

	  if ( xActivatedMember == usart_to_spiHandle )
 80006fa:	4b5a      	ldr	r3, [pc, #360]	@ (8000864 <spi_handle_function+0x1b0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	429a      	cmp	r2, r3
 8000702:	d116      	bne.n	8000732 <spi_handle_function+0x7e>
	  {
		  /*!
		   *  проверка типа события. Либо в очереди появился новый элемент и мы должны его передать в SPI Slave.
		   *  Либо сработал семафор конца передачи по DMA или ISR
		   */
		  osEvent event = osMessageGet(usart_to_spiHandle, 10);
 8000704:	4b57      	ldr	r3, [pc, #348]	@ (8000864 <spi_handle_function+0x1b0>)
 8000706:	6819      	ldr	r1, [r3, #0]
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	220a      	movs	r2, #10
 800070e:	4618      	mov	r0, r3
 8000710:	f005 f9a4 	bl	8005a5c <osMessageGet>
		  if (osEventMessage == event.status)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	2b10      	cmp	r3, #16
 8000718:	d1ea      	bne.n	80006f0 <spi_handle_function+0x3c>
		  {
			  tx_buffer = event.value.p;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	623b      	str	r3, [r7, #32]
			  HAL_SPI_TransmitReceive_DMA(&hspi1, &tx_buffer[1], &tx_buffer[1], tx_buffer[0]);
 800071e:	6a3b      	ldr	r3, [r7, #32]
 8000720:	1c59      	adds	r1, r3, #1
 8000722:	6a3b      	ldr	r3, [r7, #32]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	6a3b      	ldr	r3, [r7, #32]
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4850      	ldr	r0, [pc, #320]	@ (800086c <spi_handle_function+0x1b8>)
 800072c:	f002 fe32 	bl	8003394 <HAL_SPI_TransmitReceive_DMA>
 8000730:	e7de      	b.n	80006f0 <spi_handle_function+0x3c>
		  }

	  } else if (xActivatedMember == spi_txrx_cplt_Handle){
 8000732:	4b4d      	ldr	r3, [pc, #308]	@ (8000868 <spi_handle_function+0x1b4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	429a      	cmp	r2, r3
 800073a:	f040 8081 	bne.w	8000840 <spi_handle_function+0x18c>
		   *  При необходимости переносим данные в  приёмный буфер вместе с символом конца строки.
		   *  Если буфер закончился без символа конца строки, то просто добираем фрейм через ISR,
		   *  либо добавляем в очередь при переполнении буфера.
		   *  Подразумеваем , что за один обмен Spi Slave передаст не более одного фрейма.
		   */
		  if (tx_buffer)
 800073e:	6a3b      	ldr	r3, [r7, #32]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d038      	beq.n	80007b6 <spi_handle_function+0x102>
		  {
			  uint16_t itt = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	83bb      	strh	r3, [r7, #28]
			  while(++itt < tx_buffer[0])
 8000748:	e021      	b.n	800078e <spi_handle_function+0xda>
			  {
				  if(tx_buffer[itt])
 800074a:	8bbb      	ldrh	r3, [r7, #28]
 800074c:	6a3a      	ldr	r2, [r7, #32]
 800074e:	4413      	add	r3, r2
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d00e      	beq.n	8000774 <spi_handle_function+0xc0>
				  {
					  rx_buffer[++rx_buffer_itt] = tx_buffer[itt];
 8000756:	8bbb      	ldrh	r3, [r7, #28]
 8000758:	6a3a      	ldr	r2, [r7, #32]
 800075a:	441a      	add	r2, r3
 800075c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000760:	3301      	adds	r3, #1
 8000762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000766:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800076a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800076c:	440b      	add	r3, r1
 800076e:	7812      	ldrb	r2, [r2, #0]
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	e00c      	b.n	800078e <spi_handle_function+0xda>
				  }
				  else
				  {
					  rx_buffer[++rx_buffer_itt] = 0;
 8000774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000778:	3301      	adds	r3, #1
 800077a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800077e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000784:	4413      	add	r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
					  transmission = true;
 800078a:	2301      	movs	r3, #1
 800078c:	77fb      	strb	r3, [r7, #31]
			  while(++itt < tx_buffer[0])
 800078e:	8bbb      	ldrh	r3, [r7, #28]
 8000790:	3301      	adds	r3, #1
 8000792:	83bb      	strh	r3, [r7, #28]
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	8bbb      	ldrh	r3, [r7, #28]
 800079c:	4293      	cmp	r3, r2
 800079e:	d3d4      	bcc.n	800074a <spi_handle_function+0x96>
				  }
			  }
			  if(BUNDLE_SIZE < itt) transmission = true;
 80007a0:	8bbb      	ldrh	r3, [r7, #28]
 80007a2:	2b40      	cmp	r3, #64	@ 0x40
 80007a4:	d901      	bls.n	80007aa <spi_handle_function+0xf6>
 80007a6:	2301      	movs	r3, #1
 80007a8:	77fb      	strb	r3, [r7, #31]
			  free(tx_buffer);
 80007aa:	6a38      	ldr	r0, [r7, #32]
 80007ac:	f007 fcd8 	bl	8008160 <free>
			  tx_buffer = NULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
 80007b4:	e02c      	b.n	8000810 <spi_handle_function+0x15c>
		  }
		  else
		  {
			  if (!byte)
 80007b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d10f      	bne.n	80007dc <spi_handle_function+0x128>
			  {
				  if (rx_buffer_itt)
 80007bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d011      	beq.n	80007e8 <spi_handle_function+0x134>
				  {
					 transmission = true;
 80007c4:	2301      	movs	r3, #1
 80007c6:	77fb      	strb	r3, [r7, #31]
					 rx_buffer[0]=rx_buffer_itt - 1;
 80007c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007cc:	3b01      	subs	r3, #1
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007d2:	701a      	strb	r2, [r3, #0]
					 rx_buffer_itt = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80007da:	e005      	b.n	80007e8 <spi_handle_function+0x134>
				  }
			  }
			  else
			  {
				  if(BUNDLE_SIZE < rx_buffer_itt) transmission = true;
 80007dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007e0:	2b40      	cmp	r3, #64	@ 0x40
 80007e2:	d901      	bls.n	80007e8 <spi_handle_function+0x134>
 80007e4:	2301      	movs	r3, #1
 80007e6:	77fb      	strb	r3, [r7, #31]
			  }

			  /*!
			   *  взводим новый сеанс приемопередачи по прерыванию если фрейм ещё не получен.
			   */
			  if(rx_buffer_itt)
 80007e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00f      	beq.n	8000810 <spi_handle_function+0x15c>
			  {
				  byte = &rx_buffer[++rx_buffer_itt];
 80007f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007f4:	3301      	adds	r3, #1
 80007f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80007fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80007fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000800:	4413      	add	r3, r2
 8000802:	62fb      	str	r3, [r7, #44]	@ 0x2c
				  HAL_SPI_TransmitReceive_IT(&hspi1,byte, byte, 1);
 8000804:	2301      	movs	r3, #1
 8000806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000808:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800080a:	4818      	ldr	r0, [pc, #96]	@ (800086c <spi_handle_function+0x1b8>)
 800080c:	f002 fd14 	bl	8003238 <HAL_SPI_TransmitReceive_IT>
		  }

		  /*!
		   *  В случае переполнения аллоцированного буфера или события конца строки - добавляем буфер в очередь
		   */
		  if (transmission)
 8000810:	7ffb      	ldrb	r3, [r7, #31]
 8000812:	2b00      	cmp	r3, #0
 8000814:	f43f af6c 	beq.w	80006f0 <spi_handle_function+0x3c>
		  {
			  if (osOK != osMessagePut(spi_to_usartHandle, *(uint32_t*)rx_buffer, 100 / portTICK_PERIOD_MS))
 8000818:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <spi_handle_function+0x1bc>)
 800081a:	6818      	ldr	r0, [r3, #0]
 800081c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2264      	movs	r2, #100	@ 0x64
 8000822:	4619      	mov	r1, r3
 8000824:	f005 f8da 	bl	80059dc <osMessagePut>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <spi_handle_function+0x180>
			  {
				  puts("Error  spi_to_usart QUEUE inserting");
 800082e:	4811      	ldr	r0, [pc, #68]	@ (8000874 <spi_handle_function+0x1c0>)
 8000830:	f007 fe64 	bl	80084fc <puts>
			  }

			  rx_buffer = malloc(BUNDLE_SIZE); // аллоцируем новый приемный буфер
 8000834:	2040      	movs	r0, #64	@ 0x40
 8000836:	f007 fc8b 	bl	8008150 <malloc>
 800083a:	4603      	mov	r3, r0
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800083e:	e757      	b.n	80006f0 <spi_handle_function+0x3c>
		   *  взводим новый сеанс приемопередачи по прерыванию по таймауту,
		   *  который возникнет если не будет новой посылки по UART
		   *  Данный метод нужен изза того, что устройство SPI slave можете передавать асинхронно.
		   *  Время реакции на событие SPI Slave равно времени таймаута + накладные издержки времени.
		   */
    	  byte = &rx_buffer[++rx_buffer_itt];
 8000840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000844:	3301      	adds	r3, #1
 8000846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800084a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800084e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000850:	4413      	add	r3, r2
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
    	  HAL_SPI_TransmitReceive_IT(&hspi1,byte, byte, 1);
 8000854:	2301      	movs	r3, #1
 8000856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000858:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800085a:	4804      	ldr	r0, [pc, #16]	@ (800086c <spi_handle_function+0x1b8>)
 800085c:	f002 fcec 	bl	8003238 <HAL_SPI_TransmitReceive_IT>
	  xActivatedMember = xQueueSelectFromSet( xQueueSet, SPI_POLLING_DELAY);
 8000860:	e746      	b.n	80006f0 <spi_handle_function+0x3c>
 8000862:	bf00      	nop
 8000864:	2000045c 	.word	0x2000045c
 8000868:	20000464 	.word	0x20000464
 800086c:	200002dc 	.word	0x200002dc
 8000870:	20000460 	.word	0x20000460
 8000874:	08008bb8 	.word	0x08008bb8

08000878 <usart_handle_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usart_handle_function */
void usart_handle_function(void const * argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	@ 0x30
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN usart_handle_function */
  uint8_t * tx_buffer;						   // указатель на буфер передачи

  uint8_t  *rx_buffer = malloc(BUNDLE_SIZE);   // указатель на временно аллоцирумую память приёмного буфера
 8000880:	2040      	movs	r0, #64	@ 0x40
 8000882:	f007 fc65 	bl	8008150 <malloc>
 8000886:	4603      	mov	r3, r0
 8000888:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint8_t  buffer_itt = 0;                     // итератор приёмного буфера
 800088a:	2300      	movs	r3, #0
 800088c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*!
   *  Составление сета из блокировки на очереди и семафорах /мютексах конца передачи и приёма
   */
  QueueSetHandle_t xQueueSet;
  xQueueSet = xQueueCreateSet( SPI_TO_USART_QUEUE_LENGTH + BINARY_SEMAPHORE_LENGTH + BINARY_SEMAPHORE_LENGTH );
 8000890:	200c      	movs	r0, #12
 8000892:	f006 fcd9 	bl	8007248 <xQueueCreateSet>
 8000896:	6238      	str	r0, [r7, #32]
  xQueueAddToSet(spi_to_usartHandle, xQueueSet);
 8000898:	4b50      	ldr	r3, [pc, #320]	@ (80009dc <usart_handle_function+0x164>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6a39      	ldr	r1, [r7, #32]
 800089e:	4618      	mov	r0, r3
 80008a0:	f006 fce1 	bl	8007266 <xQueueAddToSet>
  xQueueAddToSet(usart_rx_eventHandle, xQueueSet);
 80008a4:	4b4e      	ldr	r3, [pc, #312]	@ (80009e0 <usart_handle_function+0x168>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6a39      	ldr	r1, [r7, #32]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f006 fcdb 	bl	8007266 <xQueueAddToSet>
  xQueueAddToSet(usart_tx_eventHandle, xQueueSet);
 80008b0:	4b4c      	ldr	r3, [pc, #304]	@ (80009e4 <usart_handle_function+0x16c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6a39      	ldr	r1, [r7, #32]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f006 fcd5 	bl	8007266 <xQueueAddToSet>
  QueueSetMemberHandle_t xActivatedMember;
  bool transmission = false;
 80008bc:	2300      	movs	r3, #0
 80008be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  /*!
   *  взводим прерывание приёма по ISR для одной переменной т.к. размер фрейма динамический.
   */
  HAL_UART_Receive_IT(&huart1, &byte, 1);
 80008c2:	f107 031b 	add.w	r3, r7, #27
 80008c6:	2201      	movs	r2, #1
 80008c8:	4619      	mov	r1, r3
 80008ca:	4847      	ldr	r0, [pc, #284]	@ (80009e8 <usart_handle_function+0x170>)
 80008cc:	f003 fc4a 	bl	8004164 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
	  xActivatedMember = xQueueSelectFromSet( xQueueSet, 100 / portTICK_PERIOD_MS);
 80008d0:	2164      	movs	r1, #100	@ 0x64
 80008d2:	6a38      	ldr	r0, [r7, #32]
 80008d4:	f006 fce8 	bl	80072a8 <xQueueSelectFromSet>
 80008d8:	61f8      	str	r0, [r7, #28]
	  if (xActivatedMember == usart_tx_eventHandle ) {
 80008da:	4b42      	ldr	r3, [pc, #264]	@ (80009e4 <usart_handle_function+0x16c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	69fa      	ldr	r2, [r7, #28]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d105      	bne.n	80008f0 <usart_handle_function+0x78>

	  		  /*!
	  		   *  по концу передачи разблокируемся и освобождаем буфер.
	  		   *  важно проверять это событие до события очереди чтобы избежать OVERRUN и утечки памяти.
	  		   */
	  		  free(tx_buffer);
 80008e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80008e6:	f007 fc3b 	bl	8008160 <free>
	  		  tx_buffer = NULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008ee:	e7ef      	b.n	80008d0 <usart_handle_function+0x58>
	  } else if ( xActivatedMember == spi_to_usartHandle ) {
 80008f0:	4b3a      	ldr	r3, [pc, #232]	@ (80009dc <usart_handle_function+0x164>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	69fa      	ldr	r2, [r7, #28]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d115      	bne.n	8000926 <usart_handle_function+0xae>
		   *   разблокированы по событию очереди.
		   *   отправяем фрейм в DMA.
		   *   в первом байте буфера хранится размер данных буфера или всего фрейма ,
		   *   если он меньше размера буфера
		   */
		  osEvent event = osMessageGet(spi_to_usartHandle, 10);
 80008fa:	4b38      	ldr	r3, [pc, #224]	@ (80009dc <usart_handle_function+0x164>)
 80008fc:	6819      	ldr	r1, [r3, #0]
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	220a      	movs	r2, #10
 8000904:	4618      	mov	r0, r3
 8000906:	f005 f8a9 	bl	8005a5c <osMessageGet>
		  if (osEventMessage == event.status)
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	2b10      	cmp	r3, #16
 800090e:	d1df      	bne.n	80008d0 <usart_handle_function+0x58>
		  {
			  tx_buffer = event.value.p;
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  HAL_UART_Transmit_DMA(&huart1,&tx_buffer[1], tx_buffer[0]);
 8000914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000916:	1c59      	adds	r1, r3, #1
 8000918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4832      	ldr	r0, [pc, #200]	@ (80009e8 <usart_handle_function+0x170>)
 8000920:	f003 fc64 	bl	80041ec <HAL_UART_Transmit_DMA>
 8000924:	e7d4      	b.n	80008d0 <usart_handle_function+0x58>
		  }

	  } else if (xActivatedMember == usart_rx_eventHandle ) {
 8000926:	4b2e      	ldr	r3, [pc, #184]	@ (80009e0 <usart_handle_function+0x168>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	69fa      	ldr	r2, [r7, #28]
 800092c:	429a      	cmp	r2, r3
 800092e:	d1cf      	bne.n	80008d0 <usart_handle_function+0x58>
		  /*!
		   *  событие конца приёма в буферную переменную

		   */
		if (byte)
 8000930:	7efb      	ldrb	r3, [r7, #27]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d018      	beq.n	8000968 <usart_handle_function+0xf0>
		{
			/*!
			 *  Если байт не нулевой, то происходит заполнение приёмного буфера
			 *  В случае переполнения иницируется добавление буфера в очередь
			 */
			rx_buffer[++buffer_itt]= byte;
 8000936:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800093a:	3301      	adds	r3, #1
 800093c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000946:	4413      	add	r3, r2
 8000948:	7efa      	ldrb	r2, [r7, #27]
 800094a:	701a      	strb	r2, [r3, #0]
			if(BUNDLE_SIZE < buffer_itt)
 800094c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000950:	2b40      	cmp	r3, #64	@ 0x40
 8000952:	d91d      	bls.n	8000990 <usart_handle_function+0x118>
			{
				rx_buffer[0]=buffer_itt - 1;
 8000954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000958:	3b01      	subs	r3, #1
 800095a:	b2da      	uxtb	r2, r3
 800095c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800095e:	701a      	strb	r2, [r3, #0]
				transmission = true;
 8000960:	2301      	movs	r3, #1
 8000962:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000966:	e013      	b.n	8000990 <usart_handle_function+0x118>
			/*!
			 *  Прихода конца строки ,
			 *  запись в буфер и инициация добавления в очередь
			 *
			*/
			rx_buffer[++buffer_itt] = byte;
 8000968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800096c:	3301      	adds	r3, #1
 800096e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000972:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000978:	4413      	add	r3, r2
 800097a:	7efa      	ldrb	r2, [r7, #27]
 800097c:	701a      	strb	r2, [r3, #0]
			rx_buffer[0]=buffer_itt - 1;
 800097e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000982:	3b01      	subs	r3, #1
 8000984:	b2da      	uxtb	r2, r3
 8000986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000988:	701a      	strb	r2, [r3, #0]
			transmission = true;
 800098a:	2301      	movs	r3, #1
 800098c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}

		if (transmission)
 8000990:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000994:	2b00      	cmp	r3, #0
 8000996:	d018      	beq.n	80009ca <usart_handle_function+0x152>
		{
			if (osOK != osMessagePut(usart_to_spiHandle, *(uint32_t*)rx_buffer, 100 / portTICK_PERIOD_MS))
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <usart_handle_function+0x174>)
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2264      	movs	r2, #100	@ 0x64
 80009a2:	4619      	mov	r1, r3
 80009a4:	f005 f81a 	bl	80059dc <osMessagePut>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d002      	beq.n	80009b4 <usart_handle_function+0x13c>
			{
				puts("Error  usart to spi  QUEUE inserting");
 80009ae:	4810      	ldr	r0, [pc, #64]	@ (80009f0 <usart_handle_function+0x178>)
 80009b0:	f007 fda4 	bl	80084fc <puts>
			}
			/*!
			 *  аллоцируем новый буфер.
			*/
			rx_buffer = malloc(BUNDLE_SIZE);
 80009b4:	2040      	movs	r0, #64	@ 0x40
 80009b6:	f007 fbcb 	bl	8008150 <malloc>
 80009ba:	4603      	mov	r3, r0
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
			buffer_itt = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			transmission = false;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		}

		HAL_UART_Receive_IT(&huart1, &byte, 1); // взводим прерывание по приёму
 80009ca:	f107 031b 	add.w	r3, r7, #27
 80009ce:	2201      	movs	r2, #1
 80009d0:	4619      	mov	r1, r3
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <usart_handle_function+0x170>)
 80009d4:	f003 fbc6 	bl	8004164 <HAL_UART_Receive_IT>
	  xActivatedMember = xQueueSelectFromSet( xQueueSet, 100 / portTICK_PERIOD_MS);
 80009d8:	e77a      	b.n	80008d0 <usart_handle_function+0x58>
 80009da:	bf00      	nop
 80009dc:	20000460 	.word	0x20000460
 80009e0:	20000504 	.word	0x20000504
 80009e4:	200004b4 	.word	0x200004b4
 80009e8:	20000384 	.word	0x20000384
 80009ec:	2000045c 	.word	0x2000045c
 80009f0:	08008bdc 	.word	0x08008bdc

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <Error_Handler+0x8>

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	4a10      	ldr	r2, [pc, #64]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6193      	str	r3, [r2, #24]
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	61d3      	str	r3, [r2, #28]
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	210f      	movs	r1, #15
 8000a3a:	f06f 0001 	mvn.w	r0, #1
 8000a3e:	f000 fb62 	bl	8001106 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	@ 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a2e      	ldr	r2, [pc, #184]	@ (8000b28 <HAL_SPI_MspInit+0xd8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d156      	bne.n	8000b20 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a72:	4b2e      	ldr	r3, [pc, #184]	@ (8000b2c <HAL_SPI_MspInit+0xdc>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a2d      	ldr	r2, [pc, #180]	@ (8000b2c <HAL_SPI_MspInit+0xdc>)
 8000a78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b2c <HAL_SPI_MspInit+0xdc>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b28      	ldr	r3, [pc, #160]	@ (8000b2c <HAL_SPI_MspInit+0xdc>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	4a27      	ldr	r2, [pc, #156]	@ (8000b2c <HAL_SPI_MspInit+0xdc>)
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a94:	6153      	str	r3, [r2, #20]
 8000a96:	4b25      	ldr	r3, [pc, #148]	@ (8000b2c <HAL_SPI_MspInit+0xdc>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000aa2:	23f0      	movs	r3, #240	@ 0xf0
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac0:	f000 fd86 	bl	80015d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <HAL_SPI_MspInit+0xe0>)
 8000ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b34 <HAL_SPI_MspInit+0xe4>)
 8000ac8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aca:	4b19      	ldr	r3, [pc, #100]	@ (8000b30 <HAL_SPI_MspInit+0xe0>)
 8000acc:	2210      	movs	r2, #16
 8000ace:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad0:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <HAL_SPI_MspInit+0xe0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad6:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <HAL_SPI_MspInit+0xe0>)
 8000ad8:	2280      	movs	r2, #128	@ 0x80
 8000ada:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000adc:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <HAL_SPI_MspInit+0xe0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <HAL_SPI_MspInit+0xe0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <HAL_SPI_MspInit+0xe0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000aee:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <HAL_SPI_MspInit+0xe0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000af4:	480e      	ldr	r0, [pc, #56]	@ (8000b30 <HAL_SPI_MspInit+0xe0>)
 8000af6:	f000 fb3c 	bl	8001172 <HAL_DMA_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8000b00:	f7ff ff78 	bl	80009f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <HAL_SPI_MspInit+0xe0>)
 8000b08:	655a      	str	r2, [r3, #84]	@ 0x54
 8000b0a:	4a09      	ldr	r2, [pc, #36]	@ (8000b30 <HAL_SPI_MspInit+0xe0>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2105      	movs	r1, #5
 8000b14:	2023      	movs	r0, #35	@ 0x23
 8000b16:	f000 faf6 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b1a:	2023      	movs	r0, #35	@ 0x23
 8000b1c:	f000 fb0f 	bl	800113e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	@ 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40013000 	.word	0x40013000
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	20000340 	.word	0x20000340
 8000b34:	40020030 	.word	0x40020030

08000b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a2e      	ldr	r2, [pc, #184]	@ (8000c10 <HAL_UART_MspInit+0xd8>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d155      	bne.n	8000c06 <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c14 <HAL_UART_MspInit+0xdc>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c14 <HAL_UART_MspInit+0xdc>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b64:	6193      	str	r3, [r2, #24]
 8000b66:	4b2b      	ldr	r3, [pc, #172]	@ (8000c14 <HAL_UART_MspInit+0xdc>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4b28      	ldr	r3, [pc, #160]	@ (8000c14 <HAL_UART_MspInit+0xdc>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	4a27      	ldr	r2, [pc, #156]	@ (8000c14 <HAL_UART_MspInit+0xdc>)
 8000b78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b7c:	6153      	str	r3, [r2, #20]
 8000b7e:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <HAL_UART_MspInit+0xdc>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b8a:	2330      	movs	r3, #48	@ 0x30
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481c      	ldr	r0, [pc, #112]	@ (8000c18 <HAL_UART_MspInit+0xe0>)
 8000ba6:	f000 fd13 	bl	80015d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <HAL_UART_MspInit+0xe4>)
 8000bac:	4a1c      	ldr	r2, [pc, #112]	@ (8000c20 <HAL_UART_MspInit+0xe8>)
 8000bae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <HAL_UART_MspInit+0xe4>)
 8000bb2:	2210      	movs	r2, #16
 8000bb4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <HAL_UART_MspInit+0xe4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <HAL_UART_MspInit+0xe4>)
 8000bbe:	2280      	movs	r2, #128	@ 0x80
 8000bc0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <HAL_UART_MspInit+0xe4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <HAL_UART_MspInit+0xe4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <HAL_UART_MspInit+0xe4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <HAL_UART_MspInit+0xe4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000bda:	4810      	ldr	r0, [pc, #64]	@ (8000c1c <HAL_UART_MspInit+0xe4>)
 8000bdc:	f000 fac9 	bl	8001172 <HAL_DMA_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 8000be6:	f7ff ff05 	bl	80009f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a0b      	ldr	r2, [pc, #44]	@ (8000c1c <HAL_UART_MspInit+0xe4>)
 8000bee:	671a      	str	r2, [r3, #112]	@ 0x70
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <HAL_UART_MspInit+0xe4>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2105      	movs	r1, #5
 8000bfa:	2025      	movs	r0, #37	@ 0x25
 8000bfc:	f000 fa83 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c00:	2025      	movs	r0, #37	@ 0x25
 8000c02:	f000 fa9c 	bl	800113e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	@ 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40013800 	.word	0x40013800
 8000c14:	40021000 	.word	0x40021000
 8000c18:	48000800 	.word	0x48000800
 8000c1c:	2000040c 	.word	0x2000040c
 8000c20:	40020044 	.word	0x40020044

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5e:	f000 f957 	bl	8000f10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c62:	f007 f969 	bl	8007f38 <xTaskGetSchedulerState>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d001      	beq.n	8000c70 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c6c:	f005 fbbc 	bl	80063e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <DMA1_Channel3_IRQHandler+0x10>)
 8000c7a:	f000 fb9c 	bl	80013b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000340 	.word	0x20000340

08000c88 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <DMA1_Channel4_IRQHandler+0x10>)
 8000c8e:	f000 fb92 	bl	80013b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000040c 	.word	0x2000040c

08000c9c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <SPI1_IRQHandler+0x10>)
 8000ca2:	f002 fd09 	bl	80036b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200002dc 	.word	0x200002dc

08000cb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	@ (8000cc0 <USART1_IRQHandler+0x10>)
 8000cb6:	f003 fb15 	bl	80042e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000384 	.word	0x20000384

08000cc4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	e00a      	b.n	8000cec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cd6:	f3af 8000 	nop.w
 8000cda:	4601      	mov	r1, r0
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	b2ca      	uxtb	r2, r1
 8000ce4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf0      	blt.n	8000cd6 <_read+0x12>
	}

return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	e009      	b.n	8000d24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	60ba      	str	r2, [r7, #8]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fc3f 	bl	800059c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3301      	adds	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dbf1      	blt.n	8000d10 <_write+0x12>
	}
	return len;
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_close>:

int _close(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_isatty>:

int _isatty(int file)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
	return 1;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	@ (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f007 fcd2 	bl	8008778 <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	2000a000 	.word	0x2000a000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	200005a4 	.word	0x200005a4
 8000e08:	20002848 	.word	0x20002848

08000e0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e68 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e34:	f7ff ffea 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	@ (8000e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <LoopForever+0xe>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	@ (8000e7c <LoopForever+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f007 fc91 	bl	8008784 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e62:	f7ff f9cf 	bl	8000204 <main>

08000e66 <LoopForever>:

LoopForever:
    b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e68:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e74:	08008c4c 	.word	0x08008c4c
  ldr r2, =_sbss
 8000e78:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e7c:	20002844 	.word	0x20002844

08000e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_2_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <HAL_Init+0x28>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <HAL_Init+0x28>)
 8000e8e:	f043 0310 	orr.w	r3, r3, #16
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f92b 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fdae 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f943 	bl	800115a <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f90b 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	@ (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	200005a8 	.word	0x200005a8

08000f38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f3c:	4b03      	ldr	r3, [pc, #12]	@ (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200005a8 	.word	0x200005a8

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4907      	ldr	r1, [pc, #28]	@ (8000fec <__NVIC_EnableIRQ+0x38>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	@ (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	@ (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	@ 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	@ 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff8e 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff29 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff3e 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff8e 	bl	8001044 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5d 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff31 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ffa2 	bl	80010ac <SysTick_Config>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e037      	b.n	80011f8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2202      	movs	r2, #2
 800118c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800119e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80011a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f9bc 	bl	8001558 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <HAL_DMA_Start_IT+0x20>
 800121c:	2302      	movs	r3, #2
 800121e:	e04a      	b.n	80012b6 <HAL_DMA_Start_IT+0xb6>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800122e:	2b01      	cmp	r3, #1
 8001230:	d13a      	bne.n	80012a8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2202      	movs	r2, #2
 8001236:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2200      	movs	r2, #0
 800123e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0201 	bic.w	r2, r2, #1
 800124e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f000 f950 	bl	80014fc <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001260:	2b00      	cmp	r3, #0
 8001262:	d008      	beq.n	8001276 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 020e 	orr.w	r2, r2, #14
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e00f      	b.n	8001296 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 020a 	orr.w	r2, r2, #10
 8001284:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0204 	bic.w	r2, r2, #4
 8001294:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f042 0201 	orr.w	r2, r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e005      	b.n	80012b4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80012b0:	2302      	movs	r3, #2
 80012b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e02e      	b.n	800132e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d008      	beq.n	80012ec <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2204      	movs	r2, #4
 80012de:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e020      	b.n	800132e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 020e 	bic.w	r2, r2, #14
 80012fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0201 	bic.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f202 	lsl.w	r2, r1, r2
 800131a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800134c:	2b02      	cmp	r3, #2
 800134e:	d005      	beq.n	800135c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2204      	movs	r2, #4
 8001354:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]
 800135a:	e027      	b.n	80013ac <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 020e 	bic.w	r2, r2, #14
 800136a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f202 	lsl.w	r2, r1, r2
 800138a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	4798      	blx	r3
    }
  }
  return status;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	2204      	movs	r2, #4
 80013d4:	409a      	lsls	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d024      	beq.n	8001428 <HAL_DMA_IRQHandler+0x72>
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d01f      	beq.n	8001428 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0320 	and.w	r3, r3, #32
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d107      	bne.n	8001406 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0204 	bic.w	r2, r2, #4
 8001404:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800140e:	2104      	movs	r1, #4
 8001410:	fa01 f202 	lsl.w	r2, r1, r2
 8001414:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800141a:	2b00      	cmp	r3, #0
 800141c:	d06a      	beq.n	80014f4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001426:	e065      	b.n	80014f4 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	2202      	movs	r2, #2
 800142e:	409a      	lsls	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d02c      	beq.n	8001492 <HAL_DMA_IRQHandler+0xdc>
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d027      	beq.n	8001492 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0320 	and.w	r3, r3, #32
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10b      	bne.n	8001468 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 020a 	bic.w	r2, r2, #10
 800145e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001470:	2102      	movs	r1, #2
 8001472:	fa01 f202 	lsl.w	r2, r1, r2
 8001476:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001484:	2b00      	cmp	r3, #0
 8001486:	d035      	beq.n	80014f4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001490:	e030      	b.n	80014f4 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	2208      	movs	r2, #8
 8001498:	409a      	lsls	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d028      	beq.n	80014f4 <HAL_DMA_IRQHandler+0x13e>
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d023      	beq.n	80014f4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 020e 	bic.w	r2, r2, #14
 80014ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014c4:	2101      	movs	r1, #1
 80014c6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d004      	beq.n	80014f4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	4798      	blx	r3
    }
  }
}
 80014f2:	e7ff      	b.n	80014f4 <HAL_DMA_IRQHandler+0x13e>
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f202 	lsl.w	r2, r1, r2
 8001518:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b10      	cmp	r3, #16
 8001528:	d108      	bne.n	800153c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800153a:	e007      	b.n	800154c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	60da      	str	r2, [r3, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <DMA_CalcBaseAndBitshift+0x60>)
 8001568:	429a      	cmp	r2, r3
 800156a:	d80f      	bhi.n	800158c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <DMA_CalcBaseAndBitshift+0x64>)
 8001574:	4413      	add	r3, r2
 8001576:	4a12      	ldr	r2, [pc, #72]	@ (80015c0 <DMA_CalcBaseAndBitshift+0x68>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	009a      	lsls	r2, r3, #2
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a0f      	ldr	r2, [pc, #60]	@ (80015c4 <DMA_CalcBaseAndBitshift+0x6c>)
 8001588:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800158a:	e00e      	b.n	80015aa <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <DMA_CalcBaseAndBitshift+0x70>)
 8001594:	4413      	add	r3, r2
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <DMA_CalcBaseAndBitshift+0x68>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	009a      	lsls	r2, r3, #2
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <DMA_CalcBaseAndBitshift+0x74>)
 80015a8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40020407 	.word	0x40020407
 80015bc:	bffdfff8 	.word	0xbffdfff8
 80015c0:	cccccccd 	.word	0xcccccccd
 80015c4:	40020000 	.word	0x40020000
 80015c8:	bffdfbf8 	.word	0xbffdfbf8
 80015cc:	40020400 	.word	0x40020400

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015de:	e154      	b.n	800188a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2101      	movs	r1, #1
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8146 	beq.w	8001884 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d005      	beq.n	8001610 <HAL_GPIO_Init+0x40>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d130      	bne.n	8001672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001646:	2201      	movs	r2, #1
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	f003 0201 	and.w	r2, r3, #1
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b03      	cmp	r3, #3
 800167c:	d017      	beq.n	80016ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d123      	bne.n	8001702 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	220f      	movs	r2, #15
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	08da      	lsrs	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3208      	adds	r2, #8
 80016fc:	6939      	ldr	r1, [r7, #16]
 80016fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0203 	and.w	r2, r3, #3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80a0 	beq.w	8001884 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001744:	4b58      	ldr	r3, [pc, #352]	@ (80018a8 <HAL_GPIO_Init+0x2d8>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a57      	ldr	r2, [pc, #348]	@ (80018a8 <HAL_GPIO_Init+0x2d8>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b55      	ldr	r3, [pc, #340]	@ (80018a8 <HAL_GPIO_Init+0x2d8>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800175c:	4a53      	ldr	r2, [pc, #332]	@ (80018ac <HAL_GPIO_Init+0x2dc>)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001786:	d019      	beq.n	80017bc <HAL_GPIO_Init+0x1ec>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a49      	ldr	r2, [pc, #292]	@ (80018b0 <HAL_GPIO_Init+0x2e0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d013      	beq.n	80017b8 <HAL_GPIO_Init+0x1e8>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a48      	ldr	r2, [pc, #288]	@ (80018b4 <HAL_GPIO_Init+0x2e4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d00d      	beq.n	80017b4 <HAL_GPIO_Init+0x1e4>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a47      	ldr	r2, [pc, #284]	@ (80018b8 <HAL_GPIO_Init+0x2e8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d007      	beq.n	80017b0 <HAL_GPIO_Init+0x1e0>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a46      	ldr	r2, [pc, #280]	@ (80018bc <HAL_GPIO_Init+0x2ec>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d101      	bne.n	80017ac <HAL_GPIO_Init+0x1dc>
 80017a8:	2304      	movs	r3, #4
 80017aa:	e008      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017ac:	2305      	movs	r3, #5
 80017ae:	e006      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017b0:	2303      	movs	r3, #3
 80017b2:	e004      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e002      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017bc:	2300      	movs	r3, #0
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	f002 0203 	and.w	r2, r2, #3
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	4093      	lsls	r3, r2
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017ce:	4937      	ldr	r1, [pc, #220]	@ (80018ac <HAL_GPIO_Init+0x2dc>)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017dc:	4b38      	ldr	r3, [pc, #224]	@ (80018c0 <HAL_GPIO_Init+0x2f0>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001800:	4a2f      	ldr	r2, [pc, #188]	@ (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001806:	4b2e      	ldr	r3, [pc, #184]	@ (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800182a:	4a25      	ldr	r2, [pc, #148]	@ (80018c0 <HAL_GPIO_Init+0x2f0>)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001830:	4b23      	ldr	r3, [pc, #140]	@ (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001854:	4a1a      	ldr	r2, [pc, #104]	@ (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800185a:	4b19      	ldr	r3, [pc, #100]	@ (80018c0 <HAL_GPIO_Init+0x2f0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800187e:	4a10      	ldr	r2, [pc, #64]	@ (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3301      	adds	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	f47f aea3 	bne.w	80015e0 <HAL_GPIO_Init+0x10>
  }
}
 800189a:	bf00      	nop
 800189c:	bf00      	nop
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010000 	.word	0x40010000
 80018b0:	48000400 	.word	0x48000400
 80018b4:	48000800 	.word	0x48000800
 80018b8:	48000c00 	.word	0x48000c00
 80018bc:	48001000 	.word	0x48001000
 80018c0:	40010400 	.word	0x40010400

080018c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f001 b823 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 817d 	beq.w	8001bfa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001900:	4bbc      	ldr	r3, [pc, #752]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b04      	cmp	r3, #4
 800190a:	d00c      	beq.n	8001926 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800190c:	4bb9      	ldr	r3, [pc, #740]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d15c      	bne.n	80019d2 <HAL_RCC_OscConfig+0x10e>
 8001918:	4bb6      	ldr	r3, [pc, #728]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001924:	d155      	bne.n	80019d2 <HAL_RCC_OscConfig+0x10e>
 8001926:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800192a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800193a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	095b      	lsrs	r3, r3, #5
 8001946:	b2db      	uxtb	r3, r3
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d102      	bne.n	8001958 <HAL_RCC_OscConfig+0x94>
 8001952:	4ba8      	ldr	r3, [pc, #672]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	e015      	b.n	8001984 <HAL_RCC_OscConfig+0xc0>
 8001958:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800195c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800196c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001970:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001974:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001980:	4b9c      	ldr	r3, [pc, #624]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001984:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001988:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800198c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001990:	fa92 f2a2 	rbit	r2, r2
 8001994:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001998:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800199c:	fab2 f282 	clz	r2, r2
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	f042 0220 	orr.w	r2, r2, #32
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f002 021f 	and.w	r2, r2, #31
 80019ac:	2101      	movs	r1, #1
 80019ae:	fa01 f202 	lsl.w	r2, r1, r2
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 811f 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x334>
 80019ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f040 8116 	bne.w	8001bf8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	f000 bfaf 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x12e>
 80019e4:	4b83      	ldr	r3, [pc, #524]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a82      	ldr	r2, [pc, #520]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 80019ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e036      	b.n	8001a60 <HAL_RCC_OscConfig+0x19c>
 80019f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x158>
 8001a02:	4b7c      	ldr	r3, [pc, #496]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a7b      	ldr	r2, [pc, #492]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b79      	ldr	r3, [pc, #484]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a78      	ldr	r2, [pc, #480]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e021      	b.n	8001a60 <HAL_RCC_OscConfig+0x19c>
 8001a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x184>
 8001a2e:	4b71      	ldr	r3, [pc, #452]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a70      	ldr	r2, [pc, #448]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b6e      	ldr	r3, [pc, #440]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a6d      	ldr	r2, [pc, #436]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e00b      	b.n	8001a60 <HAL_RCC_OscConfig+0x19c>
 8001a48:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a69      	ldr	r2, [pc, #420]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b67      	ldr	r3, [pc, #412]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a66      	ldr	r2, [pc, #408]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a5e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a60:	4b64      	ldr	r3, [pc, #400]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a64:	f023 020f 	bic.w	r2, r3, #15
 8001a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	495f      	ldr	r1, [pc, #380]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d059      	beq.n	8001b3e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fa55 	bl	8000f38 <HAL_GetTick>
 8001a8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fa50 	bl	8000f38 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b64      	cmp	r3, #100	@ 0x64
 8001aa2:	d902      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	f000 bf43 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
 8001aaa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aae:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001abe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	095b      	lsrs	r3, r3, #5
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d102      	bne.n	8001adc <HAL_RCC_OscConfig+0x218>
 8001ad6:	4b47      	ldr	r3, [pc, #284]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	e015      	b.n	8001b08 <HAL_RCC_OscConfig+0x244>
 8001adc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ae0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001af0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001af4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001af8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001b04:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b08:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b0c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001b10:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001b14:	fa92 f2a2 	rbit	r2, r2
 8001b18:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001b1c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001b20:	fab2 f282 	clz	r2, r2
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	f042 0220 	orr.w	r2, r2, #32
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	f002 021f 	and.w	r2, r2, #31
 8001b30:	2101      	movs	r1, #1
 8001b32:	fa01 f202 	lsl.w	r2, r1, r2
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0ab      	beq.n	8001a94 <HAL_RCC_OscConfig+0x1d0>
 8001b3c:	e05d      	b.n	8001bfa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff f9fb 	bl	8000f38 <HAL_GetTick>
 8001b42:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff f9f6 	bl	8000f38 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b64      	cmp	r3, #100	@ 0x64
 8001b56:	d902      	bls.n	8001b5e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	f000 bee9 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
 8001b5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b62:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001b6a:	fa93 f3a3 	rbit	r3, r3
 8001b6e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001b72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d102      	bne.n	8001b90 <HAL_RCC_OscConfig+0x2cc>
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	e015      	b.n	8001bbc <HAL_RCC_OscConfig+0x2f8>
 8001b90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b94:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001ba4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ba8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001bac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001bb0:	fa93 f3a3 	rbit	r3, r3
 8001bb4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bc0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001bc4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001bc8:	fa92 f2a2 	rbit	r2, r2
 8001bcc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001bd0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001bd4:	fab2 f282 	clz	r2, r2
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	f042 0220 	orr.w	r2, r2, #32
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	f002 021f 	and.w	r2, r2, #31
 8001be4:	2101      	movs	r1, #1
 8001be6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1ab      	bne.n	8001b48 <HAL_RCC_OscConfig+0x284>
 8001bf0:	e003      	b.n	8001bfa <HAL_RCC_OscConfig+0x336>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 817d 	beq.w	8001f0a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c10:	4ba6      	ldr	r3, [pc, #664]	@ (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00b      	beq.n	8001c34 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c1c:	4ba3      	ldr	r3, [pc, #652]	@ (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d172      	bne.n	8001d0e <HAL_RCC_OscConfig+0x44a>
 8001c28:	4ba0      	ldr	r3, [pc, #640]	@ (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d16c      	bne.n	8001d0e <HAL_RCC_OscConfig+0x44a>
 8001c34:	2302      	movs	r3, #2
 8001c36:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001c46:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d102      	bne.n	8001c64 <HAL_RCC_OscConfig+0x3a0>
 8001c5e:	4b93      	ldr	r3, [pc, #588]	@ (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	e013      	b.n	8001c8c <HAL_RCC_OscConfig+0x3c8>
 8001c64:	2302      	movs	r3, #2
 8001c66:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c76:	2302      	movs	r3, #2
 8001c78:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001c7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001c88:	4b88      	ldr	r3, [pc, #544]	@ (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001c92:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001c96:	fa92 f2a2 	rbit	r2, r2
 8001c9a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001c9e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001ca2:	fab2 f282 	clz	r2, r2
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	f042 0220 	orr.w	r2, r2, #32
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f002 021f 	and.w	r2, r2, #31
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00a      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x410>
 8001cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d002      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f000 be2e 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4b75      	ldr	r3, [pc, #468]	@ (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	21f8      	movs	r1, #248	@ 0xf8
 8001cea:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001cf2:	fa91 f1a1 	rbit	r1, r1
 8001cf6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001cfa:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001cfe:	fab1 f181 	clz	r1, r1
 8001d02:	b2c9      	uxtb	r1, r1
 8001d04:	408b      	lsls	r3, r1
 8001d06:	4969      	ldr	r1, [pc, #420]	@ (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0c:	e0fd      	b.n	8001f0a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8088 	beq.w	8001e30 <HAL_RCC_OscConfig+0x56c>
 8001d20:	2301      	movs	r3, #1
 8001d22:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001d32:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d40:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	461a      	mov	r2, r3
 8001d48:	2301      	movs	r3, #1
 8001d4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f8f4 	bl	8000f38 <HAL_GetTick>
 8001d50:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d56:	f7ff f8ef 	bl	8000f38 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d902      	bls.n	8001d6c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	f000 bde2 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001d7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d102      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4d8>
 8001d96:	4b45      	ldr	r3, [pc, #276]	@ (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	e013      	b.n	8001dc4 <HAL_RCC_OscConfig+0x500>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001da6:	fa93 f3a3 	rbit	r3, r3
 8001daa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001dae:	2302      	movs	r3, #2
 8001db0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001db4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001dc0:	4b3a      	ldr	r3, [pc, #232]	@ (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001dca:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001dce:	fa92 f2a2 	rbit	r2, r2
 8001dd2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001dd6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001dda:	fab2 f282 	clz	r2, r2
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f042 0220 	orr.w	r2, r2, #32
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	f002 021f 	and.w	r2, r2, #31
 8001dea:	2101      	movs	r1, #1
 8001dec:	fa01 f202 	lsl.w	r2, r1, r2
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0af      	beq.n	8001d56 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df6:	4b2d      	ldr	r3, [pc, #180]	@ (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	21f8      	movs	r1, #248	@ 0xf8
 8001e0c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001e14:	fa91 f1a1 	rbit	r1, r1
 8001e18:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001e1c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001e20:	fab1 f181 	clz	r1, r1
 8001e24:	b2c9      	uxtb	r1, r1
 8001e26:	408b      	lsls	r3, r1
 8001e28:	4920      	ldr	r1, [pc, #128]	@ (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
 8001e2e:	e06c      	b.n	8001f0a <HAL_RCC_OscConfig+0x646>
 8001e30:	2301      	movs	r3, #1
 8001e32:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001e42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e50:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	461a      	mov	r2, r3
 8001e58:	2300      	movs	r3, #0
 8001e5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7ff f86c 	bl	8000f38 <HAL_GetTick>
 8001e60:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e66:	f7ff f867 	bl	8000f38 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d902      	bls.n	8001e7c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	f000 bd5a 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	095b      	lsrs	r3, r3, #5
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d104      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5ec>
 8001ea6:	4b01      	ldr	r3, [pc, #4]	@ (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	e015      	b.n	8001ed8 <HAL_RCC_OscConfig+0x614>
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001ec8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001ed4:	4bc8      	ldr	r3, [pc, #800]	@ (80021f8 <HAL_RCC_OscConfig+0x934>)
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed8:	2202      	movs	r2, #2
 8001eda:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001ede:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001ee2:	fa92 f2a2 	rbit	r2, r2
 8001ee6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001eea:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001eee:	fab2 f282 	clz	r2, r2
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	f042 0220 	orr.w	r2, r2, #32
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f002 021f 	and.w	r2, r2, #31
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f202 	lsl.w	r2, r1, r2
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1ad      	bne.n	8001e66 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8110 	beq.w	8002140 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d079      	beq.n	8002024 <HAL_RCC_OscConfig+0x760>
 8001f30:	2301      	movs	r3, #1
 8001f32:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4bab      	ldr	r3, [pc, #684]	@ (80021fc <HAL_RCC_OscConfig+0x938>)
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	461a      	mov	r2, r3
 8001f56:	2301      	movs	r3, #1
 8001f58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7fe ffed 	bl	8000f38 <HAL_GetTick>
 8001f5e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f64:	f7fe ffe8 	bl	8000f38 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d902      	bls.n	8001f7a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	f000 bcdb 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f90:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f94:	2202      	movs	r2, #2
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	fa93 f2a3 	rbit	r2, r3
 8001fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001faa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fb8:	2202      	movs	r2, #2
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f2a3 	rbit	r2, r3
 8001fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fd2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd4:	4b88      	ldr	r3, [pc, #544]	@ (80021f8 <HAL_RCC_OscConfig+0x934>)
 8001fd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fdc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	6019      	str	r1, [r3, #0]
 8001fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	fa93 f1a3 	rbit	r1, r3
 8001ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ffa:	6019      	str	r1, [r3, #0]
  return result;
 8001ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002000:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2101      	movs	r1, #1
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0a0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x6a0>
 8002022:	e08d      	b.n	8002140 <HAL_RCC_OscConfig+0x87c>
 8002024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002028:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002034:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	fa93 f2a3 	rbit	r2, r3
 800203e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002042:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002046:	601a      	str	r2, [r3, #0]
  return result;
 8002048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002050:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	4b68      	ldr	r3, [pc, #416]	@ (80021fc <HAL_RCC_OscConfig+0x938>)
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	461a      	mov	r2, r3
 8002062:	2300      	movs	r3, #0
 8002064:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7fe ff67 	bl	8000f38 <HAL_GetTick>
 800206a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002070:	f7fe ff62 	bl	8000f38 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d902      	bls.n	8002086 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	f000 bc55 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
 8002086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800208e:	2202      	movs	r2, #2
 8002090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002096:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	fa93 f2a3 	rbit	r2, r3
 80020a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80020b2:	2202      	movs	r2, #2
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fa93 f2a3 	rbit	r2, r3
 80020c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020d6:	2202      	movs	r2, #2
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	fa93 f2a3 	rbit	r2, r3
 80020e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f2:	4b41      	ldr	r3, [pc, #260]	@ (80021f8 <HAL_RCC_OscConfig+0x934>)
 80020f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020fe:	2102      	movs	r1, #2
 8002100:	6019      	str	r1, [r3, #0]
 8002102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002106:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	fa93 f1a3 	rbit	r1, r3
 8002110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002114:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002118:	6019      	str	r1, [r3, #0]
  return result;
 800211a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	2101      	movs	r1, #1
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d197      	bne.n	8002070 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002144:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 81a1 	beq.w	8002498 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215c:	4b26      	ldr	r3, [pc, #152]	@ (80021f8 <HAL_RCC_OscConfig+0x934>)
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d116      	bne.n	8002196 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	4b23      	ldr	r3, [pc, #140]	@ (80021f8 <HAL_RCC_OscConfig+0x934>)
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	4a22      	ldr	r2, [pc, #136]	@ (80021f8 <HAL_RCC_OscConfig+0x934>)
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002172:	61d3      	str	r3, [r2, #28]
 8002174:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <HAL_RCC_OscConfig+0x934>)
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800217c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002180:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800218e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002190:	2301      	movs	r3, #1
 8002192:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <HAL_RCC_OscConfig+0x93c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d11a      	bne.n	80021d8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a2:	4b17      	ldr	r3, [pc, #92]	@ (8002200 <HAL_RCC_OscConfig+0x93c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a16      	ldr	r2, [pc, #88]	@ (8002200 <HAL_RCC_OscConfig+0x93c>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7fe fec3 	bl	8000f38 <HAL_GetTick>
 80021b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	e009      	b.n	80021cc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7fe febe 	bl	8000f38 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	@ 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e3b1      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <HAL_RCC_OscConfig+0x93c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ef      	beq.n	80021b8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d10d      	bne.n	8002204 <HAL_RCC_OscConfig+0x940>
 80021e8:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <HAL_RCC_OscConfig+0x934>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4a02      	ldr	r2, [pc, #8]	@ (80021f8 <HAL_RCC_OscConfig+0x934>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6213      	str	r3, [r2, #32]
 80021f4:	e03c      	b.n	8002270 <HAL_RCC_OscConfig+0x9ac>
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	10908120 	.word	0x10908120
 8002200:	40007000 	.word	0x40007000
 8002204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002208:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10c      	bne.n	800222e <HAL_RCC_OscConfig+0x96a>
 8002214:	4bc1      	ldr	r3, [pc, #772]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4ac0      	ldr	r2, [pc, #768]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	6213      	str	r3, [r2, #32]
 8002220:	4bbe      	ldr	r3, [pc, #760]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4abd      	ldr	r2, [pc, #756]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 8002226:	f023 0304 	bic.w	r3, r3, #4
 800222a:	6213      	str	r3, [r2, #32]
 800222c:	e020      	b.n	8002270 <HAL_RCC_OscConfig+0x9ac>
 800222e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002232:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b05      	cmp	r3, #5
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x994>
 800223e:	4bb7      	ldr	r3, [pc, #732]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4ab6      	ldr	r2, [pc, #728]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6213      	str	r3, [r2, #32]
 800224a:	4bb4      	ldr	r3, [pc, #720]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4ab3      	ldr	r2, [pc, #716]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0x9ac>
 8002258:	4bb0      	ldr	r3, [pc, #704]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4aaf      	ldr	r2, [pc, #700]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 800225e:	f023 0301 	bic.w	r3, r3, #1
 8002262:	6213      	str	r3, [r2, #32]
 8002264:	4bad      	ldr	r3, [pc, #692]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4aac      	ldr	r2, [pc, #688]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 800226a:	f023 0304 	bic.w	r3, r3, #4
 800226e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002274:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 8081 	beq.w	8002384 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002282:	f7fe fe59 	bl	8000f38 <HAL_GetTick>
 8002286:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228a:	e00b      	b.n	80022a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7fe fe54 	bl	8000f38 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e345      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
 80022a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80022ac:	2202      	movs	r2, #2
 80022ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	fa93 f2a3 	rbit	r2, r3
 80022be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022cc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80022d0:	2202      	movs	r2, #2
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	fa93 f2a3 	rbit	r2, r3
 80022e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022ea:	601a      	str	r2, [r3, #0]
  return result;
 80022ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d102      	bne.n	8002310 <HAL_RCC_OscConfig+0xa4c>
 800230a:	4b84      	ldr	r3, [pc, #528]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	e013      	b.n	8002338 <HAL_RCC_OscConfig+0xa74>
 8002310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002314:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002318:	2202      	movs	r2, #2
 800231a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002320:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fa93 f2a3 	rbit	r2, r3
 800232a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	4b79      	ldr	r3, [pc, #484]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800233c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002340:	2102      	movs	r1, #2
 8002342:	6011      	str	r1, [r2, #0]
 8002344:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002348:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	fa92 f1a2 	rbit	r1, r2
 8002352:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002356:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800235a:	6011      	str	r1, [r2, #0]
  return result;
 800235c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002360:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	fab2 f282 	clz	r2, r2
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	f002 021f 	and.w	r2, r2, #31
 8002376:	2101      	movs	r1, #1
 8002378:	fa01 f202 	lsl.w	r2, r1, r2
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d084      	beq.n	800228c <HAL_RCC_OscConfig+0x9c8>
 8002382:	e07f      	b.n	8002484 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002384:	f7fe fdd8 	bl	8000f38 <HAL_GetTick>
 8002388:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	e00b      	b.n	80023a6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe fdd3 	bl	8000f38 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e2c4      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
 80023a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023aa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80023ae:	2202      	movs	r2, #2
 80023b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	fa93 f2a3 	rbit	r2, r3
 80023c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ce:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023d2:	2202      	movs	r2, #2
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	fa93 f2a3 	rbit	r2, r3
 80023e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023ec:	601a      	str	r2, [r3, #0]
  return result;
 80023ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d102      	bne.n	8002412 <HAL_RCC_OscConfig+0xb4e>
 800240c:	4b43      	ldr	r3, [pc, #268]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	e013      	b.n	800243a <HAL_RCC_OscConfig+0xb76>
 8002412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002416:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800241a:	2202      	movs	r2, #2
 800241c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002422:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	fa93 f2a3 	rbit	r2, r3
 800242c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002430:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	4b39      	ldr	r3, [pc, #228]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800243e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002442:	2102      	movs	r1, #2
 8002444:	6011      	str	r1, [r2, #0]
 8002446:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800244a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	fa92 f1a2 	rbit	r1, r2
 8002454:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002458:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800245c:	6011      	str	r1, [r2, #0]
  return result;
 800245e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002462:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	fab2 f282 	clz	r2, r2
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	f002 021f 	and.w	r2, r2, #31
 8002478:	2101      	movs	r1, #1
 800247a:	fa01 f202 	lsl.w	r2, r1, r2
 800247e:	4013      	ands	r3, r2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d184      	bne.n	800238e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002484:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002488:	2b01      	cmp	r3, #1
 800248a:	d105      	bne.n	8002498 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248c:	4b23      	ldr	r3, [pc, #140]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	4a22      	ldr	r2, [pc, #136]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 8002492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002496:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8242 	beq.w	800292e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024aa:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <HAL_RCC_OscConfig+0xc58>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	f000 8213 	beq.w	80028de <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	f040 8162 	bne.w	800278e <HAL_RCC_OscConfig+0xeca>
 80024ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ce:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80024d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024dc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	fa93 f2a3 	rbit	r2, r3
 80024e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ea:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024ee:	601a      	str	r2, [r3, #0]
  return result;
 80024f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002504:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	461a      	mov	r2, r3
 800250c:	2300      	movs	r3, #0
 800250e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fd12 	bl	8000f38 <HAL_GetTick>
 8002514:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002518:	e00c      	b.n	8002534 <HAL_RCC_OscConfig+0xc70>
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe fd0a 	bl	8000f38 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e1fd      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
 8002534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002538:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800253c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002546:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	fa93 f2a3 	rbit	r2, r3
 8002550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002554:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002558:	601a      	str	r2, [r3, #0]
  return result;
 800255a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002562:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d102      	bne.n	800257e <HAL_RCC_OscConfig+0xcba>
 8002578:	4bb0      	ldr	r3, [pc, #704]	@ (800283c <HAL_RCC_OscConfig+0xf78>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	e027      	b.n	80025ce <HAL_RCC_OscConfig+0xd0a>
 800257e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002582:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002586:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800258a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002590:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	fa93 f2a3 	rbit	r2, r3
 800259a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	fa93 f2a3 	rbit	r2, r3
 80025c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	4b9c      	ldr	r3, [pc, #624]	@ (800283c <HAL_RCC_OscConfig+0xf78>)
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025d2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80025d6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025da:	6011      	str	r1, [r2, #0]
 80025dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025e0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	fa92 f1a2 	rbit	r1, r2
 80025ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025ee:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025f2:	6011      	str	r1, [r2, #0]
  return result;
 80025f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025f8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	fab2 f282 	clz	r2, r2
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f042 0220 	orr.w	r2, r2, #32
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	f002 021f 	and.w	r2, r2, #31
 800260e:	2101      	movs	r1, #1
 8002610:	fa01 f202 	lsl.w	r2, r1, r2
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d182      	bne.n	8002520 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261a:	4b88      	ldr	r3, [pc, #544]	@ (800283c <HAL_RCC_OscConfig+0xf78>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002626:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800262e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002632:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	430b      	orrs	r3, r1
 800263c:	497f      	ldr	r1, [pc, #508]	@ (800283c <HAL_RCC_OscConfig+0xf78>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
 8002642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002646:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800264a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800264e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002654:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	fa93 f2a3 	rbit	r2, r3
 800265e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002662:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002666:	601a      	str	r2, [r3, #0]
  return result;
 8002668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002670:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800267c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	461a      	mov	r2, r3
 8002684:	2301      	movs	r3, #1
 8002686:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fc56 	bl	8000f38 <HAL_GetTick>
 800268c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002690:	e009      	b.n	80026a6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002692:	f7fe fc51 	bl	8000f38 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e144      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
 80026a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026aa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80026ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fa93 f2a3 	rbit	r2, r3
 80026c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80026ca:	601a      	str	r2, [r3, #0]
  return result;
 80026cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80026d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_OscConfig+0xe2c>
 80026ea:	4b54      	ldr	r3, [pc, #336]	@ (800283c <HAL_RCC_OscConfig+0xf78>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	e027      	b.n	8002740 <HAL_RCC_OscConfig+0xe7c>
 80026f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80026f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002702:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	fa93 f2a3 	rbit	r2, r3
 800270c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002710:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800271e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002728:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	fa93 f2a3 	rbit	r2, r3
 8002732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002736:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	4b3f      	ldr	r3, [pc, #252]	@ (800283c <HAL_RCC_OscConfig+0xf78>)
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002744:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002748:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800274c:	6011      	str	r1, [r2, #0]
 800274e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002752:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	fa92 f1a2 	rbit	r1, r2
 800275c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002760:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002764:	6011      	str	r1, [r2, #0]
  return result;
 8002766:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800276a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	fab2 f282 	clz	r2, r2
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	f042 0220 	orr.w	r2, r2, #32
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	f002 021f 	and.w	r2, r2, #31
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f202 	lsl.w	r2, r1, r2
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d082      	beq.n	8002692 <HAL_RCC_OscConfig+0xdce>
 800278c:	e0cf      	b.n	800292e <HAL_RCC_OscConfig+0x106a>
 800278e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002792:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002796:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800279a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	fa93 f2a3 	rbit	r2, r3
 80027aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ae:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80027b2:	601a      	str	r2, [r3, #0]
  return result;
 80027b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80027bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	461a      	mov	r2, r3
 80027d0:	2300      	movs	r3, #0
 80027d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe fbb0 	bl	8000f38 <HAL_GetTick>
 80027d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027dc:	e009      	b.n	80027f2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027de:	f7fe fbab 	bl	8000f38 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e09e      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
 80027f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80027fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002804:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002812:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002816:	601a      	str	r2, [r3, #0]
  return result;
 8002818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002820:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d104      	bne.n	8002840 <HAL_RCC_OscConfig+0xf7c>
 8002836:	4b01      	ldr	r3, [pc, #4]	@ (800283c <HAL_RCC_OscConfig+0xf78>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	e029      	b.n	8002890 <HAL_RCC_OscConfig+0xfcc>
 800283c:	40021000 	.word	0x40021000
 8002840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002844:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002848:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800284c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002852:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002860:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800286e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002878:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	fa93 f2a3 	rbit	r2, r3
 8002882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002886:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	4b2b      	ldr	r3, [pc, #172]	@ (800293c <HAL_RCC_OscConfig+0x1078>)
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002894:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002898:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800289c:	6011      	str	r1, [r2, #0]
 800289e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028a2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	fa92 f1a2 	rbit	r1, r2
 80028ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028b0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80028b4:	6011      	str	r1, [r2, #0]
  return result;
 80028b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028ba:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	fab2 f282 	clz	r2, r2
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	f042 0220 	orr.w	r2, r2, #32
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	f002 021f 	and.w	r2, r2, #31
 80028d0:	2101      	movs	r1, #1
 80028d2:	fa01 f202 	lsl.w	r2, r1, r2
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d180      	bne.n	80027de <HAL_RCC_OscConfig+0xf1a>
 80028dc:	e027      	b.n	800292e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e01e      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028f2:	4b12      	ldr	r3, [pc, #72]	@ (800293c <HAL_RCC_OscConfig+0x1078>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80028fe:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002906:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	429a      	cmp	r2, r3
 8002910:	d10b      	bne.n	800292a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002912:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002916:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800291a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002926:	429a      	cmp	r2, r3
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000

08002940 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b09e      	sub	sp, #120	@ 0x78
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e162      	b.n	8002c1e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b90      	ldr	r3, [pc, #576]	@ (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d910      	bls.n	8002988 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b8d      	ldr	r3, [pc, #564]	@ (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 0207 	bic.w	r2, r3, #7
 800296e:	498b      	ldr	r1, [pc, #556]	@ (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b89      	ldr	r3, [pc, #548]	@ (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e14a      	b.n	8002c1e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002994:	4b82      	ldr	r3, [pc, #520]	@ (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	497f      	ldr	r1, [pc, #508]	@ (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 80dc 	beq.w	8002b6c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d13c      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xf6>
 80029bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029c0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80029ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029cc:	fab3 f383 	clz	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d102      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xa6>
 80029e0:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	e00f      	b.n	8002a06 <HAL_RCC_ClockConfig+0xc6>
 80029e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029ea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80029f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80029fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a02:	4b67      	ldr	r3, [pc, #412]	@ (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a06:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a0a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a0e:	fa92 f2a2 	rbit	r2, r2
 8002a12:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002a14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a16:	fab2 f282 	clz	r2, r2
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f042 0220 	orr.w	r2, r2, #32
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f002 021f 	and.w	r2, r2, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d17b      	bne.n	8002b2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e0f3      	b.n	8002c1e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d13c      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x178>
 8002a3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a42:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d102      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x128>
 8002a62:	4b4f      	ldr	r3, [pc, #316]	@ (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	e00f      	b.n	8002a88 <HAL_RCC_ClockConfig+0x148>
 8002a68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a84:	4b46      	ldr	r3, [pc, #280]	@ (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a8c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002a8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a90:	fa92 f2a2 	rbit	r2, r2
 8002a94:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002a96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a98:	fab2 f282 	clz	r2, r2
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	f042 0220 	orr.w	r2, r2, #32
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	f002 021f 	and.w	r2, r2, #31
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d13a      	bne.n	8002b2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0b2      	b.n	8002c1e <HAL_RCC_ClockConfig+0x2de>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d102      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x1a0>
 8002ada:	4b31      	ldr	r3, [pc, #196]	@ (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	e00d      	b.n	8002afc <HAL_RCC_ClockConfig+0x1bc>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aec:	2302      	movs	r3, #2
 8002aee:	623b      	str	r3, [r7, #32]
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	4b29      	ldr	r3, [pc, #164]	@ (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	2202      	movs	r2, #2
 8002afe:	61ba      	str	r2, [r7, #24]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	fa92 f2a2 	rbit	r2, r2
 8002b06:	617a      	str	r2, [r7, #20]
  return result;
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	fab2 f282 	clz	r2, r2
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	f042 0220 	orr.w	r2, r2, #32
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	f002 021f 	and.w	r2, r2, #31
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e079      	b.n	8002c1e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	491a      	ldr	r1, [pc, #104]	@ (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b3c:	f7fe f9fc 	bl	8000f38 <HAL_GetTick>
 8002b40:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7fe f9f8 	bl	8000f38 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e061      	b.n	8002c1e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 020c 	and.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d1eb      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d214      	bcs.n	8002ba4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b08      	ldr	r3, [pc, #32]	@ (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 0207 	bic.w	r2, r3, #7
 8002b82:	4906      	ldr	r1, [pc, #24]	@ (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b04      	ldr	r3, [pc, #16]	@ (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e040      	b.n	8002c1e <HAL_RCC_ClockConfig+0x2de>
 8002b9c:	40022000 	.word	0x40022000
 8002ba0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c28 <HAL_RCC_ClockConfig+0x2e8>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	491a      	ldr	r1, [pc, #104]	@ (8002c28 <HAL_RCC_ClockConfig+0x2e8>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bce:	4b16      	ldr	r3, [pc, #88]	@ (8002c28 <HAL_RCC_ClockConfig+0x2e8>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4912      	ldr	r1, [pc, #72]	@ (8002c28 <HAL_RCC_ClockConfig+0x2e8>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002be2:	f000 f829 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8002be6:	4601      	mov	r1, r0
 8002be8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c28 <HAL_RCC_ClockConfig+0x2e8>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bf0:	22f0      	movs	r2, #240	@ 0xf0
 8002bf2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	fa92 f2a2 	rbit	r2, r2
 8002bfa:	60fa      	str	r2, [r7, #12]
  return result;
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	fab2 f282 	clz	r2, r2
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	40d3      	lsrs	r3, r2
 8002c06:	4a09      	ldr	r2, [pc, #36]	@ (8002c2c <HAL_RCC_ClockConfig+0x2ec>)
 8002c08:	5cd3      	ldrb	r3, [r2, r3]
 8002c0a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c0e:	4a08      	ldr	r2, [pc, #32]	@ (8002c30 <HAL_RCC_ClockConfig+0x2f0>)
 8002c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c12:	4b08      	ldr	r3, [pc, #32]	@ (8002c34 <HAL_RCC_ClockConfig+0x2f4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe f94a 	bl	8000eb0 <HAL_InitTick>
  
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3778      	adds	r7, #120	@ 0x78
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	08008c0c 	.word	0x08008c0c
 8002c30:	20000000 	.word	0x20000000
 8002c34:	20000004 	.word	0x20000004

08002c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c52:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d002      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x30>
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d003      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x36>
 8002c66:	e026      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c68:	4b19      	ldr	r3, [pc, #100]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c6a:	613b      	str	r3, [r7, #16]
      break;
 8002c6c:	e026      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	0c9b      	lsrs	r3, r3, #18
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	4a17      	ldr	r2, [pc, #92]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c78:	5cd3      	ldrb	r3, [r2, r3]
 8002c7a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002c7c:	4b13      	ldr	r3, [pc, #76]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	4a14      	ldr	r2, [pc, #80]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c86:	5cd3      	ldrb	r3, [r2, r3]
 8002c88:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c94:	4a0e      	ldr	r2, [pc, #56]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e004      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	613b      	str	r3, [r7, #16]
      break;
 8002cb4:	e002      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cb8:	613b      	str	r3, [r7, #16]
      break;
 8002cba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cbc:	693b      	ldr	r3, [r7, #16]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	007a1200 	.word	0x007a1200
 8002cd4:	08008c24 	.word	0x08008c24
 8002cd8:	08008c34 	.word	0x08008c34
 8002cdc:	003d0900 	.word	0x003d0900

08002ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce4:	4b03      	ldr	r3, [pc, #12]	@ (8002cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000000 	.word	0x20000000

08002cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002cfe:	f7ff ffef 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002d02:	4601      	mov	r1, r0
 8002d04:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d0c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	fa92 f2a2 	rbit	r2, r2
 8002d18:	603a      	str	r2, [r7, #0]
  return result;
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	fab2 f282 	clz	r2, r2
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	40d3      	lsrs	r3, r2
 8002d24:	4a04      	ldr	r2, [pc, #16]	@ (8002d38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	08008c1c 	.word	0x08008c1c

08002d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d42:	f7ff ffcd 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002d46:	4601      	mov	r1, r0
 8002d48:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002d50:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002d54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	fa92 f2a2 	rbit	r2, r2
 8002d5c:	603a      	str	r2, [r7, #0]
  return result;
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	fab2 f282 	clz	r2, r2
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	40d3      	lsrs	r3, r2
 8002d68:	4a04      	ldr	r2, [pc, #16]	@ (8002d7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d6a:	5cd3      	ldrb	r3, [r2, r3]
 8002d6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	08008c1c 	.word	0x08008c1c

08002d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b092      	sub	sp, #72	@ 0x48
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80d4 	beq.w	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da4:	4b4e      	ldr	r3, [pc, #312]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10e      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dba:	61d3      	str	r3, [r2, #28]
 8002dbc:	4b48      	ldr	r3, [pc, #288]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dce:	4b45      	ldr	r3, [pc, #276]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d118      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dda:	4b42      	ldr	r3, [pc, #264]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a41      	ldr	r2, [pc, #260]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de6:	f7fe f8a7 	bl	8000f38 <HAL_GetTick>
 8002dea:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dec:	e008      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dee:	f7fe f8a3 	bl	8000f38 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b64      	cmp	r3, #100	@ 0x64
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e169      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e00:	4b38      	ldr	r3, [pc, #224]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e0c:	4b34      	ldr	r3, [pc, #208]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8084 	beq.w	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e26:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d07c      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e2c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e3a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4b26      	ldr	r3, [pc, #152]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	461a      	mov	r2, r3
 8002e56:	2301      	movs	r3, #1
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e7e:	4a18      	ldr	r2, [pc, #96]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e82:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d04b      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fe f853 	bl	8000f38 <HAL_GetTick>
 8002e92:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fe f84f 	bl	8000f38 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e113      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002eac:	2302      	movs	r3, #2
 8002eae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb8:	2302      	movs	r3, #2
 8002eba:	623b      	str	r3, [r7, #32]
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	61fb      	str	r3, [r7, #28]
  return result;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d108      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002eda:	4b01      	ldr	r3, [pc, #4]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	e00d      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	10908100 	.word	0x10908100
 8002eec:	2302      	movs	r3, #2
 8002eee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	4b78      	ldr	r3, [pc, #480]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	2202      	movs	r2, #2
 8002efe:	613a      	str	r2, [r7, #16]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	fa92 f2a2 	rbit	r2, r2
 8002f06:	60fa      	str	r2, [r7, #12]
  return result;
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	fab2 f282 	clz	r2, r2
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f002 021f 	and.w	r2, r2, #31
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0b7      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f26:	4b6d      	ldr	r3, [pc, #436]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	496a      	ldr	r1, [pc, #424]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f38:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d105      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f40:	4b66      	ldr	r3, [pc, #408]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	4a65      	ldr	r2, [pc, #404]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f58:	4b60      	ldr	r3, [pc, #384]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5c:	f023 0203 	bic.w	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	495d      	ldr	r1, [pc, #372]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f76:	4b59      	ldr	r3, [pc, #356]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	4956      	ldr	r1, [pc, #344]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f94:	4b51      	ldr	r3, [pc, #324]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	494e      	ldr	r1, [pc, #312]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	f023 0210 	bic.w	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4947      	ldr	r1, [pc, #284]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002fd0:	4b42      	ldr	r3, [pc, #264]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fdc:	493f      	ldr	r1, [pc, #252]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fee:	4b3b      	ldr	r3, [pc, #236]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	f023 0220 	bic.w	r2, r3, #32
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	4938      	ldr	r1, [pc, #224]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800300c:	4b33      	ldr	r3, [pc, #204]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003010:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	4930      	ldr	r1, [pc, #192]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800301a:	4313      	orrs	r3, r2
 800301c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800302a:	4b2c      	ldr	r3, [pc, #176]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	4929      	ldr	r1, [pc, #164]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003038:	4313      	orrs	r3, r2
 800303a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003048:	4b24      	ldr	r3, [pc, #144]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	4921      	ldr	r1, [pc, #132]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003066:	4b1d      	ldr	r3, [pc, #116]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	491a      	ldr	r1, [pc, #104]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003074:	4313      	orrs	r3, r2
 8003076:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003084:	4b15      	ldr	r3, [pc, #84]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003088:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003090:	4912      	ldr	r1, [pc, #72]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003092:	4313      	orrs	r3, r2
 8003094:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030a2:	4b0e      	ldr	r3, [pc, #56]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	490b      	ldr	r1, [pc, #44]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80030c0:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030cc:	4903      	ldr	r1, [pc, #12]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3748      	adds	r7, #72	@ 0x48
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000

080030e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e09d      	b.n	800322e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d108      	bne.n	800310c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003102:	d009      	beq.n	8003118 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	61da      	str	r2, [r3, #28]
 800310a:	e005      	b.n	8003118 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fd fc8c 	bl	8000a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800314e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003158:	d902      	bls.n	8003160 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	e002      	b.n	8003166 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003164:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800316e:	d007      	beq.n	8003180 <HAL_SPI_Init+0xa0>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003178:	d002      	beq.n	8003180 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c2:	ea42 0103 	orr.w	r1, r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	0c1b      	lsrs	r3, r3, #16
 80031dc:	f003 0204 	and.w	r2, r3, #4
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80031fc:	ea42 0103 	orr.w	r1, r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800321c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003250:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003258:	7dbb      	ldrb	r3, [r7, #22]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d00d      	beq.n	800327a <HAL_SPI_TransmitReceive_IT+0x42>
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003264:	d106      	bne.n	8003274 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d102      	bne.n	8003274 <HAL_SPI_TransmitReceive_IT+0x3c>
 800326e:	7dbb      	ldrb	r3, [r7, #22]
 8003270:	2b04      	cmp	r3, #4
 8003272:	d002      	beq.n	800327a <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8003274:	2302      	movs	r3, #2
 8003276:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003278:	e07d      	b.n	8003376 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_SPI_TransmitReceive_IT+0x54>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <HAL_SPI_TransmitReceive_IT+0x54>
 8003286:	887b      	ldrh	r3, [r7, #2]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003290:	e071      	b.n	8003376 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_SPI_TransmitReceive_IT+0x68>
 800329c:	2302      	movs	r3, #2
 800329e:	e06b      	b.n	8003378 <HAL_SPI_TransmitReceive_IT+0x140>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d003      	beq.n	80032bc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2205      	movs	r2, #5
 80032b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	887a      	ldrh	r2, [r7, #2]
 80032d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	887a      	ldrh	r2, [r7, #2]
 80032de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	887a      	ldrh	r2, [r7, #2]
 80032e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032f2:	d906      	bls.n	8003302 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4a23      	ldr	r2, [pc, #140]	@ (8003384 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80032f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a22      	ldr	r2, [pc, #136]	@ (8003388 <HAL_SPI_TransmitReceive_IT+0x150>)
 80032fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8003300:	e005      	b.n	800330e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a21      	ldr	r2, [pc, #132]	@ (800338c <HAL_SPI_TransmitReceive_IT+0x154>)
 8003306:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a21      	ldr	r2, [pc, #132]	@ (8003390 <HAL_SPI_TransmitReceive_IT+0x158>)
 800330c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003316:	d802      	bhi.n	800331e <HAL_SPI_TransmitReceive_IT+0xe6>
 8003318:	887b      	ldrh	r3, [r7, #2]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d908      	bls.n	8003330 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	e007      	b.n	8003340 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800333e:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334a:	2b40      	cmp	r3, #64	@ 0x40
 800334c:	d007      	beq.n	800335e <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800335c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8003374:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8003376:	7dfb      	ldrb	r3, [r7, #23]
}
 8003378:	4618      	mov	r0, r3
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	08003c07 	.word	0x08003c07
 8003388:	08003c6d 	.word	0x08003c6d
 800338c:	08003ab7 	.word	0x08003ab7
 8003390:	08003b75 	.word	0x08003b75

08003394 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e172      	b.n	800369a <HAL_SPI_TransmitReceive_DMA+0x306>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033c2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80033ca:	7dbb      	ldrb	r3, [r7, #22]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d00d      	beq.n	80033ec <HAL_SPI_TransmitReceive_DMA+0x58>
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033d6:	d106      	bne.n	80033e6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80033e0:	7dbb      	ldrb	r3, [r7, #22]
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d002      	beq.n	80033ec <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80033e6:	2302      	movs	r3, #2
 80033e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033ea:	e151      	b.n	8003690 <HAL_SPI_TransmitReceive_DMA+0x2fc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <HAL_SPI_TransmitReceive_DMA+0x6a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_SPI_TransmitReceive_DMA+0x6a>
 80033f8:	887b      	ldrh	r3, [r7, #2]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d102      	bne.n	8003404 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003402:	e145      	b.n	8003690 <HAL_SPI_TransmitReceive_DMA+0x2fc>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b04      	cmp	r3, #4
 800340e:	d003      	beq.n	8003418 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2205      	movs	r2, #5
 8003414:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	887a      	ldrh	r2, [r7, #2]
 8003428:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	887a      	ldrh	r2, [r7, #2]
 800342e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	887a      	ldrh	r2, [r7, #2]
 800343a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	887a      	ldrh	r2, [r7, #2]
 8003442:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	651a      	str	r2, [r3, #80]	@ 0x50
  }
#endif /* USE_SPI_CRC */

#if defined (STM32F302xC) || defined (STM32F303xC) || defined (STM32F373xC) || defined (STM32F358xx) || defined (STM32F378xx)
  /* Packing mode management is enabled by the DMA settings */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800345a:	d808      	bhi.n	800346e <HAL_SPI_TransmitReceive_DMA+0xda>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003466:	d102      	bne.n	800346e <HAL_SPI_TransmitReceive_DMA+0xda>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800346c:	e110      	b.n	8003690 <HAL_SPI_TransmitReceive_DMA+0x2fc>
  }
#endif /* STM32F302xC || STM32F303xC || STM32F373xC || STM32F358xx || STM32F378xx */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800347c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003486:	d908      	bls.n	800349a <HAL_SPI_TransmitReceive_DMA+0x106>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003496:	605a      	str	r2, [r3, #4]
 8003498:	e06f      	b.n	800357a <HAL_SPI_TransmitReceive_DMA+0x1e6>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034a8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b4:	d126      	bne.n	8003504 <HAL_SPI_TransmitReceive_DMA+0x170>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10f      	bne.n	80034e2 <HAL_SPI_TransmitReceive_DMA+0x14e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80034d0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	085b      	lsrs	r3, r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034e0:	e010      	b.n	8003504 <HAL_SPI_TransmitReceive_DMA+0x170>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034f0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3301      	adds	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800350e:	d134      	bne.n	800357a <HAL_SPI_TransmitReceive_DMA+0x1e6>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800351e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003526:	b29b      	uxth	r3, r3
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d111      	bne.n	8003554 <HAL_SPI_TransmitReceive_DMA+0x1c0>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800353e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003546:	b29b      	uxth	r3, r3
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003552:	e012      	b.n	800357a <HAL_SPI_TransmitReceive_DMA+0x1e6>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003562:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800356a:	b29b      	uxth	r3, r3
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	b29b      	uxth	r3, r3
 8003570:	3301      	adds	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b04      	cmp	r3, #4
 8003584:	d108      	bne.n	8003598 <HAL_SPI_TransmitReceive_DMA+0x204>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358a:	4a46      	ldr	r2, [pc, #280]	@ (80036a4 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800358c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003592:	4a45      	ldr	r2, [pc, #276]	@ (80036a8 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8003594:	629a      	str	r2, [r3, #40]	@ 0x28
 8003596:	e007      	b.n	80035a8 <HAL_SPI_TransmitReceive_DMA+0x214>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359c:	4a43      	ldr	r2, [pc, #268]	@ (80036ac <HAL_SPI_TransmitReceive_DMA+0x318>)
 800359e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a4:	4a42      	ldr	r2, [pc, #264]	@ (80036b0 <HAL_SPI_TransmitReceive_DMA+0x31c>)
 80035a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ac:	4a41      	ldr	r2, [pc, #260]	@ (80036b4 <HAL_SPI_TransmitReceive_DMA+0x320>)
 80035ae:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b4:	2200      	movs	r2, #0
 80035b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	330c      	adds	r3, #12
 80035c2:	4619      	mov	r1, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80035d2:	f7fd fe15 	bl	8001200 <HAL_DMA_Start_IT>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_SPI_TransmitReceive_DMA+0x25a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e0:	f043 0210 	orr.w	r2, r3, #16
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	75fb      	strb	r3, [r7, #23]

    goto error;
 80035ec:	e050      	b.n	8003690 <HAL_SPI_TransmitReceive_DMA+0x2fc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003602:	2200      	movs	r2, #0
 8003604:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360a:	2200      	movs	r2, #0
 800360c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361a:	2200      	movs	r2, #0
 800361c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003626:	4619      	mov	r1, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003634:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003636:	f7fd fde3 	bl	8001200 <HAL_DMA_Start_IT>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_SPI_TransmitReceive_DMA+0x2be>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003644:	f043 0210 	orr.w	r2, r3, #16
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003650:	e01e      	b.n	8003690 <HAL_SPI_TransmitReceive_DMA+0x2fc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365c:	2b40      	cmp	r3, #64	@ 0x40
 800365e:	d007      	beq.n	8003670 <HAL_SPI_TransmitReceive_DMA+0x2dc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800366e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0220 	orr.w	r2, r2, #32
 800367e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0202 	orr.w	r2, r2, #2
 800368e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003698:	7dfb      	ldrb	r3, [r7, #23]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	08003a15 	.word	0x08003a15
 80036a8:	080038dd 	.word	0x080038dd
 80036ac:	08003a31 	.word	0x08003a31
 80036b0:	08003985 	.word	0x08003985
 80036b4:	08003a4d 	.word	0x08003a4d

080036b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10e      	bne.n	80036f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
    return;
 80036f6:	e0ce      	b.n	8003896 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_SPI_IRQHandler+0x5e>
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003708:	2b00      	cmp	r3, #0
 800370a:	d004      	beq.n	8003716 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
    return;
 8003714:	e0bf      	b.n	8003896 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <HAL_SPI_IRQHandler+0x7e>
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80b0 	beq.w	8003896 <HAL_SPI_IRQHandler+0x1de>
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80aa 	beq.w	8003896 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	d023      	beq.n	8003794 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b03      	cmp	r3, #3
 8003756:	d011      	beq.n	800377c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375c:	f043 0204 	orr.w	r2, r3, #4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	e00b      	b.n	8003794 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800377c:	2300      	movs	r3, #0
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	693b      	ldr	r3, [r7, #16]
        return;
 8003792:	e080      	b.n	8003896 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d014      	beq.n	80037c8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a2:	f043 0201 	orr.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00c      	beq.n	80037ec <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d6:	f043 0208 	orr.w	r2, r3, #8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80037de:	2300      	movs	r3, #0
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d04f      	beq.n	8003894 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003802:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d104      	bne.n	8003820 <HAL_SPI_IRQHandler+0x168>
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d034      	beq.n	800388a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0203 	bic.w	r2, r2, #3
 800382e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003834:	2b00      	cmp	r3, #0
 8003836:	d011      	beq.n	800385c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383c:	4a17      	ldr	r2, [pc, #92]	@ (800389c <HAL_SPI_IRQHandler+0x1e4>)
 800383e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd fd78 	bl	800133a <HAL_DMA_Abort_IT>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003854:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003860:	2b00      	cmp	r3, #0
 8003862:	d016      	beq.n	8003892 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003868:	4a0c      	ldr	r2, [pc, #48]	@ (800389c <HAL_SPI_IRQHandler+0x1e4>)
 800386a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003870:	4618      	mov	r0, r3
 8003872:	f7fd fd62 	bl	800133a <HAL_DMA_Abort_IT>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003880:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003888:	e003      	b.n	8003892 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fc fea8 	bl	80005e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003890:	e000      	b.n	8003894 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003892:	bf00      	nop
    return;
 8003894:	bf00      	nop
  }
}
 8003896:	3720      	adds	r7, #32
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	08003a8d 	.word	0x08003a8d

080038a0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038ea:	f7fd fb25 	bl	8000f38 <HAL_GetTick>
 80038ee:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d03c      	beq.n	8003978 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0220 	bic.w	r2, r2, #32
 800390c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10d      	bne.n	8003932 <SPI_DMAReceiveCplt+0x56>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800391e:	d108      	bne.n	8003932 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0203 	bic.w	r2, r2, #3
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	e007      	b.n	8003942 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	2164      	movs	r1, #100	@ 0x64
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fade 	bl	8003f08 <SPI_EndRxTransaction>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7fc fe35 	bl	80005e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003976:	e002      	b.n	800397e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f7ff ff91 	bl	80038a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003992:	f7fd fad1 	bl	8000f38 <HAL_GetTick>
 8003996:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b20      	cmp	r3, #32
 80039a4:	d030      	beq.n	8003a08 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0220 	bic.w	r2, r2, #32
 80039b4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	2164      	movs	r1, #100	@ 0x64
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fafc 	bl	8003fb8 <SPI_EndRxTxTransaction>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ca:	f043 0220 	orr.w	r2, r3, #32
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0203 	bic.w	r2, r2, #3
 80039e0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7fc fded 	bl	80005e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003a06:	e002      	b.n	8003a0e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f7fc fdd3 	bl	80005b4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f7ff ff46 	bl	80038b4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f7ff ff42 	bl	80038c8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0203 	bic.w	r2, r2, #3
 8003a68:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6e:	f043 0210 	orr.w	r2, r3, #16
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f7fc fdae 	bl	80005e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f7fc fd99 	bl	80005e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003aae:	bf00      	nop
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d923      	bls.n	8003b12 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad4:	b292      	uxth	r2, r2
 8003ad6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	1c9a      	adds	r2, r3, #2
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b02      	subs	r3, #2
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d11f      	bne.n	8003b40 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b0e:	605a      	str	r2, [r3, #4]
 8003b10:	e016      	b.n	8003b40 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f103 020c 	add.w	r2, r3, #12
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	7812      	ldrb	r2, [r2, #0]
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10f      	bne.n	8003b6c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b5a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d102      	bne.n	8003b6c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fa6c 	bl	8004044 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d912      	bls.n	8003bac <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8a:	881a      	ldrh	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b96:	1c9a      	adds	r2, r3, #2
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b02      	subs	r3, #2
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003baa:	e012      	b.n	8003bd2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	7812      	ldrb	r2, [r2, #0]
 8003bb8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d110      	bne.n	8003bfe <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bea:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fa23 	bl	8004044 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c18:	b292      	uxth	r2, r2
 8003c1a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c20:	1c9a      	adds	r2, r3, #2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10f      	bne.n	8003c64 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c52:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d102      	bne.n	8003c64 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9f0 	bl	8004044 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c64:	bf00      	nop
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c78:	881a      	ldrh	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c84:	1c9a      	adds	r2, r3, #2
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d110      	bne.n	8003cc4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cb0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d102      	bne.n	8003cc4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f9c0 	bl	8004044 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cdc:	f7fd f92c 	bl	8000f38 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cec:	f7fd f924 	bl	8000f38 <HAL_GetTick>
 8003cf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cf2:	4b39      	ldr	r3, [pc, #228]	@ (8003dd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	015b      	lsls	r3, r3, #5
 8003cf8:	0d1b      	lsrs	r3, r3, #20
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	fb02 f303 	mul.w	r3, r2, r3
 8003d00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d02:	e054      	b.n	8003dae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0a:	d050      	beq.n	8003dae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d0c:	f7fd f914 	bl	8000f38 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d902      	bls.n	8003d22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d13d      	bne.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d3a:	d111      	bne.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d44:	d004      	beq.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d4e:	d107      	bne.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d68:	d10f      	bne.n	8003d8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e017      	b.n	8003dce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4013      	ands	r3, r2
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	bf0c      	ite	eq
 8003dbe:	2301      	moveq	r3, #1
 8003dc0:	2300      	movne	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d19b      	bne.n	8003d04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000000 	.word	0x20000000

08003ddc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	@ 0x28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003dee:	f7fd f8a3 	bl	8000f38 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003dfe:	f7fd f89b 	bl	8000f38 <HAL_GetTick>
 8003e02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	00da      	lsls	r2, r3, #3
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	0d1b      	lsrs	r3, r3, #20
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e24:	e060      	b.n	8003ee8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e2c:	d107      	bne.n	8003e3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d050      	beq.n	8003ee8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e46:	f7fd f877 	bl	8000f38 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d902      	bls.n	8003e5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d13d      	bne.n	8003ed8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e74:	d111      	bne.n	8003e9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e7e:	d004      	beq.n	8003e8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e88:	d107      	bne.n	8003e9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ea2:	d10f      	bne.n	8003ec4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ec2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e010      	b.n	8003efa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d196      	bne.n	8003e26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3728      	adds	r7, #40	@ 0x28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000000 	.word	0x20000000

08003f08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f1c:	d111      	bne.n	8003f42 <SPI_EndRxTransaction+0x3a>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f26:	d004      	beq.n	8003f32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f30:	d107      	bne.n	8003f42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f40:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2180      	movs	r1, #128	@ 0x80
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7ff febd 	bl	8003ccc <SPI_WaitFlagStateUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f5c:	f043 0220 	orr.w	r2, r3, #32
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e023      	b.n	8003fb0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f70:	d11d      	bne.n	8003fae <SPI_EndRxTransaction+0xa6>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f7a:	d004      	beq.n	8003f86 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f84:	d113      	bne.n	8003fae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f7ff ff22 	bl	8003ddc <SPI_WaitFifoStateUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d007      	beq.n	8003fae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa2:	f043 0220 	orr.w	r2, r3, #32
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e000      	b.n	8003fb0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f7ff ff03 	bl	8003ddc <SPI_WaitFifoStateUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d007      	beq.n	8003fec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe0:	f043 0220 	orr.w	r2, r3, #32
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e027      	b.n	800403c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2180      	movs	r1, #128	@ 0x80
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff fe68 	bl	8003ccc <SPI_WaitFlagStateUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004006:	f043 0220 	orr.w	r2, r3, #32
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e014      	b.n	800403c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2200      	movs	r2, #0
 800401a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f7ff fedc 	bl	8003ddc <SPI_WaitFifoStateUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402e:	f043 0220 	orr.w	r2, r3, #32
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e000      	b.n	800403c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800404c:	f7fc ff74 	bl	8000f38 <HAL_GetTick>
 8004050:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0220 	bic.w	r2, r2, #32
 8004060:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	2164      	movs	r1, #100	@ 0x64
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff ffa6 	bl	8003fb8 <SPI_EndRxTxTransaction>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004076:	f043 0220 	orr.w	r2, r3, #32
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004082:	2b00      	cmp	r3, #0
 8004084:	d115      	bne.n	80040b2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b04      	cmp	r3, #4
 8004090:	d107      	bne.n	80040a2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fc00 	bl	80038a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80040a0:	e00e      	b.n	80040c0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fc fa82 	bl	80005b4 <HAL_SPI_TxRxCpltCallback>
}
 80040b0:	e006      	b.n	80040c0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fc fa90 	bl	80005e0 <HAL_SPI_ErrorCallback>
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e040      	b.n	800415c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fc fd24 	bl	8000b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2224      	movs	r2, #36	@ 0x24
 80040f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fdb6 	bl	8004c80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fbdf 	bl	80048d8 <UART_SetConfig>
 800411a:	4603      	mov	r3, r0
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e01b      	b.n	800415c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004132:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fe35 	bl	8004dc4 <UART_CheckIdleState>
 800415a:	4603      	mov	r3, r0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	@ 0x28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	4613      	mov	r3, r2
 8004170:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004178:	2b20      	cmp	r3, #32
 800417a:	d132      	bne.n	80041e2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_UART_Receive_IT+0x24>
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e02b      	b.n	80041e4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d018      	beq.n	80041d2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	613b      	str	r3, [r7, #16]
   return(result);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	623b      	str	r3, [r7, #32]
 80041c0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	69f9      	ldr	r1, [r7, #28]
 80041c4:	6a3a      	ldr	r2, [r7, #32]
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e6      	bne.n	80041a0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	461a      	mov	r2, r3
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 ff09 	bl	8004ff0 <UART_Start_Receive_IT>
 80041de:	4603      	mov	r3, r0
 80041e0:	e000      	b.n	80041e4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80041e2:	2302      	movs	r3, #2
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3728      	adds	r7, #40	@ 0x28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	@ 0x28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	4613      	mov	r3, r2
 80041f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d165      	bne.n	80042ce <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <HAL_UART_Transmit_DMA+0x22>
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e05e      	b.n	80042d0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	88fa      	ldrh	r2, [r7, #6]
 800421c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	88fa      	ldrh	r2, [r7, #6]
 8004224:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2221      	movs	r2, #33	@ 0x21
 8004234:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800423a:	2b00      	cmp	r3, #0
 800423c:	d027      	beq.n	800428e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004242:	4a25      	ldr	r2, [pc, #148]	@ (80042d8 <HAL_UART_Transmit_DMA+0xec>)
 8004244:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424a:	4a24      	ldr	r2, [pc, #144]	@ (80042dc <HAL_UART_Transmit_DMA+0xf0>)
 800424c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004252:	4a23      	ldr	r2, [pc, #140]	@ (80042e0 <HAL_UART_Transmit_DMA+0xf4>)
 8004254:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425a:	2200      	movs	r2, #0
 800425c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004266:	4619      	mov	r1, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3328      	adds	r3, #40	@ 0x28
 800426e:	461a      	mov	r2, r3
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	f7fc ffc5 	bl	8001200 <HAL_DMA_Start_IT>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2210      	movs	r2, #16
 8004280:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e020      	b.n	80042d0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2240      	movs	r2, #64	@ 0x40
 8004294:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3308      	adds	r3, #8
 800429c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	613b      	str	r3, [r7, #16]
   return(result);
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3308      	adds	r3, #8
 80042b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b6:	623a      	str	r2, [r7, #32]
 80042b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	69f9      	ldr	r1, [r7, #28]
 80042bc:	6a3a      	ldr	r2, [r7, #32]
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e5      	bne.n	8004296 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e000      	b.n	80042d0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
  }
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3728      	adds	r7, #40	@ 0x28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	0800526d 	.word	0x0800526d
 80042dc:	08005301 	.word	0x08005301
 80042e0:	0800531d 	.word	0x0800531d

080042e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b0ba      	sub	sp, #232	@ 0xe8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800430a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800430e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004312:	4013      	ands	r3, r2
 8004314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d115      	bne.n	800434c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00f      	beq.n	800434c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800432c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b00      	cmp	r3, #0
 8004336:	d009      	beq.n	800434c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 82ab 	beq.w	8004898 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	4798      	blx	r3
      }
      return;
 800434a:	e2a5      	b.n	8004898 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800434c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8117 	beq.w	8004584 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004366:	4b85      	ldr	r3, [pc, #532]	@ (800457c <HAL_UART_IRQHandler+0x298>)
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 810a 	beq.w	8004584 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d011      	beq.n	80043a0 <HAL_UART_IRQHandler+0xbc>
 800437c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00b      	beq.n	80043a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2201      	movs	r2, #1
 800438e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004396:	f043 0201 	orr.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d011      	beq.n	80043d0 <HAL_UART_IRQHandler+0xec>
 80043ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00b      	beq.n	80043d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2202      	movs	r2, #2
 80043be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043c6:	f043 0204 	orr.w	r2, r3, #4
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d011      	beq.n	8004400 <HAL_UART_IRQHandler+0x11c>
 80043dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00b      	beq.n	8004400 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2204      	movs	r2, #4
 80043ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043f6:	f043 0202 	orr.w	r2, r3, #2
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d017      	beq.n	800443c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800440c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800441c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00b      	beq.n	800443c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2208      	movs	r2, #8
 800442a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004432:	f043 0208 	orr.w	r2, r3, #8
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800443c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004444:	2b00      	cmp	r3, #0
 8004446:	d012      	beq.n	800446e <HAL_UART_IRQHandler+0x18a>
 8004448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800444c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00c      	beq.n	800446e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800445c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004464:	f043 0220 	orr.w	r2, r3, #32
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8211 	beq.w	800489c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00d      	beq.n	80044a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b6:	2b40      	cmp	r3, #64	@ 0x40
 80044b8:	d005      	beq.n	80044c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d04f      	beq.n	8004566 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fe6c 	bl	80051a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d6:	2b40      	cmp	r3, #64	@ 0x40
 80044d8:	d141      	bne.n	800455e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3308      	adds	r3, #8
 80044e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80044f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3308      	adds	r3, #8
 8004502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004506:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800450a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800451e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1d9      	bne.n	80044da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452a:	2b00      	cmp	r3, #0
 800452c:	d013      	beq.n	8004556 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004532:	4a13      	ldr	r2, [pc, #76]	@ (8004580 <HAL_UART_IRQHandler+0x29c>)
 8004534:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453a:	4618      	mov	r0, r3
 800453c:	f7fc fefd 	bl	800133a <HAL_DMA_Abort_IT>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d017      	beq.n	8004576 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800454a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004550:	4610      	mov	r0, r2
 8004552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	e00f      	b.n	8004576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fc f88a 	bl	8000670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455c:	e00b      	b.n	8004576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fc f886 	bl	8000670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004564:	e007      	b.n	8004576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fc f882 	bl	8000670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004574:	e192      	b.n	800489c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004576:	bf00      	nop
    return;
 8004578:	e190      	b.n	800489c <HAL_UART_IRQHandler+0x5b8>
 800457a:	bf00      	nop
 800457c:	04000120 	.word	0x04000120
 8004580:	0800539b 	.word	0x0800539b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004588:	2b01      	cmp	r3, #1
 800458a:	f040 814b 	bne.w	8004824 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 8144 	beq.w	8004824 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800459c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 813d 	beq.w	8004824 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2210      	movs	r2, #16
 80045b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045bc:	2b40      	cmp	r3, #64	@ 0x40
 80045be:	f040 80b5 	bne.w	800472c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 8164 	beq.w	80048a0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80045de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045e2:	429a      	cmp	r2, r3
 80045e4:	f080 815c 	bcs.w	80048a0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	f000 8086 	beq.w	800470a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004612:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004616:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800461a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004628:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800462c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004634:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004640:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1da      	bne.n	80045fe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3308      	adds	r3, #8
 800464e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004658:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3308      	adds	r3, #8
 8004668:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800466c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004670:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004674:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800467e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e1      	bne.n	8004648 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3308      	adds	r3, #8
 800468a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004694:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800469a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3308      	adds	r3, #8
 80046a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046a8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e3      	bne.n	8004684 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046da:	f023 0310 	bic.w	r3, r3, #16
 80046de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046ee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046f4:	e841 2300 	strex	r3, r2, [r1]
 80046f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e4      	bne.n	80046ca <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004704:	4618      	mov	r0, r3
 8004706:	f7fc fdda 	bl	80012be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800471c:	b29b      	uxth	r3, r3
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	b29b      	uxth	r3, r3
 8004722:	4619      	mov	r1, r3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fb ff75 	bl	8000614 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800472a:	e0b9      	b.n	80048a0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004738:	b29b      	uxth	r3, r3
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004746:	b29b      	uxth	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 80ab 	beq.w	80048a4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800474e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80a6 	beq.w	80048a4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004768:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800476c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800477a:	647b      	str	r3, [r7, #68]	@ 0x44
 800477c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004780:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e4      	bne.n	8004758 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3308      	adds	r3, #8
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	623b      	str	r3, [r7, #32]
   return(result);
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	f023 0301 	bic.w	r3, r3, #1
 80047a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3308      	adds	r3, #8
 80047ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80047b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1e3      	bne.n	800478e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0310 	bic.w	r3, r3, #16
 80047ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	69b9      	ldr	r1, [r7, #24]
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	617b      	str	r3, [r7, #20]
   return(result);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e4      	bne.n	80047da <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004816:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800481a:	4619      	mov	r1, r3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7fb fef9 	bl	8000614 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004822:	e03f      	b.n	80048a4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00e      	beq.n	800484e <HAL_UART_IRQHandler+0x56a>
 8004830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004834:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004844:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 ff8f 	bl	800576a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800484c:	e02d      	b.n	80048aa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800484e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00e      	beq.n	8004878 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800485a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800485e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01c      	beq.n	80048a8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	4798      	blx	r3
    }
    return;
 8004876:	e017      	b.n	80048a8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	d012      	beq.n	80048aa <HAL_UART_IRQHandler+0x5c6>
 8004884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00c      	beq.n	80048aa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fd98 	bl	80053c6 <UART_EndTransmit_IT>
    return;
 8004896:	e008      	b.n	80048aa <HAL_UART_IRQHandler+0x5c6>
      return;
 8004898:	bf00      	nop
 800489a:	e006      	b.n	80048aa <HAL_UART_IRQHandler+0x5c6>
    return;
 800489c:	bf00      	nop
 800489e:	e004      	b.n	80048aa <HAL_UART_IRQHandler+0x5c6>
      return;
 80048a0:	bf00      	nop
 80048a2:	e002      	b.n	80048aa <HAL_UART_IRQHandler+0x5c6>
      return;
 80048a4:	bf00      	nop
 80048a6:	e000      	b.n	80048aa <HAL_UART_IRQHandler+0x5c6>
    return;
 80048a8:	bf00      	nop
  }

}
 80048aa:	37e8      	adds	r7, #232	@ 0xe8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004906:	f023 030c 	bic.w	r3, r3, #12
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	6979      	ldr	r1, [r7, #20]
 8004910:	430b      	orrs	r3, r1
 8004912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	430a      	orrs	r2, r1
 800494c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4aa7      	ldr	r2, [pc, #668]	@ (8004bf0 <UART_SetConfig+0x318>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d120      	bne.n	800499a <UART_SetConfig+0xc2>
 8004958:	4ba6      	ldr	r3, [pc, #664]	@ (8004bf4 <UART_SetConfig+0x31c>)
 800495a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	2b03      	cmp	r3, #3
 8004962:	d817      	bhi.n	8004994 <UART_SetConfig+0xbc>
 8004964:	a201      	add	r2, pc, #4	@ (adr r2, 800496c <UART_SetConfig+0x94>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	0800497d 	.word	0x0800497d
 8004970:	08004989 	.word	0x08004989
 8004974:	0800498f 	.word	0x0800498f
 8004978:	08004983 	.word	0x08004983
 800497c:	2301      	movs	r3, #1
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e0b5      	b.n	8004aee <UART_SetConfig+0x216>
 8004982:	2302      	movs	r3, #2
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e0b2      	b.n	8004aee <UART_SetConfig+0x216>
 8004988:	2304      	movs	r3, #4
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e0af      	b.n	8004aee <UART_SetConfig+0x216>
 800498e:	2308      	movs	r3, #8
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e0ac      	b.n	8004aee <UART_SetConfig+0x216>
 8004994:	2310      	movs	r3, #16
 8004996:	77fb      	strb	r3, [r7, #31]
 8004998:	e0a9      	b.n	8004aee <UART_SetConfig+0x216>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a96      	ldr	r2, [pc, #600]	@ (8004bf8 <UART_SetConfig+0x320>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d124      	bne.n	80049ee <UART_SetConfig+0x116>
 80049a4:	4b93      	ldr	r3, [pc, #588]	@ (8004bf4 <UART_SetConfig+0x31c>)
 80049a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049b0:	d011      	beq.n	80049d6 <UART_SetConfig+0xfe>
 80049b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049b6:	d817      	bhi.n	80049e8 <UART_SetConfig+0x110>
 80049b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049bc:	d011      	beq.n	80049e2 <UART_SetConfig+0x10a>
 80049be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049c2:	d811      	bhi.n	80049e8 <UART_SetConfig+0x110>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <UART_SetConfig+0xf8>
 80049c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049cc:	d006      	beq.n	80049dc <UART_SetConfig+0x104>
 80049ce:	e00b      	b.n	80049e8 <UART_SetConfig+0x110>
 80049d0:	2300      	movs	r3, #0
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e08b      	b.n	8004aee <UART_SetConfig+0x216>
 80049d6:	2302      	movs	r3, #2
 80049d8:	77fb      	strb	r3, [r7, #31]
 80049da:	e088      	b.n	8004aee <UART_SetConfig+0x216>
 80049dc:	2304      	movs	r3, #4
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e085      	b.n	8004aee <UART_SetConfig+0x216>
 80049e2:	2308      	movs	r3, #8
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e082      	b.n	8004aee <UART_SetConfig+0x216>
 80049e8:	2310      	movs	r3, #16
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e07f      	b.n	8004aee <UART_SetConfig+0x216>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a82      	ldr	r2, [pc, #520]	@ (8004bfc <UART_SetConfig+0x324>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d124      	bne.n	8004a42 <UART_SetConfig+0x16a>
 80049f8:	4b7e      	ldr	r3, [pc, #504]	@ (8004bf4 <UART_SetConfig+0x31c>)
 80049fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004a00:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a04:	d011      	beq.n	8004a2a <UART_SetConfig+0x152>
 8004a06:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a0a:	d817      	bhi.n	8004a3c <UART_SetConfig+0x164>
 8004a0c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a10:	d011      	beq.n	8004a36 <UART_SetConfig+0x15e>
 8004a12:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a16:	d811      	bhi.n	8004a3c <UART_SetConfig+0x164>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <UART_SetConfig+0x14c>
 8004a1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a20:	d006      	beq.n	8004a30 <UART_SetConfig+0x158>
 8004a22:	e00b      	b.n	8004a3c <UART_SetConfig+0x164>
 8004a24:	2300      	movs	r3, #0
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	e061      	b.n	8004aee <UART_SetConfig+0x216>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	77fb      	strb	r3, [r7, #31]
 8004a2e:	e05e      	b.n	8004aee <UART_SetConfig+0x216>
 8004a30:	2304      	movs	r3, #4
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e05b      	b.n	8004aee <UART_SetConfig+0x216>
 8004a36:	2308      	movs	r3, #8
 8004a38:	77fb      	strb	r3, [r7, #31]
 8004a3a:	e058      	b.n	8004aee <UART_SetConfig+0x216>
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	e055      	b.n	8004aee <UART_SetConfig+0x216>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a6e      	ldr	r2, [pc, #440]	@ (8004c00 <UART_SetConfig+0x328>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d124      	bne.n	8004a96 <UART_SetConfig+0x1be>
 8004a4c:	4b69      	ldr	r3, [pc, #420]	@ (8004bf4 <UART_SetConfig+0x31c>)
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a50:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004a54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a58:	d011      	beq.n	8004a7e <UART_SetConfig+0x1a6>
 8004a5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a5e:	d817      	bhi.n	8004a90 <UART_SetConfig+0x1b8>
 8004a60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a64:	d011      	beq.n	8004a8a <UART_SetConfig+0x1b2>
 8004a66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a6a:	d811      	bhi.n	8004a90 <UART_SetConfig+0x1b8>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <UART_SetConfig+0x1a0>
 8004a70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a74:	d006      	beq.n	8004a84 <UART_SetConfig+0x1ac>
 8004a76:	e00b      	b.n	8004a90 <UART_SetConfig+0x1b8>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	77fb      	strb	r3, [r7, #31]
 8004a7c:	e037      	b.n	8004aee <UART_SetConfig+0x216>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	77fb      	strb	r3, [r7, #31]
 8004a82:	e034      	b.n	8004aee <UART_SetConfig+0x216>
 8004a84:	2304      	movs	r3, #4
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e031      	b.n	8004aee <UART_SetConfig+0x216>
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	77fb      	strb	r3, [r7, #31]
 8004a8e:	e02e      	b.n	8004aee <UART_SetConfig+0x216>
 8004a90:	2310      	movs	r3, #16
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e02b      	b.n	8004aee <UART_SetConfig+0x216>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a5a      	ldr	r2, [pc, #360]	@ (8004c04 <UART_SetConfig+0x32c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d124      	bne.n	8004aea <UART_SetConfig+0x212>
 8004aa0:	4b54      	ldr	r3, [pc, #336]	@ (8004bf4 <UART_SetConfig+0x31c>)
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004aa8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004aac:	d011      	beq.n	8004ad2 <UART_SetConfig+0x1fa>
 8004aae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ab2:	d817      	bhi.n	8004ae4 <UART_SetConfig+0x20c>
 8004ab4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ab8:	d011      	beq.n	8004ade <UART_SetConfig+0x206>
 8004aba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004abe:	d811      	bhi.n	8004ae4 <UART_SetConfig+0x20c>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <UART_SetConfig+0x1f4>
 8004ac4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ac8:	d006      	beq.n	8004ad8 <UART_SetConfig+0x200>
 8004aca:	e00b      	b.n	8004ae4 <UART_SetConfig+0x20c>
 8004acc:	2300      	movs	r3, #0
 8004ace:	77fb      	strb	r3, [r7, #31]
 8004ad0:	e00d      	b.n	8004aee <UART_SetConfig+0x216>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	77fb      	strb	r3, [r7, #31]
 8004ad6:	e00a      	b.n	8004aee <UART_SetConfig+0x216>
 8004ad8:	2304      	movs	r3, #4
 8004ada:	77fb      	strb	r3, [r7, #31]
 8004adc:	e007      	b.n	8004aee <UART_SetConfig+0x216>
 8004ade:	2308      	movs	r3, #8
 8004ae0:	77fb      	strb	r3, [r7, #31]
 8004ae2:	e004      	b.n	8004aee <UART_SetConfig+0x216>
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	77fb      	strb	r3, [r7, #31]
 8004ae8:	e001      	b.n	8004aee <UART_SetConfig+0x216>
 8004aea:	2310      	movs	r3, #16
 8004aec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004af6:	d15b      	bne.n	8004bb0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004af8:	7ffb      	ldrb	r3, [r7, #31]
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d827      	bhi.n	8004b4e <UART_SetConfig+0x276>
 8004afe:	a201      	add	r2, pc, #4	@ (adr r2, 8004b04 <UART_SetConfig+0x22c>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b29 	.word	0x08004b29
 8004b08:	08004b31 	.word	0x08004b31
 8004b0c:	08004b39 	.word	0x08004b39
 8004b10:	08004b4f 	.word	0x08004b4f
 8004b14:	08004b3f 	.word	0x08004b3f
 8004b18:	08004b4f 	.word	0x08004b4f
 8004b1c:	08004b4f 	.word	0x08004b4f
 8004b20:	08004b4f 	.word	0x08004b4f
 8004b24:	08004b47 	.word	0x08004b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b28:	f7fe f8e6 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 8004b2c:	61b8      	str	r0, [r7, #24]
        break;
 8004b2e:	e013      	b.n	8004b58 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b30:	f7fe f904 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 8004b34:	61b8      	str	r0, [r7, #24]
        break;
 8004b36:	e00f      	b.n	8004b58 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b38:	4b33      	ldr	r3, [pc, #204]	@ (8004c08 <UART_SetConfig+0x330>)
 8004b3a:	61bb      	str	r3, [r7, #24]
        break;
 8004b3c:	e00c      	b.n	8004b58 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b3e:	f7fe f87b 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8004b42:	61b8      	str	r0, [r7, #24]
        break;
 8004b44:	e008      	b.n	8004b58 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b4a:	61bb      	str	r3, [r7, #24]
        break;
 8004b4c:	e004      	b.n	8004b58 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	77bb      	strb	r3, [r7, #30]
        break;
 8004b56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 8082 	beq.w	8004c64 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	005a      	lsls	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	085b      	lsrs	r3, r3, #1
 8004b6a:	441a      	add	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	2b0f      	cmp	r3, #15
 8004b7a:	d916      	bls.n	8004baa <UART_SetConfig+0x2d2>
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b82:	d212      	bcs.n	8004baa <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f023 030f 	bic.w	r3, r3, #15
 8004b8c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	085b      	lsrs	r3, r3, #1
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	89fb      	ldrh	r3, [r7, #14]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	89fa      	ldrh	r2, [r7, #14]
 8004ba6:	60da      	str	r2, [r3, #12]
 8004ba8:	e05c      	b.n	8004c64 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	77bb      	strb	r3, [r7, #30]
 8004bae:	e059      	b.n	8004c64 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bb0:	7ffb      	ldrb	r3, [r7, #31]
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d835      	bhi.n	8004c22 <UART_SetConfig+0x34a>
 8004bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bbc <UART_SetConfig+0x2e4>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004be1 	.word	0x08004be1
 8004bc0:	08004be9 	.word	0x08004be9
 8004bc4:	08004c0d 	.word	0x08004c0d
 8004bc8:	08004c23 	.word	0x08004c23
 8004bcc:	08004c13 	.word	0x08004c13
 8004bd0:	08004c23 	.word	0x08004c23
 8004bd4:	08004c23 	.word	0x08004c23
 8004bd8:	08004c23 	.word	0x08004c23
 8004bdc:	08004c1b 	.word	0x08004c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be0:	f7fe f88a 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 8004be4:	61b8      	str	r0, [r7, #24]
        break;
 8004be6:	e021      	b.n	8004c2c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be8:	f7fe f8a8 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 8004bec:	61b8      	str	r0, [r7, #24]
        break;
 8004bee:	e01d      	b.n	8004c2c <UART_SetConfig+0x354>
 8004bf0:	40013800 	.word	0x40013800
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	40004400 	.word	0x40004400
 8004bfc:	40004800 	.word	0x40004800
 8004c00:	40004c00 	.word	0x40004c00
 8004c04:	40005000 	.word	0x40005000
 8004c08:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004c7c <UART_SetConfig+0x3a4>)
 8004c0e:	61bb      	str	r3, [r7, #24]
        break;
 8004c10:	e00c      	b.n	8004c2c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c12:	f7fe f811 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8004c16:	61b8      	str	r0, [r7, #24]
        break;
 8004c18:	e008      	b.n	8004c2c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c1e:	61bb      	str	r3, [r7, #24]
        break;
 8004c20:	e004      	b.n	8004c2c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	77bb      	strb	r3, [r7, #30]
        break;
 8004c2a:	bf00      	nop
    }

    if (pclk != 0U)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d018      	beq.n	8004c64 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	085a      	lsrs	r2, r3, #1
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	441a      	add	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b0f      	cmp	r3, #15
 8004c4a:	d909      	bls.n	8004c60 <UART_SetConfig+0x388>
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c52:	d205      	bcs.n	8004c60 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60da      	str	r2, [r3, #12]
 8004c5e:	e001      	b.n	8004c64 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c70:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3720      	adds	r7, #32
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	007a1200 	.word	0x007a1200

08004c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01a      	beq.n	8004d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d7e:	d10a      	bne.n	8004d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
  }
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b098      	sub	sp, #96	@ 0x60
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dd4:	f7fc f8b0 	bl	8000f38 <HAL_GetTick>
 8004dd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d12e      	bne.n	8004e46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df0:	2200      	movs	r2, #0
 8004df2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f88c 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d021      	beq.n	8004e46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e16:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e6      	bne.n	8004e02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e062      	b.n	8004f0c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d149      	bne.n	8004ee8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f856 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d03c      	beq.n	8004ee8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e6      	bne.n	8004e6e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0301 	bic.w	r3, r3, #1
 8004eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ec0:	61fa      	str	r2, [r7, #28]
 8004ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	69b9      	ldr	r1, [r7, #24]
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e5      	bne.n	8004ea0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e011      	b.n	8004f0c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3758      	adds	r7, #88	@ 0x58
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f24:	e04f      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2c:	d04b      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7fc f803 	bl	8000f38 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e04e      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d037      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b80      	cmp	r3, #128	@ 0x80
 8004f5a:	d034      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b40      	cmp	r3, #64	@ 0x40
 8004f60:	d031      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d110      	bne.n	8004f92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2208      	movs	r2, #8
 8004f76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f913 	bl	80051a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2208      	movs	r2, #8
 8004f82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e029      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fa0:	d111      	bne.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004faa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f8f9 	bl	80051a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e00f      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	bf0c      	ite	eq
 8004fd6:	2301      	moveq	r3, #1
 8004fd8:	2300      	movne	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d0a0      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b097      	sub	sp, #92	@ 0x5c
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	88fa      	ldrh	r2, [r7, #6]
 8005010:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005022:	d10e      	bne.n	8005042 <UART_Start_Receive_IT+0x52>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d105      	bne.n	8005038 <UART_Start_Receive_IT+0x48>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005032:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005036:	e01a      	b.n	800506e <UART_Start_Receive_IT+0x7e>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	22ff      	movs	r2, #255	@ 0xff
 800503c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005040:	e015      	b.n	800506e <UART_Start_Receive_IT+0x7e>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10d      	bne.n	8005066 <UART_Start_Receive_IT+0x76>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d104      	bne.n	800505c <UART_Start_Receive_IT+0x6c>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	22ff      	movs	r2, #255	@ 0xff
 8005056:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800505a:	e008      	b.n	800506e <UART_Start_Receive_IT+0x7e>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	227f      	movs	r2, #127	@ 0x7f
 8005060:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005064:	e003      	b.n	800506e <UART_Start_Receive_IT+0x7e>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2222      	movs	r2, #34	@ 0x22
 800507a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3308      	adds	r3, #8
 8005084:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800508e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	657b      	str	r3, [r7, #84]	@ 0x54
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3308      	adds	r3, #8
 800509c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800509e:	64ba      	str	r2, [r7, #72]	@ 0x48
 80050a0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80050a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80050ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1e5      	bne.n	800507e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ba:	d107      	bne.n	80050cc <UART_Start_Receive_IT+0xdc>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d103      	bne.n	80050cc <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4a22      	ldr	r2, [pc, #136]	@ (8005150 <UART_Start_Receive_IT+0x160>)
 80050c8:	669a      	str	r2, [r3, #104]	@ 0x68
 80050ca:	e002      	b.n	80050d2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4a21      	ldr	r2, [pc, #132]	@ (8005154 <UART_Start_Receive_IT+0x164>)
 80050d0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d019      	beq.n	800510e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80050ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80050fa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e6      	bne.n	80050da <UART_Start_Receive_IT+0xea>
 800510c:	e018      	b.n	8005140 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	613b      	str	r3, [r7, #16]
   return(result);
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f043 0320 	orr.w	r3, r3, #32
 8005122:	653b      	str	r3, [r7, #80]	@ 0x50
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800512c:	623b      	str	r3, [r7, #32]
 800512e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	69f9      	ldr	r1, [r7, #28]
 8005132:	6a3a      	ldr	r2, [r7, #32]
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	61bb      	str	r3, [r7, #24]
   return(result);
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e6      	bne.n	800510e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	375c      	adds	r7, #92	@ 0x5c
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	080055c3 	.word	0x080055c3
 8005154:	0800541b 	.word	0x0800541b

08005158 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005158:	b480      	push	{r7}
 800515a:	b089      	sub	sp, #36	@ 0x24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	60bb      	str	r3, [r7, #8]
   return(result);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005174:	61fb      	str	r3, [r7, #28]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	6979      	ldr	r1, [r7, #20]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	613b      	str	r3, [r7, #16]
   return(result);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e6      	bne.n	8005160 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005198:	bf00      	nop
 800519a:	3724      	adds	r7, #36	@ 0x24
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b095      	sub	sp, #84	@ 0x54
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80051cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e6      	bne.n	80051ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3308      	adds	r3, #8
 80051e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f023 0301 	bic.w	r3, r3, #1
 80051f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3308      	adds	r3, #8
 80051fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005200:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005206:	e841 2300 	strex	r3, r2, [r1]
 800520a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e5      	bne.n	80051de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005216:	2b01      	cmp	r3, #1
 8005218:	d118      	bne.n	800524c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	e853 3f00 	ldrex	r3, [r3]
 8005226:	60bb      	str	r3, [r7, #8]
   return(result);
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f023 0310 	bic.w	r3, r3, #16
 800522e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6979      	ldr	r1, [r7, #20]
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	613b      	str	r3, [r7, #16]
   return(result);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e6      	bne.n	800521a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005260:	bf00      	nop
 8005262:	3754      	adds	r7, #84	@ 0x54
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b090      	sub	sp, #64	@ 0x40
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005278:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	2b20      	cmp	r3, #32
 8005280:	d037      	beq.n	80052f2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8005282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005284:	2200      	movs	r2, #0
 8005286:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800528a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3308      	adds	r3, #8
 8005290:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	623b      	str	r3, [r7, #32]
   return(result);
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3308      	adds	r3, #8
 80052a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80052ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e5      	bne.n	800528a <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052dc:	61fb      	str	r3, [r7, #28]
 80052de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	69b9      	ldr	r1, [r7, #24]
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	617b      	str	r3, [r7, #20]
   return(result);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e6      	bne.n	80052be <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052f0:	e002      	b.n	80052f8 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 80052f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80052f4:	f7fb f9a6 	bl	8000644 <HAL_UART_TxCpltCallback>
}
 80052f8:	bf00      	nop
 80052fa:	3740      	adds	r7, #64	@ 0x40
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff face 	bl	80048b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005314:	bf00      	nop
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005328:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800532e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005336:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005342:	2b80      	cmp	r3, #128	@ 0x80
 8005344:	d109      	bne.n	800535a <UART_DMAError+0x3e>
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b21      	cmp	r3, #33	@ 0x21
 800534a:	d106      	bne.n	800535a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2200      	movs	r2, #0
 8005350:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8005354:	6978      	ldr	r0, [r7, #20]
 8005356:	f7ff feff 	bl	8005158 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005364:	2b40      	cmp	r3, #64	@ 0x40
 8005366:	d109      	bne.n	800537c <UART_DMAError+0x60>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b22      	cmp	r3, #34	@ 0x22
 800536c:	d106      	bne.n	800537c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2200      	movs	r2, #0
 8005372:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005376:	6978      	ldr	r0, [r7, #20]
 8005378:	f7ff ff14 	bl	80051a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005382:	f043 0210 	orr.w	r2, r3, #16
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800538c:	6978      	ldr	r0, [r7, #20]
 800538e:	f7fb f96f 	bl	8000670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005392:	bf00      	nop
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f7fb f959 	bl	8000670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053be:	bf00      	nop
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b088      	sub	sp, #32
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	60bb      	str	r3, [r7, #8]
   return(result);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053e2:	61fb      	str	r3, [r7, #28]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6979      	ldr	r1, [r7, #20]
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	613b      	str	r3, [r7, #16]
   return(result);
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e6      	bne.n	80053ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7fb f919 	bl	8000644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005412:	bf00      	nop
 8005414:	3720      	adds	r7, #32
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b09c      	sub	sp, #112	@ 0x70
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005428:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005432:	2b22      	cmp	r3, #34	@ 0x22
 8005434:	f040 80b9 	bne.w	80055aa <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800543e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005442:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005446:	b2d9      	uxtb	r1, r3
 8005448:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800544c:	b2da      	uxtb	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005452:	400a      	ands	r2, r1
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b01      	subs	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	f040 809c 	bne.w	80055ba <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005490:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005492:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005496:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054a2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e6      	bne.n	8005482 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3308      	adds	r3, #8
 80054ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c6:	f023 0301 	bic.w	r3, r3, #1
 80054ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3308      	adds	r3, #8
 80054d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80054d4:	647a      	str	r2, [r7, #68]	@ 0x44
 80054d6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054dc:	e841 2300 	strex	r3, r2, [r1]
 80054e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e5      	bne.n	80054b4 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d018      	beq.n	800553c <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	623b      	str	r3, [r7, #32]
   return(result);
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800551e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005528:	633b      	str	r3, [r7, #48]	@ 0x30
 800552a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800552e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e6      	bne.n	800550a <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005540:	2b01      	cmp	r3, #1
 8005542:	d12e      	bne.n	80055a2 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	60fb      	str	r3, [r7, #12]
   return(result);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0310 	bic.w	r3, r3, #16
 800555e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005568:	61fb      	str	r3, [r7, #28]
 800556a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	69b9      	ldr	r1, [r7, #24]
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	617b      	str	r3, [r7, #20]
   return(result);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e6      	bne.n	800554a <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f003 0310 	and.w	r3, r3, #16
 8005586:	2b10      	cmp	r3, #16
 8005588:	d103      	bne.n	8005592 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2210      	movs	r2, #16
 8005590:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005598:	4619      	mov	r1, r3
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fb f83a 	bl	8000614 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055a0:	e00b      	b.n	80055ba <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff f98e 	bl	80048c4 <HAL_UART_RxCpltCallback>
}
 80055a8:	e007      	b.n	80055ba <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699a      	ldr	r2, [r3, #24]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 0208 	orr.w	r2, r2, #8
 80055b8:	619a      	str	r2, [r3, #24]
}
 80055ba:	bf00      	nop
 80055bc:	3770      	adds	r7, #112	@ 0x70
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b09c      	sub	sp, #112	@ 0x70
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80055d0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055da:	2b22      	cmp	r3, #34	@ 0x22
 80055dc:	f040 80b9 	bne.w	8005752 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80055e6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80055f0:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80055f4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80055f8:	4013      	ands	r3, r2
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005604:	1c9a      	adds	r2, r3, #2
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005610:	b29b      	uxth	r3, r3
 8005612:	3b01      	subs	r3, #1
 8005614:	b29a      	uxth	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005622:	b29b      	uxth	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	f040 809c 	bne.w	8005762 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800563a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800563e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005648:	657b      	str	r3, [r7, #84]	@ 0x54
 800564a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800564e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e6      	bne.n	800562a <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3308      	adds	r3, #8
 8005662:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	f023 0301 	bic.w	r3, r3, #1
 8005672:	663b      	str	r3, [r7, #96]	@ 0x60
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3308      	adds	r3, #8
 800567a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800567c:	643a      	str	r2, [r7, #64]	@ 0x40
 800567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005682:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800568a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e5      	bne.n	800565c <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d018      	beq.n	80056e4 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	61fb      	str	r3, [r7, #28]
   return(result);
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e6      	bne.n	80056b2 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d12e      	bne.n	800574a <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f023 0310 	bic.w	r3, r3, #16
 8005706:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	461a      	mov	r2, r3
 800570e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6979      	ldr	r1, [r7, #20]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	613b      	str	r3, [r7, #16]
   return(result);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e6      	bne.n	80056f2 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f003 0310 	and.w	r3, r3, #16
 800572e:	2b10      	cmp	r3, #16
 8005730:	d103      	bne.n	800573a <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2210      	movs	r2, #16
 8005738:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005740:	4619      	mov	r1, r3
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fa ff66 	bl	8000614 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005748:	e00b      	b.n	8005762 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff f8ba 	bl	80048c4 <HAL_UART_RxCpltCallback>
}
 8005750:	e007      	b.n	8005762 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699a      	ldr	r2, [r3, #24]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0208 	orr.w	r2, r2, #8
 8005760:	619a      	str	r2, [r3, #24]
}
 8005762:	bf00      	nop
 8005764:	3770      	adds	r7, #112	@ 0x70
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800577e:	b480      	push	{r7}
 8005780:	b085      	sub	sp, #20
 8005782:	af00      	add	r7, sp, #0
 8005784:	4603      	mov	r3, r0
 8005786:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005788:	2300      	movs	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800578c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005790:	2b84      	cmp	r3, #132	@ 0x84
 8005792:	d005      	beq.n	80057a0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005794:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	3303      	adds	r3, #3
 800579e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80057a0:	68fb      	ldr	r3, [r7, #12]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057b4:	f3ef 8305 	mrs	r3, IPSR
 80057b8:	607b      	str	r3, [r7, #4]
  return(result);
 80057ba:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bf14      	ite	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	2300      	moveq	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80057d6:	f001 ff9b 	bl	8007710 <vTaskStartScheduler>
  
  return osOK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	bd80      	pop	{r7, pc}

080057e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80057e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e2:	b089      	sub	sp, #36	@ 0x24
 80057e4:	af04      	add	r7, sp, #16
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d020      	beq.n	8005834 <osThreadCreate+0x54>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01c      	beq.n	8005834 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685c      	ldr	r4, [r3, #4]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691e      	ldr	r6, [r3, #16]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800580c:	4618      	mov	r0, r3
 800580e:	f7ff ffb6 	bl	800577e <makeFreeRtosPriority>
 8005812:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800581c:	9202      	str	r2, [sp, #8]
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	9100      	str	r1, [sp, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	4632      	mov	r2, r6
 8005826:	4629      	mov	r1, r5
 8005828:	4620      	mov	r0, r4
 800582a:	f001 fdac 	bl	8007386 <xTaskCreateStatic>
 800582e:	4603      	mov	r3, r0
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	e01c      	b.n	800586e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685c      	ldr	r4, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005840:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff ff98 	bl	800577e <makeFreeRtosPriority>
 800584e:	4602      	mov	r2, r0
 8005850:	f107 030c 	add.w	r3, r7, #12
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	9200      	str	r2, [sp, #0]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	4632      	mov	r2, r6
 800585c:	4629      	mov	r1, r5
 800585e:	4620      	mov	r0, r4
 8005860:	f001 fdf0 	bl	8007444 <xTaskCreate>
 8005864:	4603      	mov	r3, r0
 8005866:	2b01      	cmp	r3, #1
 8005868:	d001      	beq.n	800586e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	e000      	b.n	8005870 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800586e:	68fb      	ldr	r3, [r7, #12]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005878 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <osDelay+0x16>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	e000      	b.n	8005890 <osDelay+0x18>
 800588e:	2301      	movs	r3, #1
 8005890:	4618      	mov	r0, r3
 8005892:	f001 ff07 	bl	80076a4 <vTaskDelay>
  
  return osOK;
 8005896:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d016      	beq.n	80058e0 <osSemaphoreCreate+0x40>
    if (count == 1) {
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d10a      	bne.n	80058ce <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2203      	movs	r2, #3
 80058be:	9200      	str	r2, [sp, #0]
 80058c0:	2200      	movs	r2, #0
 80058c2:	2100      	movs	r1, #0
 80058c4:	2001      	movs	r0, #1
 80058c6:	f000 fe8b 	bl	80065e0 <xQueueGenericCreateStatic>
 80058ca:	4603      	mov	r3, r0
 80058cc:	e023      	b.n	8005916 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 80058ce:	6838      	ldr	r0, [r7, #0]
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	461a      	mov	r2, r3
 80058d8:	f000 ff5f 	bl	800679a <xQueueCreateCountingSemaphoreStatic>
 80058dc:	4603      	mov	r3, r0
 80058de:	e01a      	b.n	8005916 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d110      	bne.n	8005908 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 80058e6:	2203      	movs	r2, #3
 80058e8:	2100      	movs	r1, #0
 80058ea:	2001      	movs	r0, #1
 80058ec:	f000 fef4 	bl	80066d8 <xQueueGenericCreate>
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <osSemaphoreCreate+0x64>
 80058f8:	2300      	movs	r3, #0
 80058fa:	2200      	movs	r2, #0
 80058fc:	2100      	movs	r1, #0
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 ffba 	bl	8006878 <xQueueGenericSend>
      return sema;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	e006      	b.n	8005916 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	4611      	mov	r1, r2
 800590e:	4618      	mov	r0, r3
 8005910:	f000 ff7c 	bl	800680c <xQueueCreateCountingSemaphore>
 8005914:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800592c:	2300      	movs	r3, #0
 800592e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005930:	f7ff ff3d 	bl	80057ae <inHandlerMode>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d016      	beq.n	8005968 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800593a:	f107 0308 	add.w	r3, r7, #8
 800593e:	4619      	mov	r1, r3
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f001 f95c 	bl	8006bfe <xQueueGiveFromISR>
 8005946:	4603      	mov	r3, r0
 8005948:	2b01      	cmp	r3, #1
 800594a:	d001      	beq.n	8005950 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800594c:	23ff      	movs	r3, #255	@ 0xff
 800594e:	e017      	b.n	8005980 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d013      	beq.n	800597e <osSemaphoreRelease+0x5e>
 8005956:	4b0c      	ldr	r3, [pc, #48]	@ (8005988 <osSemaphoreRelease+0x68>)
 8005958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	e00a      	b.n	800597e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005968:	2300      	movs	r3, #0
 800596a:	2200      	movs	r2, #0
 800596c:	2100      	movs	r1, #0
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 ff82 	bl	8006878 <xQueueGenericSend>
 8005974:	4603      	mov	r3, r0
 8005976:	2b01      	cmp	r3, #1
 8005978:	d001      	beq.n	800597e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800597a:	23ff      	movs	r3, #255	@ 0xff
 800597c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800597e:	68fb      	ldr	r3, [r7, #12]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800598c:	b590      	push	{r4, r7, lr}
 800598e:	b085      	sub	sp, #20
 8005990:	af02      	add	r7, sp, #8
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d011      	beq.n	80059c2 <osMessageCreate+0x36>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00d      	beq.n	80059c2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6859      	ldr	r1, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	2400      	movs	r4, #0
 80059b8:	9400      	str	r4, [sp, #0]
 80059ba:	f000 fe11 	bl	80065e0 <xQueueGenericCreateStatic>
 80059be:	4603      	mov	r3, r0
 80059c0:	e008      	b.n	80059d4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6818      	ldr	r0, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	4619      	mov	r1, r3
 80059ce:	f000 fe83 	bl	80066d8 <xQueueGenericCreate>
 80059d2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd90      	pop	{r4, r7, pc}

080059dc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <osMessagePut+0x1e>
    ticks = 1;
 80059f6:	2301      	movs	r3, #1
 80059f8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80059fa:	f7ff fed8 	bl	80057ae <inHandlerMode>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d018      	beq.n	8005a36 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005a04:	f107 0210 	add.w	r2, r7, #16
 8005a08:	f107 0108 	add.w	r1, r7, #8
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f001 f848 	bl	8006aa4 <xQueueGenericSendFromISR>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d001      	beq.n	8005a1e <osMessagePut+0x42>
      return osErrorOS;
 8005a1a:	23ff      	movs	r3, #255	@ 0xff
 8005a1c:	e018      	b.n	8005a50 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d014      	beq.n	8005a4e <osMessagePut+0x72>
 8005a24:	4b0c      	ldr	r3, [pc, #48]	@ (8005a58 <osMessagePut+0x7c>)
 8005a26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	e00b      	b.n	8005a4e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005a36:	f107 0108 	add.w	r1, r7, #8
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 ff1a 	bl	8006878 <xQueueGenericSend>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d001      	beq.n	8005a4e <osMessagePut+0x72>
      return osErrorOS;
 8005a4a:	23ff      	movs	r3, #255	@ 0xff
 8005a4c:	e000      	b.n	8005a50 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	e000ed04 	.word	0xe000ed04

08005a5c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005a5c:	b590      	push	{r4, r7, lr}
 8005a5e:	b08b      	sub	sp, #44	@ 0x2c
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005a76:	2380      	movs	r3, #128	@ 0x80
 8005a78:	617b      	str	r3, [r7, #20]
    return event;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	461c      	mov	r4, r3
 8005a7e:	f107 0314 	add.w	r3, r7, #20
 8005a82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a8a:	e054      	b.n	8005b36 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9a:	d103      	bne.n	8005aa4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aa2:	e009      	b.n	8005ab8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d006      	beq.n	8005ab8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <osMessageGet+0x5c>
      ticks = 1;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005ab8:	f7ff fe79 	bl	80057ae <inHandlerMode>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d01c      	beq.n	8005afc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005ac2:	f107 0220 	add.w	r2, r7, #32
 8005ac6:	f107 0314 	add.w	r3, r7, #20
 8005aca:	3304      	adds	r3, #4
 8005acc:	4619      	mov	r1, r3
 8005ace:	68b8      	ldr	r0, [r7, #8]
 8005ad0:	f001 fa1a 	bl	8006f08 <xQueueReceiveFromISR>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d102      	bne.n	8005ae0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005ada:	2310      	movs	r3, #16
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	e001      	b.n	8005ae4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d01d      	beq.n	8005b26 <osMessageGet+0xca>
 8005aea:	4b15      	ldr	r3, [pc, #84]	@ (8005b40 <osMessageGet+0xe4>)
 8005aec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	e014      	b.n	8005b26 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005afc:	f107 0314 	add.w	r3, r7, #20
 8005b00:	3304      	adds	r3, #4
 8005b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b04:	4619      	mov	r1, r3
 8005b06:	68b8      	ldr	r0, [r7, #8]
 8005b08:	f001 f91c 	bl	8006d44 <xQueueReceive>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d102      	bne.n	8005b18 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005b12:	2310      	movs	r3, #16
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	e006      	b.n	8005b26 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <osMessageGet+0xc6>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e000      	b.n	8005b24 <osMessageGet+0xc8>
 8005b22:	2340      	movs	r3, #64	@ 0x40
 8005b24:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	461c      	mov	r4, r3
 8005b2a:	f107 0314 	add.w	r3, r7, #20
 8005b2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	372c      	adds	r7, #44	@ 0x2c
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd90      	pop	{r4, r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	e000ed04 	.word	0xe000ed04

08005b44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08a      	sub	sp, #40	@ 0x28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b50:	f001 fe40 	bl	80077d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b54:	4b5a      	ldr	r3, [pc, #360]	@ (8005cc0 <pvPortMalloc+0x17c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b5c:	f000 f916 	bl	8005d8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b60:	4b58      	ldr	r3, [pc, #352]	@ (8005cc4 <pvPortMalloc+0x180>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f040 8090 	bne.w	8005c8e <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01e      	beq.n	8005bb2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005b74:	2208      	movs	r2, #8
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4413      	add	r3, r2
 8005b7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d015      	beq.n	8005bb2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f023 0307 	bic.w	r3, r3, #7
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00b      	beq.n	8005bb2 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005bac:	bf00      	nop
 8005bae:	bf00      	nop
 8005bb0:	e7fd      	b.n	8005bae <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d06a      	beq.n	8005c8e <pvPortMalloc+0x14a>
 8005bb8:	4b43      	ldr	r3, [pc, #268]	@ (8005cc8 <pvPortMalloc+0x184>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d865      	bhi.n	8005c8e <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bc2:	4b42      	ldr	r3, [pc, #264]	@ (8005ccc <pvPortMalloc+0x188>)
 8005bc4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bc6:	4b41      	ldr	r3, [pc, #260]	@ (8005ccc <pvPortMalloc+0x188>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bcc:	e004      	b.n	8005bd8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d903      	bls.n	8005bea <pvPortMalloc+0xa6>
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1f1      	bne.n	8005bce <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bea:	4b35      	ldr	r3, [pc, #212]	@ (8005cc0 <pvPortMalloc+0x17c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d04c      	beq.n	8005c8e <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2208      	movs	r2, #8
 8005bfa:	4413      	add	r3, r2
 8005bfc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	1ad2      	subs	r2, r2, r3
 8005c0e:	2308      	movs	r3, #8
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d920      	bls.n	8005c58 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <pvPortMalloc+0xfc>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	613b      	str	r3, [r7, #16]
}
 8005c3a:	bf00      	nop
 8005c3c:	bf00      	nop
 8005c3e:	e7fd      	b.n	8005c3c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	1ad2      	subs	r2, r2, r3
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c52:	69b8      	ldr	r0, [r7, #24]
 8005c54:	f000 f8fc 	bl	8005e50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c58:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc8 <pvPortMalloc+0x184>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	4a19      	ldr	r2, [pc, #100]	@ (8005cc8 <pvPortMalloc+0x184>)
 8005c64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c66:	4b18      	ldr	r3, [pc, #96]	@ (8005cc8 <pvPortMalloc+0x184>)
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	4b19      	ldr	r3, [pc, #100]	@ (8005cd0 <pvPortMalloc+0x18c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d203      	bcs.n	8005c7a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c72:	4b15      	ldr	r3, [pc, #84]	@ (8005cc8 <pvPortMalloc+0x184>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a16      	ldr	r2, [pc, #88]	@ (8005cd0 <pvPortMalloc+0x18c>)
 8005c78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	4b11      	ldr	r3, [pc, #68]	@ (8005cc4 <pvPortMalloc+0x180>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c8e:	f001 fdaf 	bl	80077f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00b      	beq.n	8005cb4 <pvPortMalloc+0x170>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	60fb      	str	r3, [r7, #12]
}
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
 8005cb2:	e7fd      	b.n	8005cb0 <pvPortMalloc+0x16c>
	return pvReturn;
 8005cb4:	69fb      	ldr	r3, [r7, #28]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3728      	adds	r7, #40	@ 0x28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	200025b4 	.word	0x200025b4
 8005cc4:	200025c0 	.word	0x200025c0
 8005cc8:	200025b8 	.word	0x200025b8
 8005ccc:	200025ac 	.word	0x200025ac
 8005cd0:	200025bc 	.word	0x200025bc

08005cd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d04a      	beq.n	8005d7c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ce6:	2308      	movs	r3, #8
 8005ce8:	425b      	negs	r3, r3
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4413      	add	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	4b22      	ldr	r3, [pc, #136]	@ (8005d84 <vPortFree+0xb0>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10b      	bne.n	8005d1a <vPortFree+0x46>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	60fb      	str	r3, [r7, #12]
}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop
 8005d18:	e7fd      	b.n	8005d16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00b      	beq.n	8005d3a <vPortFree+0x66>
	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	60bb      	str	r3, [r7, #8]
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	e7fd      	b.n	8005d36 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	4b11      	ldr	r3, [pc, #68]	@ (8005d84 <vPortFree+0xb0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4013      	ands	r3, r2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d019      	beq.n	8005d7c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d115      	bne.n	8005d7c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	4b0b      	ldr	r3, [pc, #44]	@ (8005d84 <vPortFree+0xb0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	401a      	ands	r2, r3
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d60:	f001 fd38 	bl	80077d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	4b07      	ldr	r3, [pc, #28]	@ (8005d88 <vPortFree+0xb4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	4a06      	ldr	r2, [pc, #24]	@ (8005d88 <vPortFree+0xb4>)
 8005d70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d72:	6938      	ldr	r0, [r7, #16]
 8005d74:	f000 f86c 	bl	8005e50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005d78:	f001 fd3a 	bl	80077f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d7c:	bf00      	nop
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	200025c0 	.word	0x200025c0
 8005d88:	200025b8 	.word	0x200025b8

08005d8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d98:	4b27      	ldr	r3, [pc, #156]	@ (8005e38 <prvHeapInit+0xac>)
 8005d9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00c      	beq.n	8005dc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3307      	adds	r3, #7
 8005daa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0307 	bic.w	r3, r3, #7
 8005db2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	4a1f      	ldr	r2, [pc, #124]	@ (8005e38 <prvHeapInit+0xac>)
 8005dbc:	4413      	add	r3, r2
 8005dbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e3c <prvHeapInit+0xb0>)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005dca:	4b1c      	ldr	r3, [pc, #112]	@ (8005e3c <prvHeapInit+0xb0>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005dd8:	2208      	movs	r2, #8
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0307 	bic.w	r3, r3, #7
 8005de6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4a15      	ldr	r2, [pc, #84]	@ (8005e40 <prvHeapInit+0xb4>)
 8005dec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005dee:	4b14      	ldr	r3, [pc, #80]	@ (8005e40 <prvHeapInit+0xb4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005df6:	4b12      	ldr	r3, [pc, #72]	@ (8005e40 <prvHeapInit+0xb4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	1ad2      	subs	r2, r2, r3
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e40 <prvHeapInit+0xb4>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	4a0a      	ldr	r2, [pc, #40]	@ (8005e44 <prvHeapInit+0xb8>)
 8005e1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4a09      	ldr	r2, [pc, #36]	@ (8005e48 <prvHeapInit+0xbc>)
 8005e22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e24:	4b09      	ldr	r3, [pc, #36]	@ (8005e4c <prvHeapInit+0xc0>)
 8005e26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e2a:	601a      	str	r2, [r3, #0]
}
 8005e2c:	bf00      	nop
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	200005ac 	.word	0x200005ac
 8005e3c:	200025ac 	.word	0x200025ac
 8005e40:	200025b4 	.word	0x200025b4
 8005e44:	200025bc 	.word	0x200025bc
 8005e48:	200025b8 	.word	0x200025b8
 8005e4c:	200025c0 	.word	0x200025c0

08005e50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e58:	4b28      	ldr	r3, [pc, #160]	@ (8005efc <prvInsertBlockIntoFreeList+0xac>)
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e002      	b.n	8005e64 <prvInsertBlockIntoFreeList+0x14>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d8f7      	bhi.n	8005e5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	4413      	add	r3, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d108      	bne.n	8005e92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	441a      	add	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	441a      	add	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d118      	bne.n	8005ed8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4b15      	ldr	r3, [pc, #84]	@ (8005f00 <prvInsertBlockIntoFreeList+0xb0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d00d      	beq.n	8005ece <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	441a      	add	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	e008      	b.n	8005ee0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ece:	4b0c      	ldr	r3, [pc, #48]	@ (8005f00 <prvInsertBlockIntoFreeList+0xb0>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	e003      	b.n	8005ee0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d002      	beq.n	8005eee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eee:	bf00      	nop
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	200025ac 	.word	0x200025ac
 8005f00:	200025b4 	.word	0x200025b4

08005f04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f103 0208 	add.w	r2, r3, #8
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f103 0208 	add.w	r2, r3, #8
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f103 0208 	add.w	r2, r3, #8
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	601a      	str	r2, [r3, #0]
}
 8005f9a:	bf00      	nop
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b085      	sub	sp, #20
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d103      	bne.n	8005fc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e00c      	b.n	8005fe0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3308      	adds	r3, #8
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	e002      	b.n	8005fd4 <vListInsert+0x2e>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d2f6      	bcs.n	8005fce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	601a      	str	r2, [r3, #0]
}
 800600c:	bf00      	nop
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6892      	ldr	r2, [r2, #8]
 800602e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6852      	ldr	r2, [r2, #4]
 8006038:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	429a      	cmp	r2, r3
 8006042:	d103      	bne.n	800604c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	1e5a      	subs	r2, r3, #1
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3b04      	subs	r3, #4
 800607c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006084:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	3b04      	subs	r3, #4
 800608a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f023 0201 	bic.w	r2, r3, #1
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	3b04      	subs	r3, #4
 800609a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800609c:	4a0c      	ldr	r2, [pc, #48]	@ (80060d0 <pxPortInitialiseStack+0x64>)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3b14      	subs	r3, #20
 80060a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3b04      	subs	r3, #4
 80060b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f06f 0202 	mvn.w	r2, #2
 80060ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3b20      	subs	r3, #32
 80060c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060c2:	68fb      	ldr	r3, [r7, #12]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	080060d5 	.word	0x080060d5

080060d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060de:	4b13      	ldr	r3, [pc, #76]	@ (800612c <prvTaskExitError+0x58>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e6:	d00b      	beq.n	8006100 <prvTaskExitError+0x2c>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	60fb      	str	r3, [r7, #12]
}
 80060fa:	bf00      	nop
 80060fc:	bf00      	nop
 80060fe:	e7fd      	b.n	80060fc <prvTaskExitError+0x28>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	60bb      	str	r3, [r7, #8]
}
 8006112:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006114:	bf00      	nop
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0fc      	beq.n	8006116 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	2000000c 	.word	0x2000000c

08006130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006130:	4b07      	ldr	r3, [pc, #28]	@ (8006150 <pxCurrentTCBConst2>)
 8006132:	6819      	ldr	r1, [r3, #0]
 8006134:	6808      	ldr	r0, [r1, #0]
 8006136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613a:	f380 8809 	msr	PSP, r0
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f04f 0000 	mov.w	r0, #0
 8006146:	f380 8811 	msr	BASEPRI, r0
 800614a:	4770      	bx	lr
 800614c:	f3af 8000 	nop.w

08006150 <pxCurrentTCBConst2>:
 8006150:	200025cc 	.word	0x200025cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006154:	bf00      	nop
 8006156:	bf00      	nop

08006158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006158:	4808      	ldr	r0, [pc, #32]	@ (800617c <prvPortStartFirstTask+0x24>)
 800615a:	6800      	ldr	r0, [r0, #0]
 800615c:	6800      	ldr	r0, [r0, #0]
 800615e:	f380 8808 	msr	MSP, r0
 8006162:	f04f 0000 	mov.w	r0, #0
 8006166:	f380 8814 	msr	CONTROL, r0
 800616a:	b662      	cpsie	i
 800616c:	b661      	cpsie	f
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	df00      	svc	0
 8006178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800617a:	bf00      	nop
 800617c:	e000ed08 	.word	0xe000ed08

08006180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006186:	4b47      	ldr	r3, [pc, #284]	@ (80062a4 <xPortStartScheduler+0x124>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a47      	ldr	r2, [pc, #284]	@ (80062a8 <xPortStartScheduler+0x128>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d10b      	bne.n	80061a8 <xPortStartScheduler+0x28>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	613b      	str	r3, [r7, #16]
}
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	e7fd      	b.n	80061a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061a8:	4b3e      	ldr	r3, [pc, #248]	@ (80062a4 <xPortStartScheduler+0x124>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a3f      	ldr	r2, [pc, #252]	@ (80062ac <xPortStartScheduler+0x12c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d10b      	bne.n	80061ca <xPortStartScheduler+0x4a>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	60fb      	str	r3, [r7, #12]
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
 80061c8:	e7fd      	b.n	80061c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061ca:	4b39      	ldr	r3, [pc, #228]	@ (80062b0 <xPortStartScheduler+0x130>)
 80061cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	22ff      	movs	r2, #255	@ 0xff
 80061da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	4b31      	ldr	r3, [pc, #196]	@ (80062b4 <xPortStartScheduler+0x134>)
 80061f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061f2:	4b31      	ldr	r3, [pc, #196]	@ (80062b8 <xPortStartScheduler+0x138>)
 80061f4:	2207      	movs	r2, #7
 80061f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061f8:	e009      	b.n	800620e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80061fa:	4b2f      	ldr	r3, [pc, #188]	@ (80062b8 <xPortStartScheduler+0x138>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3b01      	subs	r3, #1
 8006200:	4a2d      	ldr	r2, [pc, #180]	@ (80062b8 <xPortStartScheduler+0x138>)
 8006202:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006204:	78fb      	ldrb	r3, [r7, #3]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	b2db      	uxtb	r3, r3
 800620c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800620e:	78fb      	ldrb	r3, [r7, #3]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006216:	2b80      	cmp	r3, #128	@ 0x80
 8006218:	d0ef      	beq.n	80061fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800621a:	4b27      	ldr	r3, [pc, #156]	@ (80062b8 <xPortStartScheduler+0x138>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f1c3 0307 	rsb	r3, r3, #7
 8006222:	2b04      	cmp	r3, #4
 8006224:	d00b      	beq.n	800623e <xPortStartScheduler+0xbe>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	60bb      	str	r3, [r7, #8]
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800623e:	4b1e      	ldr	r3, [pc, #120]	@ (80062b8 <xPortStartScheduler+0x138>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	4a1c      	ldr	r2, [pc, #112]	@ (80062b8 <xPortStartScheduler+0x138>)
 8006246:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006248:	4b1b      	ldr	r3, [pc, #108]	@ (80062b8 <xPortStartScheduler+0x138>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006250:	4a19      	ldr	r2, [pc, #100]	@ (80062b8 <xPortStartScheduler+0x138>)
 8006252:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	b2da      	uxtb	r2, r3
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800625c:	4b17      	ldr	r3, [pc, #92]	@ (80062bc <xPortStartScheduler+0x13c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a16      	ldr	r2, [pc, #88]	@ (80062bc <xPortStartScheduler+0x13c>)
 8006262:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006266:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006268:	4b14      	ldr	r3, [pc, #80]	@ (80062bc <xPortStartScheduler+0x13c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a13      	ldr	r2, [pc, #76]	@ (80062bc <xPortStartScheduler+0x13c>)
 800626e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006272:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006274:	f000 f8da 	bl	800642c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006278:	4b11      	ldr	r3, [pc, #68]	@ (80062c0 <xPortStartScheduler+0x140>)
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800627e:	f000 f8f9 	bl	8006474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006282:	4b10      	ldr	r3, [pc, #64]	@ (80062c4 <xPortStartScheduler+0x144>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a0f      	ldr	r2, [pc, #60]	@ (80062c4 <xPortStartScheduler+0x144>)
 8006288:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800628c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800628e:	f7ff ff63 	bl	8006158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006292:	f001 fc09 	bl	8007aa8 <vTaskSwitchContext>
	prvTaskExitError();
 8006296:	f7ff ff1d 	bl	80060d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	e000ed00 	.word	0xe000ed00
 80062a8:	410fc271 	.word	0x410fc271
 80062ac:	410fc270 	.word	0x410fc270
 80062b0:	e000e400 	.word	0xe000e400
 80062b4:	200025c4 	.word	0x200025c4
 80062b8:	200025c8 	.word	0x200025c8
 80062bc:	e000ed20 	.word	0xe000ed20
 80062c0:	2000000c 	.word	0x2000000c
 80062c4:	e000ef34 	.word	0xe000ef34

080062c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	607b      	str	r3, [r7, #4]
}
 80062e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062e2:	4b10      	ldr	r3, [pc, #64]	@ (8006324 <vPortEnterCritical+0x5c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3301      	adds	r3, #1
 80062e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006324 <vPortEnterCritical+0x5c>)
 80062ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006324 <vPortEnterCritical+0x5c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d110      	bne.n	8006316 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006328 <vPortEnterCritical+0x60>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <vPortEnterCritical+0x4e>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	603b      	str	r3, [r7, #0]
}
 8006310:	bf00      	nop
 8006312:	bf00      	nop
 8006314:	e7fd      	b.n	8006312 <vPortEnterCritical+0x4a>
	}
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	2000000c 	.word	0x2000000c
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006332:	4b12      	ldr	r3, [pc, #72]	@ (800637c <vPortExitCritical+0x50>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10b      	bne.n	8006352 <vPortExitCritical+0x26>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	607b      	str	r3, [r7, #4]
}
 800634c:	bf00      	nop
 800634e:	bf00      	nop
 8006350:	e7fd      	b.n	800634e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006352:	4b0a      	ldr	r3, [pc, #40]	@ (800637c <vPortExitCritical+0x50>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3b01      	subs	r3, #1
 8006358:	4a08      	ldr	r2, [pc, #32]	@ (800637c <vPortExitCritical+0x50>)
 800635a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800635c:	4b07      	ldr	r3, [pc, #28]	@ (800637c <vPortExitCritical+0x50>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d105      	bne.n	8006370 <vPortExitCritical+0x44>
 8006364:	2300      	movs	r3, #0
 8006366:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800636e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	2000000c 	.word	0x2000000c

08006380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006380:	f3ef 8009 	mrs	r0, PSP
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	4b15      	ldr	r3, [pc, #84]	@ (80063e0 <pxCurrentTCBConst>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	f01e 0f10 	tst.w	lr, #16
 8006390:	bf08      	it	eq
 8006392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639a:	6010      	str	r0, [r2, #0]
 800639c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80063a4:	f380 8811 	msr	BASEPRI, r0
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f001 fb7a 	bl	8007aa8 <vTaskSwitchContext>
 80063b4:	f04f 0000 	mov.w	r0, #0
 80063b8:	f380 8811 	msr	BASEPRI, r0
 80063bc:	bc09      	pop	{r0, r3}
 80063be:	6819      	ldr	r1, [r3, #0]
 80063c0:	6808      	ldr	r0, [r1, #0]
 80063c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c6:	f01e 0f10 	tst.w	lr, #16
 80063ca:	bf08      	it	eq
 80063cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063d0:	f380 8809 	msr	PSP, r0
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	f3af 8000 	nop.w

080063e0 <pxCurrentTCBConst>:
 80063e0:	200025cc 	.word	0x200025cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop

080063e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	607b      	str	r3, [r7, #4]
}
 8006400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006402:	f001 fa93 	bl	800792c <xTaskIncrementTick>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800640c:	4b06      	ldr	r3, [pc, #24]	@ (8006428 <xPortSysTickHandler+0x40>)
 800640e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	2300      	movs	r3, #0
 8006416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	f383 8811 	msr	BASEPRI, r3
}
 800641e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006430:	4b0b      	ldr	r3, [pc, #44]	@ (8006460 <vPortSetupTimerInterrupt+0x34>)
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006436:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <vPortSetupTimerInterrupt+0x38>)
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800643c:	4b0a      	ldr	r3, [pc, #40]	@ (8006468 <vPortSetupTimerInterrupt+0x3c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a0a      	ldr	r2, [pc, #40]	@ (800646c <vPortSetupTimerInterrupt+0x40>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	099b      	lsrs	r3, r3, #6
 8006448:	4a09      	ldr	r2, [pc, #36]	@ (8006470 <vPortSetupTimerInterrupt+0x44>)
 800644a:	3b01      	subs	r3, #1
 800644c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800644e:	4b04      	ldr	r3, [pc, #16]	@ (8006460 <vPortSetupTimerInterrupt+0x34>)
 8006450:	2207      	movs	r2, #7
 8006452:	601a      	str	r2, [r3, #0]
}
 8006454:	bf00      	nop
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	e000e010 	.word	0xe000e010
 8006464:	e000e018 	.word	0xe000e018
 8006468:	20000000 	.word	0x20000000
 800646c:	10624dd3 	.word	0x10624dd3
 8006470:	e000e014 	.word	0xe000e014

08006474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006474:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006484 <vPortEnableVFP+0x10>
 8006478:	6801      	ldr	r1, [r0, #0]
 800647a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800647e:	6001      	str	r1, [r0, #0]
 8006480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006482:	bf00      	nop
 8006484:	e000ed88 	.word	0xe000ed88

08006488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800648e:	f3ef 8305 	mrs	r3, IPSR
 8006492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2b0f      	cmp	r3, #15
 8006498:	d915      	bls.n	80064c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800649a:	4a18      	ldr	r2, [pc, #96]	@ (80064fc <vPortValidateInterruptPriority+0x74>)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064a4:	4b16      	ldr	r3, [pc, #88]	@ (8006500 <vPortValidateInterruptPriority+0x78>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	7afa      	ldrb	r2, [r7, #11]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d20b      	bcs.n	80064c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	607b      	str	r3, [r7, #4]
}
 80064c0:	bf00      	nop
 80064c2:	bf00      	nop
 80064c4:	e7fd      	b.n	80064c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006504 <vPortValidateInterruptPriority+0x7c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80064ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006508 <vPortValidateInterruptPriority+0x80>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d90b      	bls.n	80064ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	603b      	str	r3, [r7, #0]
}
 80064e8:	bf00      	nop
 80064ea:	bf00      	nop
 80064ec:	e7fd      	b.n	80064ea <vPortValidateInterruptPriority+0x62>
	}
 80064ee:	bf00      	nop
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	e000e3f0 	.word	0xe000e3f0
 8006500:	200025c4 	.word	0x200025c4
 8006504:	e000ed0c 	.word	0xe000ed0c
 8006508:	200025c8 	.word	0x200025c8

0800650c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10b      	bne.n	8006538 <xQueueGenericReset+0x2c>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	60bb      	str	r3, [r7, #8]
}
 8006532:	bf00      	nop
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006538:	f7ff fec6 	bl	80062c8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006544:	68f9      	ldr	r1, [r7, #12]
 8006546:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006548:	fb01 f303 	mul.w	r3, r1, r3
 800654c:	441a      	add	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006568:	3b01      	subs	r3, #1
 800656a:	68f9      	ldr	r1, [r7, #12]
 800656c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800656e:	fb01 f303 	mul.w	r3, r1, r3
 8006572:	441a      	add	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	22ff      	movs	r2, #255	@ 0xff
 800657c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	22ff      	movs	r2, #255	@ 0xff
 8006584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d114      	bne.n	80065b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01a      	beq.n	80065cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3310      	adds	r3, #16
 800659a:	4618      	mov	r0, r3
 800659c:	f001 fb06 	bl	8007bac <xTaskRemoveFromEventList>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d012      	beq.n	80065cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80065a6:	4b0d      	ldr	r3, [pc, #52]	@ (80065dc <xQueueGenericReset+0xd0>)
 80065a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	e009      	b.n	80065cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3310      	adds	r3, #16
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff fca1 	bl	8005f04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3324      	adds	r3, #36	@ 0x24
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff fc9c 	bl	8005f04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80065cc:	f7ff feae 	bl	800632c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80065d0:	2301      	movs	r3, #1
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	e000ed04 	.word	0xe000ed04

080065e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08e      	sub	sp, #56	@ 0x38
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10b      	bne.n	800660c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006606:	bf00      	nop
 8006608:	bf00      	nop
 800660a:	e7fd      	b.n	8006608 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10b      	bne.n	800662a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop
 8006628:	e7fd      	b.n	8006626 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <xQueueGenericCreateStatic+0x56>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <xQueueGenericCreateStatic+0x5a>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <xQueueGenericCreateStatic+0x5c>
 800663a:	2300      	movs	r3, #0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10b      	bne.n	8006658 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	623b      	str	r3, [r7, #32]
}
 8006652:	bf00      	nop
 8006654:	bf00      	nop
 8006656:	e7fd      	b.n	8006654 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d102      	bne.n	8006664 <xQueueGenericCreateStatic+0x84>
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <xQueueGenericCreateStatic+0x88>
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <xQueueGenericCreateStatic+0x8a>
 8006668:	2300      	movs	r3, #0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10b      	bne.n	8006686 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	61fb      	str	r3, [r7, #28]
}
 8006680:	bf00      	nop
 8006682:	bf00      	nop
 8006684:	e7fd      	b.n	8006682 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006686:	234c      	movs	r3, #76	@ 0x4c
 8006688:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b4c      	cmp	r3, #76	@ 0x4c
 800668e:	d00b      	beq.n	80066a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	61bb      	str	r3, [r7, #24]
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	e7fd      	b.n	80066a4 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80066ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00d      	beq.n	80066ce <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066ba:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80066be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	4613      	mov	r3, r2
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	68b9      	ldr	r1, [r7, #8]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f844 	bl	8006756 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80066ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3730      	adds	r7, #48	@ 0x30
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	@ 0x28
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	4613      	mov	r3, r2
 80066e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10b      	bne.n	8006704 <xQueueGenericCreate+0x2c>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	613b      	str	r3, [r7, #16]
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	e7fd      	b.n	8006700 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d102      	bne.n	8006710 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]
 800670e:	e004      	b.n	800671a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	fb02 f303 	mul.w	r3, r2, r3
 8006718:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	334c      	adds	r3, #76	@ 0x4c
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fa10 	bl	8005b44 <pvPortMalloc>
 8006724:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00f      	beq.n	800674c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	334c      	adds	r3, #76	@ 0x4c
 8006730:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800673a:	79fa      	ldrb	r2, [r7, #7]
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	4613      	mov	r3, r2
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	68b9      	ldr	r1, [r7, #8]
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 f805 	bl	8006756 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800674c:	69bb      	ldr	r3, [r7, #24]
	}
 800674e:	4618      	mov	r0, r3
 8006750:	3720      	adds	r7, #32
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
 8006762:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d103      	bne.n	8006772 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	e002      	b.n	8006778 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006784:	2101      	movs	r1, #1
 8006786:	69b8      	ldr	r0, [r7, #24]
 8006788:	f7ff fec0 	bl	800650c <xQueueGenericReset>
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	2200      	movs	r2, #0
 8006790:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006792:	bf00      	nop
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800679a:	b580      	push	{r7, lr}
 800679c:	b08a      	sub	sp, #40	@ 0x28
 800679e:	af02      	add	r7, sp, #8
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10b      	bne.n	80067c4 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	61bb      	str	r3, [r7, #24]
}
 80067be:	bf00      	nop
 80067c0:	bf00      	nop
 80067c2:	e7fd      	b.n	80067c0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d90b      	bls.n	80067e4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	617b      	str	r3, [r7, #20]
}
 80067de:	bf00      	nop
 80067e0:	bf00      	nop
 80067e2:	e7fd      	b.n	80067e0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80067e4:	2302      	movs	r3, #2
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	2100      	movs	r1, #0
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f7ff fef6 	bl	80065e0 <xQueueGenericCreateStatic>
 80067f4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006802:	69fb      	ldr	r3, [r7, #28]
	}
 8006804:	4618      	mov	r0, r3
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10b      	bne.n	8006834 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	613b      	str	r3, [r7, #16]
}
 800682e:	bf00      	nop
 8006830:	bf00      	nop
 8006832:	e7fd      	b.n	8006830 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	429a      	cmp	r2, r3
 800683a:	d90b      	bls.n	8006854 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	60fb      	str	r3, [r7, #12]
}
 800684e:	bf00      	nop
 8006850:	bf00      	nop
 8006852:	e7fd      	b.n	8006850 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006854:	2202      	movs	r2, #2
 8006856:	2100      	movs	r1, #0
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff ff3d 	bl	80066d8 <xQueueGenericCreate>
 800685e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800686c:	697b      	ldr	r3, [r7, #20]
	}
 800686e:	4618      	mov	r0, r3
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08e      	sub	sp, #56	@ 0x38
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006886:	2300      	movs	r3, #0
 8006888:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800688e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10b      	bne.n	80068ac <xQueueGenericSend+0x34>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068a6:	bf00      	nop
 80068a8:	bf00      	nop
 80068aa:	e7fd      	b.n	80068a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d103      	bne.n	80068ba <xQueueGenericSend+0x42>
 80068b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <xQueueGenericSend+0x46>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <xQueueGenericSend+0x48>
 80068be:	2300      	movs	r3, #0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10b      	bne.n	80068dc <xQueueGenericSend+0x64>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80068d6:	bf00      	nop
 80068d8:	bf00      	nop
 80068da:	e7fd      	b.n	80068d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d103      	bne.n	80068ea <xQueueGenericSend+0x72>
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <xQueueGenericSend+0x76>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e000      	b.n	80068f0 <xQueueGenericSend+0x78>
 80068ee:	2300      	movs	r3, #0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10b      	bne.n	800690c <xQueueGenericSend+0x94>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	623b      	str	r3, [r7, #32]
}
 8006906:	bf00      	nop
 8006908:	bf00      	nop
 800690a:	e7fd      	b.n	8006908 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800690c:	f001 fb14 	bl	8007f38 <xTaskGetSchedulerState>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d102      	bne.n	800691c <xQueueGenericSend+0xa4>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <xQueueGenericSend+0xa8>
 800691c:	2301      	movs	r3, #1
 800691e:	e000      	b.n	8006922 <xQueueGenericSend+0xaa>
 8006920:	2300      	movs	r3, #0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10b      	bne.n	800693e <xQueueGenericSend+0xc6>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	61fb      	str	r3, [r7, #28]
}
 8006938:	bf00      	nop
 800693a:	bf00      	nop
 800693c:	e7fd      	b.n	800693a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800693e:	f7ff fcc3 	bl	80062c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694a:	429a      	cmp	r2, r3
 800694c:	d302      	bcc.n	8006954 <xQueueGenericSend+0xdc>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b02      	cmp	r3, #2
 8006952:	d13d      	bne.n	80069d0 <xQueueGenericSend+0x158>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800695a:	f000 fb57 	bl	800700c <prvCopyDataToQueue>
 800695e:	62f8      	str	r0, [r7, #44]	@ 0x2c

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8006960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00f      	beq.n	8006988 <xQueueGenericSend+0x110>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800696c:	f000 fcaf 	bl	80072ce <prvNotifyQueueSetContainer>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d028      	beq.n	80069c8 <xQueueGenericSend+0x150>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8006976:	4b4a      	ldr	r3, [pc, #296]	@ (8006aa0 <xQueueGenericSend+0x228>)
 8006978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	e01f      	b.n	80069c8 <xQueueGenericSend+0x150>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	d010      	beq.n	80069b2 <xQueueGenericSend+0x13a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006992:	3324      	adds	r3, #36	@ 0x24
 8006994:	4618      	mov	r0, r3
 8006996:	f001 f909 	bl	8007bac <xTaskRemoveFromEventList>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d013      	beq.n	80069c8 <xQueueGenericSend+0x150>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 80069a0:	4b3f      	ldr	r3, [pc, #252]	@ (8006aa0 <xQueueGenericSend+0x228>)
 80069a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	e00a      	b.n	80069c8 <xQueueGenericSend+0x150>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 80069b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d007      	beq.n	80069c8 <xQueueGenericSend+0x150>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 80069b8:	4b39      	ldr	r3, [pc, #228]	@ (8006aa0 <xQueueGenericSend+0x228>)
 80069ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069c8:	f7ff fcb0 	bl	800632c <vPortExitCritical>
				return pdPASS;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e063      	b.n	8006a98 <xQueueGenericSend+0x220>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d103      	bne.n	80069de <xQueueGenericSend+0x166>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069d6:	f7ff fca9 	bl	800632c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	e05c      	b.n	8006a98 <xQueueGenericSend+0x220>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d106      	bne.n	80069f2 <xQueueGenericSend+0x17a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069e4:	f107 0314 	add.w	r3, r7, #20
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 f943 	bl	8007c74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069ee:	2301      	movs	r3, #1
 80069f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069f2:	f7ff fc9b 	bl	800632c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069f6:	f000 feed 	bl	80077d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069fa:	f7ff fc65 	bl	80062c8 <vPortEnterCritical>
 80069fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a04:	b25b      	sxtb	r3, r3
 8006a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0a:	d103      	bne.n	8006a14 <xQueueGenericSend+0x19c>
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a1a:	b25b      	sxtb	r3, r3
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d103      	bne.n	8006a2a <xQueueGenericSend+0x1b2>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a2a:	f7ff fc7f 	bl	800632c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a2e:	1d3a      	adds	r2, r7, #4
 8006a30:	f107 0314 	add.w	r3, r7, #20
 8006a34:	4611      	mov	r1, r2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f001 f932 	bl	8007ca0 <xTaskCheckForTimeOut>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d124      	bne.n	8006a8c <xQueueGenericSend+0x214>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a44:	f000 fbe8 	bl	8007218 <prvIsQueueFull>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d018      	beq.n	8006a80 <xQueueGenericSend+0x208>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	3310      	adds	r3, #16
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f001 f882 	bl	8007b60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a5e:	f000 fb65 	bl	800712c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a62:	f000 fec5 	bl	80077f0 <xTaskResumeAll>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f47f af68 	bne.w	800693e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa0 <xQueueGenericSend+0x228>)
 8006a70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	e75e      	b.n	800693e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a82:	f000 fb53 	bl	800712c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a86:	f000 feb3 	bl	80077f0 <xTaskResumeAll>
 8006a8a:	e758      	b.n	800693e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a8e:	f000 fb4d 	bl	800712c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a92:	f000 fead 	bl	80077f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a96:	2300      	movs	r3, #0
		}
	}
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3738      	adds	r7, #56	@ 0x38
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08e      	sub	sp, #56	@ 0x38
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10b      	bne.n	8006ad4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ace:	bf00      	nop
 8006ad0:	bf00      	nop
 8006ad2:	e7fd      	b.n	8006ad0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d103      	bne.n	8006ae2 <xQueueGenericSendFromISR+0x3e>
 8006ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <xQueueGenericSendFromISR+0x42>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <xQueueGenericSendFromISR+0x44>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10b      	bne.n	8006b04 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	623b      	str	r3, [r7, #32]
}
 8006afe:	bf00      	nop
 8006b00:	bf00      	nop
 8006b02:	e7fd      	b.n	8006b00 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d103      	bne.n	8006b12 <xQueueGenericSendFromISR+0x6e>
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d101      	bne.n	8006b16 <xQueueGenericSendFromISR+0x72>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <xQueueGenericSendFromISR+0x74>
 8006b16:	2300      	movs	r3, #0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10b      	bne.n	8006b34 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	61fb      	str	r3, [r7, #28]
}
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	e7fd      	b.n	8006b30 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b34:	f7ff fca8 	bl	8006488 <vPortValidateInterruptPriority>
	__asm volatile
 8006b38:	f3ef 8211 	mrs	r2, BASEPRI
 8006b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	61ba      	str	r2, [r7, #24]
 8006b4e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006b50:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d302      	bcc.n	8006b66 <xQueueGenericSendFromISR+0xc2>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d13e      	bne.n	8006be4 <xQueueGenericSendFromISR+0x140>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	68b9      	ldr	r1, [r7, #8]
 8006b74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b76:	f000 fa49 	bl	800700c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b7a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b82:	d124      	bne.n	8006bce <xQueueGenericSendFromISR+0x12a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8006b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00d      	beq.n	8006ba8 <xQueueGenericSendFromISR+0x104>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b90:	f000 fb9d 	bl	80072ce <prvNotifyQueueSetContainer>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d021      	beq.n	8006bde <xQueueGenericSendFromISR+0x13a>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01e      	beq.n	8006bde <xQueueGenericSendFromISR+0x13a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	e01a      	b.n	8006bde <xQueueGenericSendFromISR+0x13a>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d016      	beq.n	8006bde <xQueueGenericSendFromISR+0x13a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb2:	3324      	adds	r3, #36	@ 0x24
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 fff9 	bl	8007bac <xTaskRemoveFromEventList>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00e      	beq.n	8006bde <xQueueGenericSendFromISR+0x13a>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00b      	beq.n	8006bde <xQueueGenericSendFromISR+0x13a>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	e007      	b.n	8006bde <xQueueGenericSendFromISR+0x13a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	b25a      	sxtb	r2, r3
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006bde:	2301      	movs	r3, #1
 8006be0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006be2:	e001      	b.n	8006be8 <xQueueGenericSendFromISR+0x144>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006be4:	2300      	movs	r3, #0
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bea:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f383 8811 	msr	BASEPRI, r3
}
 8006bf2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3738      	adds	r7, #56	@ 0x38
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b08e      	sub	sp, #56	@ 0x38
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10b      	bne.n	8006c2a <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	623b      	str	r3, [r7, #32]
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop
 8006c28:	e7fd      	b.n	8006c26 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00b      	beq.n	8006c4a <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	61fb      	str	r3, [r7, #28]
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	e7fd      	b.n	8006c46 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d103      	bne.n	8006c5a <xQueueGiveFromISR+0x5c>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <xQueueGiveFromISR+0x60>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <xQueueGiveFromISR+0x62>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10b      	bne.n	8006c7c <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	61bb      	str	r3, [r7, #24]
}
 8006c76:	bf00      	nop
 8006c78:	bf00      	nop
 8006c7a:	e7fd      	b.n	8006c78 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c7c:	f7ff fc04 	bl	8006488 <vPortValidateInterruptPriority>
	__asm volatile
 8006c80:	f3ef 8211 	mrs	r2, BASEPRI
 8006c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	617a      	str	r2, [r7, #20]
 8006c96:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006c98:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca0:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d23d      	bcs.n	8006d28 <xQueueGiveFromISR+0x12a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbc:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc6:	d124      	bne.n	8006d12 <xQueueGiveFromISR+0x114>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00d      	beq.n	8006cec <xQueueGiveFromISR+0xee>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cd4:	f000 fafb 	bl	80072ce <prvNotifyQueueSetContainer>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d021      	beq.n	8006d22 <xQueueGiveFromISR+0x124>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d01e      	beq.n	8006d22 <xQueueGiveFromISR+0x124>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	e01a      	b.n	8006d22 <xQueueGiveFromISR+0x124>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d016      	beq.n	8006d22 <xQueueGiveFromISR+0x124>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf6:	3324      	adds	r3, #36	@ 0x24
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 ff57 	bl	8007bac <xTaskRemoveFromEventList>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00e      	beq.n	8006d22 <xQueueGiveFromISR+0x124>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00b      	beq.n	8006d22 <xQueueGiveFromISR+0x124>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	e007      	b.n	8006d22 <xQueueGiveFromISR+0x124>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d16:	3301      	adds	r3, #1
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	b25a      	sxtb	r2, r3
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006d22:	2301      	movs	r3, #1
 8006d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d26:	e001      	b.n	8006d2c <xQueueGiveFromISR+0x12e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d2e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f383 8811 	msr	BASEPRI, r3
}
 8006d36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3738      	adds	r7, #56	@ 0x38
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08c      	sub	sp, #48	@ 0x30
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10b      	bne.n	8006d76 <xQueueReceive+0x32>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	623b      	str	r3, [r7, #32]
}
 8006d70:	bf00      	nop
 8006d72:	bf00      	nop
 8006d74:	e7fd      	b.n	8006d72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d103      	bne.n	8006d84 <xQueueReceive+0x40>
 8006d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <xQueueReceive+0x44>
 8006d84:	2301      	movs	r3, #1
 8006d86:	e000      	b.n	8006d8a <xQueueReceive+0x46>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10b      	bne.n	8006da6 <xQueueReceive+0x62>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	61fb      	str	r3, [r7, #28]
}
 8006da0:	bf00      	nop
 8006da2:	bf00      	nop
 8006da4:	e7fd      	b.n	8006da2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006da6:	f001 f8c7 	bl	8007f38 <xTaskGetSchedulerState>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d102      	bne.n	8006db6 <xQueueReceive+0x72>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <xQueueReceive+0x76>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e000      	b.n	8006dbc <xQueueReceive+0x78>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10b      	bne.n	8006dd8 <xQueueReceive+0x94>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	61bb      	str	r3, [r7, #24]
}
 8006dd2:	bf00      	nop
 8006dd4:	bf00      	nop
 8006dd6:	e7fd      	b.n	8006dd4 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dd8:	f7ff fa76 	bl	80062c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d01f      	beq.n	8006e28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006de8:	68b9      	ldr	r1, [r7, #8]
 8006dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dec:	f000 f978 	bl	80070e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df2:	1e5a      	subs	r2, r3, #1
 8006df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00f      	beq.n	8006e20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e02:	3310      	adds	r3, #16
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fed1 	bl	8007bac <xTaskRemoveFromEventList>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d007      	beq.n	8006e20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e10:	4b3c      	ldr	r3, [pc, #240]	@ (8006f04 <xQueueReceive+0x1c0>)
 8006e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e20:	f7ff fa84 	bl	800632c <vPortExitCritical>
				return pdPASS;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e069      	b.n	8006efc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d103      	bne.n	8006e36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e2e:	f7ff fa7d 	bl	800632c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e32:	2300      	movs	r3, #0
 8006e34:	e062      	b.n	8006efc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d106      	bne.n	8006e4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e3c:	f107 0310 	add.w	r3, r7, #16
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 ff17 	bl	8007c74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e46:	2301      	movs	r3, #1
 8006e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e4a:	f7ff fa6f 	bl	800632c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e4e:	f000 fcc1 	bl	80077d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e52:	f7ff fa39 	bl	80062c8 <vPortEnterCritical>
 8006e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e5c:	b25b      	sxtb	r3, r3
 8006e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e62:	d103      	bne.n	8006e6c <xQueueReceive+0x128>
 8006e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e72:	b25b      	sxtb	r3, r3
 8006e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e78:	d103      	bne.n	8006e82 <xQueueReceive+0x13e>
 8006e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e82:	f7ff fa53 	bl	800632c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e86:	1d3a      	adds	r2, r7, #4
 8006e88:	f107 0310 	add.w	r3, r7, #16
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 ff06 	bl	8007ca0 <xTaskCheckForTimeOut>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d123      	bne.n	8006ee2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e9c:	f000 f9a6 	bl	80071ec <prvIsQueueEmpty>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d017      	beq.n	8006ed6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea8:	3324      	adds	r3, #36	@ 0x24
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4611      	mov	r1, r2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fe56 	bl	8007b60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006eb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006eb6:	f000 f939 	bl	800712c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006eba:	f000 fc99 	bl	80077f0 <xTaskResumeAll>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d189      	bne.n	8006dd8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8006f04 <xQueueReceive+0x1c0>)
 8006ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	e780      	b.n	8006dd8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ed6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ed8:	f000 f928 	bl	800712c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006edc:	f000 fc88 	bl	80077f0 <xTaskResumeAll>
 8006ee0:	e77a      	b.n	8006dd8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ee2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ee4:	f000 f922 	bl	800712c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ee8:	f000 fc82 	bl	80077f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006eec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006eee:	f000 f97d 	bl	80071ec <prvIsQueueEmpty>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f43f af6f 	beq.w	8006dd8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006efa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3730      	adds	r7, #48	@ 0x30
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	e000ed04 	.word	0xe000ed04

08006f08 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08e      	sub	sp, #56	@ 0x38
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10b      	bne.n	8006f36 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	623b      	str	r3, [r7, #32]
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	e7fd      	b.n	8006f32 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d103      	bne.n	8006f44 <xQueueReceiveFromISR+0x3c>
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <xQueueReceiveFromISR+0x40>
 8006f44:	2301      	movs	r3, #1
 8006f46:	e000      	b.n	8006f4a <xQueueReceiveFromISR+0x42>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10b      	bne.n	8006f66 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	61fb      	str	r3, [r7, #28]
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	e7fd      	b.n	8006f62 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f66:	f7ff fa8f 	bl	8006488 <vPortValidateInterruptPriority>
	__asm volatile
 8006f6a:	f3ef 8211 	mrs	r2, BASEPRI
 8006f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	61ba      	str	r2, [r7, #24]
 8006f80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006f82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d02f      	beq.n	8006ff2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f9c:	68b9      	ldr	r1, [r7, #8]
 8006f9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fa0:	f000 f89e 	bl	80070e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa6:	1e5a      	subs	r2, r3, #1
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006faa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006fac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb4:	d112      	bne.n	8006fdc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d016      	beq.n	8006fec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc0:	3310      	adds	r3, #16
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 fdf2 	bl	8007bac <xTaskRemoveFromEventList>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00e      	beq.n	8006fec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00b      	beq.n	8006fec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	e007      	b.n	8006fec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	b25a      	sxtb	r2, r3
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006fec:	2301      	movs	r3, #1
 8006fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff0:	e001      	b.n	8006ff6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f383 8811 	msr	BASEPRI, r3
}
 8007000:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007004:	4618      	mov	r0, r3
 8007006:	3738      	adds	r7, #56	@ 0x38
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007020:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10d      	bne.n	8007046 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d14d      	bne.n	80070ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	4618      	mov	r0, r3
 8007038:	f000 ff9c 	bl	8007f74 <xTaskPriorityDisinherit>
 800703c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	605a      	str	r2, [r3, #4]
 8007044:	e043      	b.n	80070ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d119      	bne.n	8007080 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6898      	ldr	r0, [r3, #8]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007054:	461a      	mov	r2, r3
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	f001 fbbb 	bl	80087d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007064:	441a      	add	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	429a      	cmp	r2, r3
 8007074:	d32b      	bcc.n	80070ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	609a      	str	r2, [r3, #8]
 800707e:	e026      	b.n	80070ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	68d8      	ldr	r0, [r3, #12]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007088:	461a      	mov	r2, r3
 800708a:	68b9      	ldr	r1, [r7, #8]
 800708c:	f001 fba1 	bl	80087d2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007098:	425b      	negs	r3, r3
 800709a:	441a      	add	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d207      	bcs.n	80070bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b4:	425b      	negs	r3, r3
 80070b6:	441a      	add	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d105      	bne.n	80070ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80070d6:	697b      	ldr	r3, [r7, #20]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d018      	beq.n	8007124 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fa:	441a      	add	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68da      	ldr	r2, [r3, #12]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	429a      	cmp	r2, r3
 800710a:	d303      	bcc.n	8007114 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68d9      	ldr	r1, [r3, #12]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711c:	461a      	mov	r2, r3
 800711e:	6838      	ldr	r0, [r7, #0]
 8007120:	f001 fb57 	bl	80087d2 <memcpy>
	}
}
 8007124:	bf00      	nop
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007134:	f7ff f8c8 	bl	80062c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800713e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007140:	e01f      	b.n	8007182 <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007146:	2b00      	cmp	r3, #0
 8007148:	d009      	beq.n	800715e <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 800714a:	2100      	movs	r1, #0
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f8be 	bl	80072ce <prvNotifyQueueSetContainer>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d010      	beq.n	800717a <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8007158:	f000 fe06 	bl	8007d68 <vTaskMissedYield>
 800715c:	e00d      	b.n	800717a <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007162:	2b00      	cmp	r3, #0
 8007164:	d012      	beq.n	800718c <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3324      	adds	r3, #36	@ 0x24
 800716a:	4618      	mov	r0, r3
 800716c:	f000 fd1e 	bl	8007bac <xTaskRemoveFromEventList>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8007176:	f000 fdf7 	bl	8007d68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	3b01      	subs	r3, #1
 800717e:	b2db      	uxtb	r3, r3
 8007180:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007186:	2b00      	cmp	r3, #0
 8007188:	dcdb      	bgt.n	8007142 <prvUnlockQueue+0x16>
 800718a:	e000      	b.n	800718e <prvUnlockQueue+0x62>
						break;
 800718c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	22ff      	movs	r2, #255	@ 0xff
 8007192:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007196:	f7ff f8c9 	bl	800632c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800719a:	f7ff f895 	bl	80062c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071a6:	e011      	b.n	80071cc <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d012      	beq.n	80071d6 <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3310      	adds	r3, #16
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 fcf9 	bl	8007bac <xTaskRemoveFromEventList>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 80071c0:	f000 fdd2 	bl	8007d68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	dce9      	bgt.n	80071a8 <prvUnlockQueue+0x7c>
 80071d4:	e000      	b.n	80071d8 <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 80071d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	22ff      	movs	r2, #255	@ 0xff
 80071dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80071e0:	f7ff f8a4 	bl	800632c <vPortExitCritical>
}
 80071e4:	bf00      	nop
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071f4:	f7ff f868 	bl	80062c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d102      	bne.n	8007206 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007200:	2301      	movs	r3, #1
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	e001      	b.n	800720a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800720a:	f7ff f88f 	bl	800632c <vPortExitCritical>

	return xReturn;
 800720e:	68fb      	ldr	r3, [r7, #12]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007220:	f7ff f852 	bl	80062c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800722c:	429a      	cmp	r2, r3
 800722e:	d102      	bne.n	8007236 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007230:	2301      	movs	r3, #1
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	e001      	b.n	800723a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800723a:	f7ff f877 	bl	800632c <vPortExitCritical>

	return xReturn;
 800723e:	68fb      	ldr	r3, [r7, #12]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 8007250:	2200      	movs	r2, #0
 8007252:	2104      	movs	r1, #4
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff fa3f 	bl	80066d8 <xQueueGenericCreate>
 800725a:	60f8      	str	r0, [r7, #12]

		return pxQueue;
 800725c:	68fb      	ldr	r3, [r7, #12]
	}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 8007266:	b580      	push	{r7, lr}
 8007268:	b084      	sub	sp, #16
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007270:	f7ff f82a 	bl	80062c8 <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	e00b      	b.n	800729a <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 800728a:	2300      	movs	r3, #0
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	e004      	b.n	800729a <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	649a      	str	r2, [r3, #72]	@ 0x48
				xReturn = pdPASS;
 8007296:	2301      	movs	r3, #1
 8007298:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800729a:	f7ff f847 	bl	800632c <vPortExitCritical>

		return xReturn;
 800729e:	68fb      	ldr	r3, [r7, #12]
	}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 80072b6:	f107 030c 	add.w	r3, r7, #12
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7ff fd40 	bl	8006d44 <xQueueReceive>
		return xReturn;
 80072c4:	68fb      	ldr	r3, [r7, #12]
	}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b088      	sub	sp, #32
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072dc:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 80072de:	2300      	movs	r3, #0
 80072e0:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10b      	bne.n	8007300 <prvNotifyQueueSetContainer+0x32>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	613b      	str	r3, [r7, #16]
}
 80072fa:	bf00      	nop
 80072fc:	bf00      	nop
 80072fe:	e7fd      	b.n	80072fc <prvNotifyQueueSetContainer+0x2e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007308:	429a      	cmp	r2, r3
 800730a:	d30b      	bcc.n	8007324 <prvNotifyQueueSetContainer+0x56>
	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	60fb      	str	r3, [r7, #12]
}
 800731e:	bf00      	nop
 8007320:	bf00      	nop
 8007322:	e7fd      	b.n	8007320 <prvNotifyQueueSetContainer+0x52>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732c:	429a      	cmp	r2, r3
 800732e:	d225      	bcs.n	800737c <prvNotifyQueueSetContainer+0xae>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007336:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8007338:	1d3b      	adds	r3, r7, #4
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	4619      	mov	r1, r3
 800733e:	69b8      	ldr	r0, [r7, #24]
 8007340:	f7ff fe64 	bl	800700c <prvCopyDataToQueue>
 8007344:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8007346:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800734a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734e:	d10e      	bne.n	800736e <prvNotifyQueueSetContainer+0xa0>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	d011      	beq.n	800737c <prvNotifyQueueSetContainer+0xae>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	3324      	adds	r3, #36	@ 0x24
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fc25 	bl	8007bac <xTaskRemoveFromEventList>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d009      	beq.n	800737c <prvNotifyQueueSetContainer+0xae>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8007368:	2301      	movs	r3, #1
 800736a:	61fb      	str	r3, [r7, #28]
 800736c:	e006      	b.n	800737c <prvNotifyQueueSetContainer+0xae>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	3301      	adds	r3, #1
 8007372:	b2db      	uxtb	r3, r3
 8007374:	b25a      	sxtb	r2, r3
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800737c:	69fb      	ldr	r3, [r7, #28]
	}
 800737e:	4618      	mov	r0, r3
 8007380:	3720      	adds	r7, #32
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007386:	b580      	push	{r7, lr}
 8007388:	b08e      	sub	sp, #56	@ 0x38
 800738a:	af04      	add	r7, sp, #16
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	607a      	str	r2, [r7, #4]
 8007392:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10b      	bne.n	80073b2 <xTaskCreateStatic+0x2c>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	623b      	str	r3, [r7, #32]
}
 80073ac:	bf00      	nop
 80073ae:	bf00      	nop
 80073b0:	e7fd      	b.n	80073ae <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80073b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10b      	bne.n	80073d0 <xTaskCreateStatic+0x4a>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	61fb      	str	r3, [r7, #28]
}
 80073ca:	bf00      	nop
 80073cc:	bf00      	nop
 80073ce:	e7fd      	b.n	80073cc <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073d0:	2354      	movs	r3, #84	@ 0x54
 80073d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	2b54      	cmp	r3, #84	@ 0x54
 80073d8:	d00b      	beq.n	80073f2 <xTaskCreateStatic+0x6c>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	61bb      	str	r3, [r7, #24]
}
 80073ec:	bf00      	nop
 80073ee:	bf00      	nop
 80073f0:	e7fd      	b.n	80073ee <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01e      	beq.n	8007436 <xTaskCreateStatic+0xb0>
 80073f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d01b      	beq.n	8007436 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007400:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007404:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007406:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740a:	2202      	movs	r2, #2
 800740c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007410:	2300      	movs	r3, #0
 8007412:	9303      	str	r3, [sp, #12]
 8007414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007416:	9302      	str	r3, [sp, #8]
 8007418:	f107 0314 	add.w	r3, r7, #20
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 f850 	bl	80074ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800742e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007430:	f000 f8ce 	bl	80075d0 <prvAddNewTaskToReadyList>
 8007434:	e001      	b.n	800743a <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8007436:	2300      	movs	r3, #0
 8007438:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800743a:	697b      	ldr	r3, [r7, #20]
	}
 800743c:	4618      	mov	r0, r3
 800743e:	3728      	adds	r7, #40	@ 0x28
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08c      	sub	sp, #48	@ 0x30
 8007448:	af04      	add	r7, sp, #16
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	4613      	mov	r3, r2
 8007452:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007454:	88fb      	ldrh	r3, [r7, #6]
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4618      	mov	r0, r3
 800745a:	f7fe fb73 	bl	8005b44 <pvPortMalloc>
 800745e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00e      	beq.n	8007484 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007466:	2054      	movs	r0, #84	@ 0x54
 8007468:	f7fe fb6c 	bl	8005b44 <pvPortMalloc>
 800746c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	631a      	str	r2, [r3, #48]	@ 0x30
 800747a:	e005      	b.n	8007488 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800747c:	6978      	ldr	r0, [r7, #20]
 800747e:	f7fe fc29 	bl	8005cd4 <vPortFree>
 8007482:	e001      	b.n	8007488 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007484:	2300      	movs	r3, #0
 8007486:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d017      	beq.n	80074be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007496:	88fa      	ldrh	r2, [r7, #6]
 8007498:	2300      	movs	r3, #0
 800749a:	9303      	str	r3, [sp, #12]
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	9302      	str	r3, [sp, #8]
 80074a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 f80e 	bl	80074ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074b2:	69f8      	ldr	r0, [r7, #28]
 80074b4:	f000 f88c 	bl	80075d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074b8:	2301      	movs	r3, #1
 80074ba:	61bb      	str	r3, [r7, #24]
 80074bc:	e002      	b.n	80074c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074be:	f04f 33ff 	mov.w	r3, #4294967295
 80074c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074c4:	69bb      	ldr	r3, [r7, #24]
	}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3720      	adds	r7, #32
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b088      	sub	sp, #32
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	607a      	str	r2, [r7, #4]
 80074da:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80074dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074e6:	3b01      	subs	r3, #1
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	f023 0307 	bic.w	r3, r3, #7
 80074f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	f003 0307 	and.w	r3, r3, #7
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00b      	beq.n	8007518 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	617b      	str	r3, [r7, #20]
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	e7fd      	b.n	8007514 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007518:	2300      	movs	r3, #0
 800751a:	61fb      	str	r3, [r7, #28]
 800751c:	e012      	b.n	8007544 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	4413      	add	r3, r2
 8007524:	7819      	ldrb	r1, [r3, #0]
 8007526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	4413      	add	r3, r2
 800752c:	3334      	adds	r3, #52	@ 0x34
 800752e:	460a      	mov	r2, r1
 8007530:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	4413      	add	r3, r2
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d006      	beq.n	800754c <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	3301      	adds	r3, #1
 8007542:	61fb      	str	r3, [r7, #28]
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	2b0f      	cmp	r3, #15
 8007548:	d9e9      	bls.n	800751e <prvInitialiseNewTask+0x50>
 800754a:	e000      	b.n	800754e <prvInitialiseNewTask+0x80>
		{
			break;
 800754c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800754e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007558:	2b06      	cmp	r3, #6
 800755a:	d901      	bls.n	8007560 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800755c:	2306      	movs	r3, #6
 800755e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007562:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007564:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800756a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800756c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756e:	2200      	movs	r2, #0
 8007570:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007574:	3304      	adds	r3, #4
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fce4 	bl	8005f44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800757c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757e:	3318      	adds	r3, #24
 8007580:	4618      	mov	r0, r3
 8007582:	f7fe fcdf 	bl	8005f44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800758a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800758c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758e:	f1c3 0207 	rsb	r2, r3, #7
 8007592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007594:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800759a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759e:	2200      	movs	r2, #0
 80075a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	68f9      	ldr	r1, [r7, #12]
 80075ae:	69b8      	ldr	r0, [r7, #24]
 80075b0:	f7fe fd5c 	bl	800606c <pxPortInitialiseStack>
 80075b4:	4602      	mov	r2, r0
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80075ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075c6:	bf00      	nop
 80075c8:	3720      	adds	r7, #32
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075d8:	f7fe fe76 	bl	80062c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075dc:	4b2a      	ldr	r3, [pc, #168]	@ (8007688 <prvAddNewTaskToReadyList+0xb8>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3301      	adds	r3, #1
 80075e2:	4a29      	ldr	r2, [pc, #164]	@ (8007688 <prvAddNewTaskToReadyList+0xb8>)
 80075e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075e6:	4b29      	ldr	r3, [pc, #164]	@ (800768c <prvAddNewTaskToReadyList+0xbc>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d109      	bne.n	8007602 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075ee:	4a27      	ldr	r2, [pc, #156]	@ (800768c <prvAddNewTaskToReadyList+0xbc>)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80075f4:	4b24      	ldr	r3, [pc, #144]	@ (8007688 <prvAddNewTaskToReadyList+0xb8>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d110      	bne.n	800761e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80075fc:	f000 fbd8 	bl	8007db0 <prvInitialiseTaskLists>
 8007600:	e00d      	b.n	800761e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007602:	4b23      	ldr	r3, [pc, #140]	@ (8007690 <prvAddNewTaskToReadyList+0xc0>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d109      	bne.n	800761e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800760a:	4b20      	ldr	r3, [pc, #128]	@ (800768c <prvAddNewTaskToReadyList+0xbc>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	429a      	cmp	r2, r3
 8007616:	d802      	bhi.n	800761e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007618:	4a1c      	ldr	r2, [pc, #112]	@ (800768c <prvAddNewTaskToReadyList+0xbc>)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800761e:	4b1d      	ldr	r3, [pc, #116]	@ (8007694 <prvAddNewTaskToReadyList+0xc4>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3301      	adds	r3, #1
 8007624:	4a1b      	ldr	r2, [pc, #108]	@ (8007694 <prvAddNewTaskToReadyList+0xc4>)
 8007626:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762c:	2201      	movs	r2, #1
 800762e:	409a      	lsls	r2, r3
 8007630:	4b19      	ldr	r3, [pc, #100]	@ (8007698 <prvAddNewTaskToReadyList+0xc8>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4313      	orrs	r3, r2
 8007636:	4a18      	ldr	r2, [pc, #96]	@ (8007698 <prvAddNewTaskToReadyList+0xc8>)
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800763e:	4613      	mov	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4a15      	ldr	r2, [pc, #84]	@ (800769c <prvAddNewTaskToReadyList+0xcc>)
 8007648:	441a      	add	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3304      	adds	r3, #4
 800764e:	4619      	mov	r1, r3
 8007650:	4610      	mov	r0, r2
 8007652:	f7fe fc84 	bl	8005f5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007656:	f7fe fe69 	bl	800632c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800765a:	4b0d      	ldr	r3, [pc, #52]	@ (8007690 <prvAddNewTaskToReadyList+0xc0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00e      	beq.n	8007680 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007662:	4b0a      	ldr	r3, [pc, #40]	@ (800768c <prvAddNewTaskToReadyList+0xbc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766c:	429a      	cmp	r2, r3
 800766e:	d207      	bcs.n	8007680 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007670:	4b0b      	ldr	r3, [pc, #44]	@ (80076a0 <prvAddNewTaskToReadyList+0xd0>)
 8007672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	200026cc 	.word	0x200026cc
 800768c:	200025cc 	.word	0x200025cc
 8007690:	200026d8 	.word	0x200026d8
 8007694:	200026e8 	.word	0x200026e8
 8007698:	200026d4 	.word	0x200026d4
 800769c:	200025d0 	.word	0x200025d0
 80076a0:	e000ed04 	.word	0xe000ed04

080076a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076ac:	2300      	movs	r3, #0
 80076ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d018      	beq.n	80076e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076b6:	4b14      	ldr	r3, [pc, #80]	@ (8007708 <vTaskDelay+0x64>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00b      	beq.n	80076d6 <vTaskDelay+0x32>
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	60bb      	str	r3, [r7, #8]
}
 80076d0:	bf00      	nop
 80076d2:	bf00      	nop
 80076d4:	e7fd      	b.n	80076d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80076d6:	f000 f87d 	bl	80077d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076da:	2100      	movs	r1, #0
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fcd1 	bl	8008084 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076e2:	f000 f885 	bl	80077f0 <xTaskResumeAll>
 80076e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d107      	bne.n	80076fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80076ee:	4b07      	ldr	r3, [pc, #28]	@ (800770c <vTaskDelay+0x68>)
 80076f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076fe:	bf00      	nop
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	200026f4 	.word	0x200026f4
 800770c:	e000ed04 	.word	0xe000ed04

08007710 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08a      	sub	sp, #40	@ 0x28
 8007714:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007716:	2300      	movs	r3, #0
 8007718:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800771e:	463a      	mov	r2, r7
 8007720:	1d39      	adds	r1, r7, #4
 8007722:	f107 0308 	add.w	r3, r7, #8
 8007726:	4618      	mov	r0, r3
 8007728:	f7f8 fd52 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	9202      	str	r2, [sp, #8]
 8007734:	9301      	str	r3, [sp, #4]
 8007736:	2300      	movs	r3, #0
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	2300      	movs	r3, #0
 800773c:	460a      	mov	r2, r1
 800773e:	491f      	ldr	r1, [pc, #124]	@ (80077bc <vTaskStartScheduler+0xac>)
 8007740:	481f      	ldr	r0, [pc, #124]	@ (80077c0 <vTaskStartScheduler+0xb0>)
 8007742:	f7ff fe20 	bl	8007386 <xTaskCreateStatic>
 8007746:	4603      	mov	r3, r0
 8007748:	4a1e      	ldr	r2, [pc, #120]	@ (80077c4 <vTaskStartScheduler+0xb4>)
 800774a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800774c:	4b1d      	ldr	r3, [pc, #116]	@ (80077c4 <vTaskStartScheduler+0xb4>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007754:	2301      	movs	r3, #1
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	e001      	b.n	800775e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800775a:	2300      	movs	r3, #0
 800775c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d116      	bne.n	8007792 <vTaskStartScheduler+0x82>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	613b      	str	r3, [r7, #16]
}
 8007776:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007778:	4b13      	ldr	r3, [pc, #76]	@ (80077c8 <vTaskStartScheduler+0xb8>)
 800777a:	f04f 32ff 	mov.w	r2, #4294967295
 800777e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007780:	4b12      	ldr	r3, [pc, #72]	@ (80077cc <vTaskStartScheduler+0xbc>)
 8007782:	2201      	movs	r2, #1
 8007784:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007786:	4b12      	ldr	r3, [pc, #72]	@ (80077d0 <vTaskStartScheduler+0xc0>)
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800778c:	f7fe fcf8 	bl	8006180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007790:	e00f      	b.n	80077b2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007798:	d10b      	bne.n	80077b2 <vTaskStartScheduler+0xa2>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	60fb      	str	r3, [r7, #12]
}
 80077ac:	bf00      	nop
 80077ae:	bf00      	nop
 80077b0:	e7fd      	b.n	80077ae <vTaskStartScheduler+0x9e>
}
 80077b2:	bf00      	nop
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	08008c04 	.word	0x08008c04
 80077c0:	08007d81 	.word	0x08007d81
 80077c4:	200026f0 	.word	0x200026f0
 80077c8:	200026ec 	.word	0x200026ec
 80077cc:	200026d8 	.word	0x200026d8
 80077d0:	200026d0 	.word	0x200026d0

080077d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077d4:	b480      	push	{r7}
 80077d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80077d8:	4b04      	ldr	r3, [pc, #16]	@ (80077ec <vTaskSuspendAll+0x18>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3301      	adds	r3, #1
 80077de:	4a03      	ldr	r2, [pc, #12]	@ (80077ec <vTaskSuspendAll+0x18>)
 80077e0:	6013      	str	r3, [r2, #0]
}
 80077e2:	bf00      	nop
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	200026f4 	.word	0x200026f4

080077f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077fa:	2300      	movs	r3, #0
 80077fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077fe:	4b42      	ldr	r3, [pc, #264]	@ (8007908 <xTaskResumeAll+0x118>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10b      	bne.n	800781e <xTaskResumeAll+0x2e>
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	603b      	str	r3, [r7, #0]
}
 8007818:	bf00      	nop
 800781a:	bf00      	nop
 800781c:	e7fd      	b.n	800781a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800781e:	f7fe fd53 	bl	80062c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007822:	4b39      	ldr	r3, [pc, #228]	@ (8007908 <xTaskResumeAll+0x118>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3b01      	subs	r3, #1
 8007828:	4a37      	ldr	r2, [pc, #220]	@ (8007908 <xTaskResumeAll+0x118>)
 800782a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800782c:	4b36      	ldr	r3, [pc, #216]	@ (8007908 <xTaskResumeAll+0x118>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d161      	bne.n	80078f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007834:	4b35      	ldr	r3, [pc, #212]	@ (800790c <xTaskResumeAll+0x11c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d05d      	beq.n	80078f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800783c:	e02e      	b.n	800789c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800783e:	4b34      	ldr	r3, [pc, #208]	@ (8007910 <xTaskResumeAll+0x120>)
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3318      	adds	r3, #24
 800784a:	4618      	mov	r0, r3
 800784c:	f7fe fbe4 	bl	8006018 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3304      	adds	r3, #4
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe fbdf 	bl	8006018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785e:	2201      	movs	r2, #1
 8007860:	409a      	lsls	r2, r3
 8007862:	4b2c      	ldr	r3, [pc, #176]	@ (8007914 <xTaskResumeAll+0x124>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4313      	orrs	r3, r2
 8007868:	4a2a      	ldr	r2, [pc, #168]	@ (8007914 <xTaskResumeAll+0x124>)
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007870:	4613      	mov	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4a27      	ldr	r2, [pc, #156]	@ (8007918 <xTaskResumeAll+0x128>)
 800787a:	441a      	add	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3304      	adds	r3, #4
 8007880:	4619      	mov	r1, r3
 8007882:	4610      	mov	r0, r2
 8007884:	f7fe fb6b 	bl	8005f5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800788c:	4b23      	ldr	r3, [pc, #140]	@ (800791c <xTaskResumeAll+0x12c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007892:	429a      	cmp	r2, r3
 8007894:	d302      	bcc.n	800789c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007896:	4b22      	ldr	r3, [pc, #136]	@ (8007920 <xTaskResumeAll+0x130>)
 8007898:	2201      	movs	r2, #1
 800789a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800789c:	4b1c      	ldr	r3, [pc, #112]	@ (8007910 <xTaskResumeAll+0x120>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1cc      	bne.n	800783e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078aa:	f000 fb1f 	bl	8007eec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80078ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007924 <xTaskResumeAll+0x134>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d010      	beq.n	80078dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078ba:	f000 f837 	bl	800792c <xTaskIncrementTick>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80078c4:	4b16      	ldr	r3, [pc, #88]	@ (8007920 <xTaskResumeAll+0x130>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1f1      	bne.n	80078ba <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80078d6:	4b13      	ldr	r3, [pc, #76]	@ (8007924 <xTaskResumeAll+0x134>)
 80078d8:	2200      	movs	r2, #0
 80078da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078dc:	4b10      	ldr	r3, [pc, #64]	@ (8007920 <xTaskResumeAll+0x130>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d009      	beq.n	80078f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078e4:	2301      	movs	r3, #1
 80078e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007928 <xTaskResumeAll+0x138>)
 80078ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078f8:	f7fe fd18 	bl	800632c <vPortExitCritical>

	return xAlreadyYielded;
 80078fc:	68bb      	ldr	r3, [r7, #8]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	200026f4 	.word	0x200026f4
 800790c:	200026cc 	.word	0x200026cc
 8007910:	2000268c 	.word	0x2000268c
 8007914:	200026d4 	.word	0x200026d4
 8007918:	200025d0 	.word	0x200025d0
 800791c:	200025cc 	.word	0x200025cc
 8007920:	200026e0 	.word	0x200026e0
 8007924:	200026dc 	.word	0x200026dc
 8007928:	e000ed04 	.word	0xe000ed04

0800792c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007932:	2300      	movs	r3, #0
 8007934:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007936:	4b51      	ldr	r3, [pc, #324]	@ (8007a7c <xTaskIncrementTick+0x150>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	f040 808e 	bne.w	8007a5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007940:	4b4f      	ldr	r3, [pc, #316]	@ (8007a80 <xTaskIncrementTick+0x154>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3301      	adds	r3, #1
 8007946:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007948:	4a4d      	ldr	r2, [pc, #308]	@ (8007a80 <xTaskIncrementTick+0x154>)
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d121      	bne.n	8007998 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007954:	4b4b      	ldr	r3, [pc, #300]	@ (8007a84 <xTaskIncrementTick+0x158>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00b      	beq.n	8007976 <xTaskIncrementTick+0x4a>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	603b      	str	r3, [r7, #0]
}
 8007970:	bf00      	nop
 8007972:	bf00      	nop
 8007974:	e7fd      	b.n	8007972 <xTaskIncrementTick+0x46>
 8007976:	4b43      	ldr	r3, [pc, #268]	@ (8007a84 <xTaskIncrementTick+0x158>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	4b42      	ldr	r3, [pc, #264]	@ (8007a88 <xTaskIncrementTick+0x15c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a40      	ldr	r2, [pc, #256]	@ (8007a84 <xTaskIncrementTick+0x158>)
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	4a40      	ldr	r2, [pc, #256]	@ (8007a88 <xTaskIncrementTick+0x15c>)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	4b40      	ldr	r3, [pc, #256]	@ (8007a8c <xTaskIncrementTick+0x160>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3301      	adds	r3, #1
 8007990:	4a3e      	ldr	r2, [pc, #248]	@ (8007a8c <xTaskIncrementTick+0x160>)
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	f000 faaa 	bl	8007eec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007998:	4b3d      	ldr	r3, [pc, #244]	@ (8007a90 <xTaskIncrementTick+0x164>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d34d      	bcc.n	8007a3e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079a2:	4b38      	ldr	r3, [pc, #224]	@ (8007a84 <xTaskIncrementTick+0x158>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <xTaskIncrementTick+0x84>
 80079ac:	2301      	movs	r3, #1
 80079ae:	e000      	b.n	80079b2 <xTaskIncrementTick+0x86>
 80079b0:	2300      	movs	r3, #0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d004      	beq.n	80079c0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079b6:	4b36      	ldr	r3, [pc, #216]	@ (8007a90 <xTaskIncrementTick+0x164>)
 80079b8:	f04f 32ff 	mov.w	r2, #4294967295
 80079bc:	601a      	str	r2, [r3, #0]
					break;
 80079be:	e03e      	b.n	8007a3e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80079c0:	4b30      	ldr	r3, [pc, #192]	@ (8007a84 <xTaskIncrementTick+0x158>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d203      	bcs.n	80079e0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079d8:	4a2d      	ldr	r2, [pc, #180]	@ (8007a90 <xTaskIncrementTick+0x164>)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6013      	str	r3, [r2, #0]
						break;
 80079de:	e02e      	b.n	8007a3e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	3304      	adds	r3, #4
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fe fb17 	bl	8006018 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d004      	beq.n	80079fc <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	3318      	adds	r3, #24
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fe fb0e 	bl	8006018 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a00:	2201      	movs	r2, #1
 8007a02:	409a      	lsls	r2, r3
 8007a04:	4b23      	ldr	r3, [pc, #140]	@ (8007a94 <xTaskIncrementTick+0x168>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	4a22      	ldr	r2, [pc, #136]	@ (8007a94 <xTaskIncrementTick+0x168>)
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8007a98 <xTaskIncrementTick+0x16c>)
 8007a1c:	441a      	add	r2, r3
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	3304      	adds	r3, #4
 8007a22:	4619      	mov	r1, r3
 8007a24:	4610      	mov	r0, r2
 8007a26:	f7fe fa9a 	bl	8005f5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8007a9c <xTaskIncrementTick+0x170>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d3b4      	bcc.n	80079a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a3c:	e7b1      	b.n	80079a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a3e:	4b17      	ldr	r3, [pc, #92]	@ (8007a9c <xTaskIncrementTick+0x170>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a44:	4914      	ldr	r1, [pc, #80]	@ (8007a98 <xTaskIncrementTick+0x16c>)
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	440b      	add	r3, r1
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d907      	bls.n	8007a66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007a56:	2301      	movs	r3, #1
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	e004      	b.n	8007a66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007a5c:	4b10      	ldr	r3, [pc, #64]	@ (8007aa0 <xTaskIncrementTick+0x174>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3301      	adds	r3, #1
 8007a62:	4a0f      	ldr	r2, [pc, #60]	@ (8007aa0 <xTaskIncrementTick+0x174>)
 8007a64:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a66:	4b0f      	ldr	r3, [pc, #60]	@ (8007aa4 <xTaskIncrementTick+0x178>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007a72:	697b      	ldr	r3, [r7, #20]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	200026f4 	.word	0x200026f4
 8007a80:	200026d0 	.word	0x200026d0
 8007a84:	20002684 	.word	0x20002684
 8007a88:	20002688 	.word	0x20002688
 8007a8c:	200026e4 	.word	0x200026e4
 8007a90:	200026ec 	.word	0x200026ec
 8007a94:	200026d4 	.word	0x200026d4
 8007a98:	200025d0 	.word	0x200025d0
 8007a9c:	200025cc 	.word	0x200025cc
 8007aa0:	200026dc 	.word	0x200026dc
 8007aa4:	200026e0 	.word	0x200026e0

08007aa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007aae:	4b27      	ldr	r3, [pc, #156]	@ (8007b4c <vTaskSwitchContext+0xa4>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ab6:	4b26      	ldr	r3, [pc, #152]	@ (8007b50 <vTaskSwitchContext+0xa8>)
 8007ab8:	2201      	movs	r2, #1
 8007aba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007abc:	e040      	b.n	8007b40 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007abe:	4b24      	ldr	r3, [pc, #144]	@ (8007b50 <vTaskSwitchContext+0xa8>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007ac4:	4b23      	ldr	r3, [pc, #140]	@ (8007b54 <vTaskSwitchContext+0xac>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	fab3 f383 	clz	r3, r3
 8007ad0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007ad2:	7afb      	ldrb	r3, [r7, #11]
 8007ad4:	f1c3 031f 	rsb	r3, r3, #31
 8007ad8:	617b      	str	r3, [r7, #20]
 8007ada:	491f      	ldr	r1, [pc, #124]	@ (8007b58 <vTaskSwitchContext+0xb0>)
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10b      	bne.n	8007b06 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	607b      	str	r3, [r7, #4]
}
 8007b00:	bf00      	nop
 8007b02:	bf00      	nop
 8007b04:	e7fd      	b.n	8007b02 <vTaskSwitchContext+0x5a>
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4a11      	ldr	r2, [pc, #68]	@ (8007b58 <vTaskSwitchContext+0xb0>)
 8007b12:	4413      	add	r3, r2
 8007b14:	613b      	str	r3, [r7, #16]
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	605a      	str	r2, [r3, #4]
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	3308      	adds	r3, #8
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d104      	bne.n	8007b36 <vTaskSwitchContext+0x8e>
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	605a      	str	r2, [r3, #4]
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	4a07      	ldr	r2, [pc, #28]	@ (8007b5c <vTaskSwitchContext+0xb4>)
 8007b3e:	6013      	str	r3, [r2, #0]
}
 8007b40:	bf00      	nop
 8007b42:	371c      	adds	r7, #28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	200026f4 	.word	0x200026f4
 8007b50:	200026e0 	.word	0x200026e0
 8007b54:	200026d4 	.word	0x200026d4
 8007b58:	200025d0 	.word	0x200025d0
 8007b5c:	200025cc 	.word	0x200025cc

08007b60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10b      	bne.n	8007b88 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	60fb      	str	r3, [r7, #12]
}
 8007b82:	bf00      	nop
 8007b84:	bf00      	nop
 8007b86:	e7fd      	b.n	8007b84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b88:	4b07      	ldr	r3, [pc, #28]	@ (8007ba8 <vTaskPlaceOnEventList+0x48>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3318      	adds	r3, #24
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7fe fa08 	bl	8005fa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b96:	2101      	movs	r1, #1
 8007b98:	6838      	ldr	r0, [r7, #0]
 8007b9a:	f000 fa73 	bl	8008084 <prvAddCurrentTaskToDelayedList>
}
 8007b9e:	bf00      	nop
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	200025cc 	.word	0x200025cc

08007bac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10b      	bne.n	8007bda <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	60fb      	str	r3, [r7, #12]
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop
 8007bd8:	e7fd      	b.n	8007bd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	3318      	adds	r3, #24
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fe fa1a 	bl	8006018 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007be4:	4b1d      	ldr	r3, [pc, #116]	@ (8007c5c <xTaskRemoveFromEventList+0xb0>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d11c      	bne.n	8007c26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	3304      	adds	r3, #4
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fe fa11 	bl	8006018 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	409a      	lsls	r2, r3
 8007bfe:	4b18      	ldr	r3, [pc, #96]	@ (8007c60 <xTaskRemoveFromEventList+0xb4>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	4a16      	ldr	r2, [pc, #88]	@ (8007c60 <xTaskRemoveFromEventList+0xb4>)
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4a13      	ldr	r2, [pc, #76]	@ (8007c64 <xTaskRemoveFromEventList+0xb8>)
 8007c16:	441a      	add	r2, r3
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4610      	mov	r0, r2
 8007c20:	f7fe f99d 	bl	8005f5e <vListInsertEnd>
 8007c24:	e005      	b.n	8007c32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	3318      	adds	r3, #24
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	480e      	ldr	r0, [pc, #56]	@ (8007c68 <xTaskRemoveFromEventList+0xbc>)
 8007c2e:	f7fe f996 	bl	8005f5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c36:	4b0d      	ldr	r3, [pc, #52]	@ (8007c6c <xTaskRemoveFromEventList+0xc0>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d905      	bls.n	8007c4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c40:	2301      	movs	r3, #1
 8007c42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c44:	4b0a      	ldr	r3, [pc, #40]	@ (8007c70 <xTaskRemoveFromEventList+0xc4>)
 8007c46:	2201      	movs	r2, #1
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	e001      	b.n	8007c50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007c50:	697b      	ldr	r3, [r7, #20]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	200026f4 	.word	0x200026f4
 8007c60:	200026d4 	.word	0x200026d4
 8007c64:	200025d0 	.word	0x200025d0
 8007c68:	2000268c 	.word	0x2000268c
 8007c6c:	200025cc 	.word	0x200025cc
 8007c70:	200026e0 	.word	0x200026e0

08007c74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c7c:	4b06      	ldr	r3, [pc, #24]	@ (8007c98 <vTaskInternalSetTimeOutState+0x24>)
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c84:	4b05      	ldr	r3, [pc, #20]	@ (8007c9c <vTaskInternalSetTimeOutState+0x28>)
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	605a      	str	r2, [r3, #4]
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	200026e4 	.word	0x200026e4
 8007c9c:	200026d0 	.word	0x200026d0

08007ca0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b088      	sub	sp, #32
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10b      	bne.n	8007cc8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	613b      	str	r3, [r7, #16]
}
 8007cc2:	bf00      	nop
 8007cc4:	bf00      	nop
 8007cc6:	e7fd      	b.n	8007cc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10b      	bne.n	8007ce6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	60fb      	str	r3, [r7, #12]
}
 8007ce0:	bf00      	nop
 8007ce2:	bf00      	nop
 8007ce4:	e7fd      	b.n	8007ce2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007ce6:	f7fe faef 	bl	80062c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cea:	4b1d      	ldr	r3, [pc, #116]	@ (8007d60 <xTaskCheckForTimeOut+0xc0>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d02:	d102      	bne.n	8007d0a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d04:	2300      	movs	r3, #0
 8007d06:	61fb      	str	r3, [r7, #28]
 8007d08:	e023      	b.n	8007d52 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	4b15      	ldr	r3, [pc, #84]	@ (8007d64 <xTaskCheckForTimeOut+0xc4>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d007      	beq.n	8007d26 <xTaskCheckForTimeOut+0x86>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d302      	bcc.n	8007d26 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d20:	2301      	movs	r3, #1
 8007d22:	61fb      	str	r3, [r7, #28]
 8007d24:	e015      	b.n	8007d52 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d20b      	bcs.n	8007d48 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	1ad2      	subs	r2, r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff ff99 	bl	8007c74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61fb      	str	r3, [r7, #28]
 8007d46:	e004      	b.n	8007d52 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d52:	f7fe faeb 	bl	800632c <vPortExitCritical>

	return xReturn;
 8007d56:	69fb      	ldr	r3, [r7, #28]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3720      	adds	r7, #32
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	200026d0 	.word	0x200026d0
 8007d64:	200026e4 	.word	0x200026e4

08007d68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d6c:	4b03      	ldr	r3, [pc, #12]	@ (8007d7c <vTaskMissedYield+0x14>)
 8007d6e:	2201      	movs	r2, #1
 8007d70:	601a      	str	r2, [r3, #0]
}
 8007d72:	bf00      	nop
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	200026e0 	.word	0x200026e0

08007d80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d88:	f000 f852 	bl	8007e30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d8c:	4b06      	ldr	r3, [pc, #24]	@ (8007da8 <prvIdleTask+0x28>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d9f9      	bls.n	8007d88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d94:	4b05      	ldr	r3, [pc, #20]	@ (8007dac <prvIdleTask+0x2c>)
 8007d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007da4:	e7f0      	b.n	8007d88 <prvIdleTask+0x8>
 8007da6:	bf00      	nop
 8007da8:	200025d0 	.word	0x200025d0
 8007dac:	e000ed04 	.word	0xe000ed04

08007db0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007db6:	2300      	movs	r3, #0
 8007db8:	607b      	str	r3, [r7, #4]
 8007dba:	e00c      	b.n	8007dd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4a12      	ldr	r2, [pc, #72]	@ (8007e10 <prvInitialiseTaskLists+0x60>)
 8007dc8:	4413      	add	r3, r2
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe f89a 	bl	8005f04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	607b      	str	r3, [r7, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b06      	cmp	r3, #6
 8007dda:	d9ef      	bls.n	8007dbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ddc:	480d      	ldr	r0, [pc, #52]	@ (8007e14 <prvInitialiseTaskLists+0x64>)
 8007dde:	f7fe f891 	bl	8005f04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007de2:	480d      	ldr	r0, [pc, #52]	@ (8007e18 <prvInitialiseTaskLists+0x68>)
 8007de4:	f7fe f88e 	bl	8005f04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007de8:	480c      	ldr	r0, [pc, #48]	@ (8007e1c <prvInitialiseTaskLists+0x6c>)
 8007dea:	f7fe f88b 	bl	8005f04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dee:	480c      	ldr	r0, [pc, #48]	@ (8007e20 <prvInitialiseTaskLists+0x70>)
 8007df0:	f7fe f888 	bl	8005f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007df4:	480b      	ldr	r0, [pc, #44]	@ (8007e24 <prvInitialiseTaskLists+0x74>)
 8007df6:	f7fe f885 	bl	8005f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8007e28 <prvInitialiseTaskLists+0x78>)
 8007dfc:	4a05      	ldr	r2, [pc, #20]	@ (8007e14 <prvInitialiseTaskLists+0x64>)
 8007dfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e00:	4b0a      	ldr	r3, [pc, #40]	@ (8007e2c <prvInitialiseTaskLists+0x7c>)
 8007e02:	4a05      	ldr	r2, [pc, #20]	@ (8007e18 <prvInitialiseTaskLists+0x68>)
 8007e04:	601a      	str	r2, [r3, #0]
}
 8007e06:	bf00      	nop
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	200025d0 	.word	0x200025d0
 8007e14:	2000265c 	.word	0x2000265c
 8007e18:	20002670 	.word	0x20002670
 8007e1c:	2000268c 	.word	0x2000268c
 8007e20:	200026a0 	.word	0x200026a0
 8007e24:	200026b8 	.word	0x200026b8
 8007e28:	20002684 	.word	0x20002684
 8007e2c:	20002688 	.word	0x20002688

08007e30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e36:	e019      	b.n	8007e6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e38:	f7fe fa46 	bl	80062c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007e3c:	4b10      	ldr	r3, [pc, #64]	@ (8007e80 <prvCheckTasksWaitingTermination+0x50>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3304      	adds	r3, #4
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe f8e5 	bl	8006018 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e84 <prvCheckTasksWaitingTermination+0x54>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	4a0b      	ldr	r2, [pc, #44]	@ (8007e84 <prvCheckTasksWaitingTermination+0x54>)
 8007e56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e58:	4b0b      	ldr	r3, [pc, #44]	@ (8007e88 <prvCheckTasksWaitingTermination+0x58>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8007e88 <prvCheckTasksWaitingTermination+0x58>)
 8007e60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e62:	f7fe fa63 	bl	800632c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f810 	bl	8007e8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e6c:	4b06      	ldr	r3, [pc, #24]	@ (8007e88 <prvCheckTasksWaitingTermination+0x58>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e1      	bne.n	8007e38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	200026a0 	.word	0x200026a0
 8007e84:	200026cc 	.word	0x200026cc
 8007e88:	200026b4 	.word	0x200026b4

08007e8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d108      	bne.n	8007eb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fd ff16 	bl	8005cd4 <vPortFree>
				vPortFree( pxTCB );
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7fd ff13 	bl	8005cd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007eae:	e019      	b.n	8007ee4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d103      	bne.n	8007ec2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7fd ff0a 	bl	8005cd4 <vPortFree>
	}
 8007ec0:	e010      	b.n	8007ee4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d00b      	beq.n	8007ee4 <prvDeleteTCB+0x58>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	60fb      	str	r3, [r7, #12]
}
 8007ede:	bf00      	nop
 8007ee0:	bf00      	nop
 8007ee2:	e7fd      	b.n	8007ee0 <prvDeleteTCB+0x54>
	}
 8007ee4:	bf00      	nop
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8007f30 <prvResetNextTaskUnblockTime+0x44>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <prvResetNextTaskUnblockTime+0x14>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e000      	b.n	8007f02 <prvResetNextTaskUnblockTime+0x16>
 8007f00:	2300      	movs	r3, #0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d004      	beq.n	8007f10 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f06:	4b0b      	ldr	r3, [pc, #44]	@ (8007f34 <prvResetNextTaskUnblockTime+0x48>)
 8007f08:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f0e:	e008      	b.n	8007f22 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f10:	4b07      	ldr	r3, [pc, #28]	@ (8007f30 <prvResetNextTaskUnblockTime+0x44>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	4a05      	ldr	r2, [pc, #20]	@ (8007f34 <prvResetNextTaskUnblockTime+0x48>)
 8007f20:	6013      	str	r3, [r2, #0]
}
 8007f22:	bf00      	nop
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	20002684 	.word	0x20002684
 8007f34:	200026ec 	.word	0x200026ec

08007f38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f6c <xTaskGetSchedulerState+0x34>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d102      	bne.n	8007f4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f46:	2301      	movs	r3, #1
 8007f48:	607b      	str	r3, [r7, #4]
 8007f4a:	e008      	b.n	8007f5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f4c:	4b08      	ldr	r3, [pc, #32]	@ (8007f70 <xTaskGetSchedulerState+0x38>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d102      	bne.n	8007f5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f54:	2302      	movs	r3, #2
 8007f56:	607b      	str	r3, [r7, #4]
 8007f58:	e001      	b.n	8007f5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f5e:	687b      	ldr	r3, [r7, #4]
	}
 8007f60:	4618      	mov	r0, r3
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	200026d8 	.word	0x200026d8
 8007f70:	200026f4 	.word	0x200026f4

08007f74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f80:	2300      	movs	r3, #0
 8007f82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d070      	beq.n	800806c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8008078 <xTaskPriorityDisinherit+0x104>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d00b      	beq.n	8007fac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	60fb      	str	r3, [r7, #12]
}
 8007fa6:	bf00      	nop
 8007fa8:	bf00      	nop
 8007faa:	e7fd      	b.n	8007fa8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10b      	bne.n	8007fcc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	60bb      	str	r3, [r7, #8]
}
 8007fc6:	bf00      	nop
 8007fc8:	bf00      	nop
 8007fca:	e7fd      	b.n	8007fc8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fd0:	1e5a      	subs	r2, r3, #1
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d044      	beq.n	800806c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d140      	bne.n	800806c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	3304      	adds	r3, #4
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe f812 	bl	8006018 <uxListRemove>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d115      	bne.n	8008026 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ffe:	491f      	ldr	r1, [pc, #124]	@ (800807c <xTaskPriorityDisinherit+0x108>)
 8008000:	4613      	mov	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	440b      	add	r3, r1
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <xTaskPriorityDisinherit+0xb2>
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008014:	2201      	movs	r2, #1
 8008016:	fa02 f303 	lsl.w	r3, r2, r3
 800801a:	43da      	mvns	r2, r3
 800801c:	4b18      	ldr	r3, [pc, #96]	@ (8008080 <xTaskPriorityDisinherit+0x10c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4013      	ands	r3, r2
 8008022:	4a17      	ldr	r2, [pc, #92]	@ (8008080 <xTaskPriorityDisinherit+0x10c>)
 8008024:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008032:	f1c3 0207 	rsb	r2, r3, #7
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803e:	2201      	movs	r2, #1
 8008040:	409a      	lsls	r2, r3
 8008042:	4b0f      	ldr	r3, [pc, #60]	@ (8008080 <xTaskPriorityDisinherit+0x10c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4313      	orrs	r3, r2
 8008048:	4a0d      	ldr	r2, [pc, #52]	@ (8008080 <xTaskPriorityDisinherit+0x10c>)
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4a08      	ldr	r2, [pc, #32]	@ (800807c <xTaskPriorityDisinherit+0x108>)
 800805a:	441a      	add	r2, r3
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	3304      	adds	r3, #4
 8008060:	4619      	mov	r1, r3
 8008062:	4610      	mov	r0, r2
 8008064:	f7fd ff7b 	bl	8005f5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008068:	2301      	movs	r3, #1
 800806a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800806c:	697b      	ldr	r3, [r7, #20]
	}
 800806e:	4618      	mov	r0, r3
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	200025cc 	.word	0x200025cc
 800807c:	200025d0 	.word	0x200025d0
 8008080:	200026d4 	.word	0x200026d4

08008084 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800808e:	4b29      	ldr	r3, [pc, #164]	@ (8008134 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008094:	4b28      	ldr	r3, [pc, #160]	@ (8008138 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3304      	adds	r3, #4
 800809a:	4618      	mov	r0, r3
 800809c:	f7fd ffbc 	bl	8006018 <uxListRemove>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10b      	bne.n	80080be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80080a6:	4b24      	ldr	r3, [pc, #144]	@ (8008138 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ac:	2201      	movs	r2, #1
 80080ae:	fa02 f303 	lsl.w	r3, r2, r3
 80080b2:	43da      	mvns	r2, r3
 80080b4:	4b21      	ldr	r3, [pc, #132]	@ (800813c <prvAddCurrentTaskToDelayedList+0xb8>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4013      	ands	r3, r2
 80080ba:	4a20      	ldr	r2, [pc, #128]	@ (800813c <prvAddCurrentTaskToDelayedList+0xb8>)
 80080bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c4:	d10a      	bne.n	80080dc <prvAddCurrentTaskToDelayedList+0x58>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d007      	beq.n	80080dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008138 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3304      	adds	r3, #4
 80080d2:	4619      	mov	r1, r3
 80080d4:	481a      	ldr	r0, [pc, #104]	@ (8008140 <prvAddCurrentTaskToDelayedList+0xbc>)
 80080d6:	f7fd ff42 	bl	8005f5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080da:	e026      	b.n	800812a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4413      	add	r3, r2
 80080e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080e4:	4b14      	ldr	r3, [pc, #80]	@ (8008138 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d209      	bcs.n	8008108 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080f4:	4b13      	ldr	r3, [pc, #76]	@ (8008144 <prvAddCurrentTaskToDelayedList+0xc0>)
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008138 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3304      	adds	r3, #4
 80080fe:	4619      	mov	r1, r3
 8008100:	4610      	mov	r0, r2
 8008102:	f7fd ff50 	bl	8005fa6 <vListInsert>
}
 8008106:	e010      	b.n	800812a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008108:	4b0f      	ldr	r3, [pc, #60]	@ (8008148 <prvAddCurrentTaskToDelayedList+0xc4>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	4b0a      	ldr	r3, [pc, #40]	@ (8008138 <prvAddCurrentTaskToDelayedList+0xb4>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3304      	adds	r3, #4
 8008112:	4619      	mov	r1, r3
 8008114:	4610      	mov	r0, r2
 8008116:	f7fd ff46 	bl	8005fa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800811a:	4b0c      	ldr	r3, [pc, #48]	@ (800814c <prvAddCurrentTaskToDelayedList+0xc8>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	429a      	cmp	r2, r3
 8008122:	d202      	bcs.n	800812a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008124:	4a09      	ldr	r2, [pc, #36]	@ (800814c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	6013      	str	r3, [r2, #0]
}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	200026d0 	.word	0x200026d0
 8008138:	200025cc 	.word	0x200025cc
 800813c:	200026d4 	.word	0x200026d4
 8008140:	200026b8 	.word	0x200026b8
 8008144:	20002688 	.word	0x20002688
 8008148:	20002684 	.word	0x20002684
 800814c:	200026ec 	.word	0x200026ec

08008150 <malloc>:
 8008150:	4b02      	ldr	r3, [pc, #8]	@ (800815c <malloc+0xc>)
 8008152:	4601      	mov	r1, r0
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	f000 b82d 	b.w	80081b4 <_malloc_r>
 800815a:	bf00      	nop
 800815c:	2000001c 	.word	0x2000001c

08008160 <free>:
 8008160:	4b02      	ldr	r3, [pc, #8]	@ (800816c <free+0xc>)
 8008162:	4601      	mov	r1, r0
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	f000 bb43 	b.w	80087f0 <_free_r>
 800816a:	bf00      	nop
 800816c:	2000001c 	.word	0x2000001c

08008170 <sbrk_aligned>:
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	4e0f      	ldr	r6, [pc, #60]	@ (80081b0 <sbrk_aligned+0x40>)
 8008174:	460c      	mov	r4, r1
 8008176:	6831      	ldr	r1, [r6, #0]
 8008178:	4605      	mov	r5, r0
 800817a:	b911      	cbnz	r1, 8008182 <sbrk_aligned+0x12>
 800817c:	f000 fada 	bl	8008734 <_sbrk_r>
 8008180:	6030      	str	r0, [r6, #0]
 8008182:	4621      	mov	r1, r4
 8008184:	4628      	mov	r0, r5
 8008186:	f000 fad5 	bl	8008734 <_sbrk_r>
 800818a:	1c43      	adds	r3, r0, #1
 800818c:	d103      	bne.n	8008196 <sbrk_aligned+0x26>
 800818e:	f04f 34ff 	mov.w	r4, #4294967295
 8008192:	4620      	mov	r0, r4
 8008194:	bd70      	pop	{r4, r5, r6, pc}
 8008196:	1cc4      	adds	r4, r0, #3
 8008198:	f024 0403 	bic.w	r4, r4, #3
 800819c:	42a0      	cmp	r0, r4
 800819e:	d0f8      	beq.n	8008192 <sbrk_aligned+0x22>
 80081a0:	1a21      	subs	r1, r4, r0
 80081a2:	4628      	mov	r0, r5
 80081a4:	f000 fac6 	bl	8008734 <_sbrk_r>
 80081a8:	3001      	adds	r0, #1
 80081aa:	d1f2      	bne.n	8008192 <sbrk_aligned+0x22>
 80081ac:	e7ef      	b.n	800818e <sbrk_aligned+0x1e>
 80081ae:	bf00      	nop
 80081b0:	200026f8 	.word	0x200026f8

080081b4 <_malloc_r>:
 80081b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b8:	1ccd      	adds	r5, r1, #3
 80081ba:	f025 0503 	bic.w	r5, r5, #3
 80081be:	3508      	adds	r5, #8
 80081c0:	2d0c      	cmp	r5, #12
 80081c2:	bf38      	it	cc
 80081c4:	250c      	movcc	r5, #12
 80081c6:	2d00      	cmp	r5, #0
 80081c8:	4606      	mov	r6, r0
 80081ca:	db01      	blt.n	80081d0 <_malloc_r+0x1c>
 80081cc:	42a9      	cmp	r1, r5
 80081ce:	d904      	bls.n	80081da <_malloc_r+0x26>
 80081d0:	230c      	movs	r3, #12
 80081d2:	6033      	str	r3, [r6, #0]
 80081d4:	2000      	movs	r0, #0
 80081d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082b0 <_malloc_r+0xfc>
 80081de:	f000 f869 	bl	80082b4 <__malloc_lock>
 80081e2:	f8d8 3000 	ldr.w	r3, [r8]
 80081e6:	461c      	mov	r4, r3
 80081e8:	bb44      	cbnz	r4, 800823c <_malloc_r+0x88>
 80081ea:	4629      	mov	r1, r5
 80081ec:	4630      	mov	r0, r6
 80081ee:	f7ff ffbf 	bl	8008170 <sbrk_aligned>
 80081f2:	1c43      	adds	r3, r0, #1
 80081f4:	4604      	mov	r4, r0
 80081f6:	d158      	bne.n	80082aa <_malloc_r+0xf6>
 80081f8:	f8d8 4000 	ldr.w	r4, [r8]
 80081fc:	4627      	mov	r7, r4
 80081fe:	2f00      	cmp	r7, #0
 8008200:	d143      	bne.n	800828a <_malloc_r+0xd6>
 8008202:	2c00      	cmp	r4, #0
 8008204:	d04b      	beq.n	800829e <_malloc_r+0xea>
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	4639      	mov	r1, r7
 800820a:	4630      	mov	r0, r6
 800820c:	eb04 0903 	add.w	r9, r4, r3
 8008210:	f000 fa90 	bl	8008734 <_sbrk_r>
 8008214:	4581      	cmp	r9, r0
 8008216:	d142      	bne.n	800829e <_malloc_r+0xea>
 8008218:	6821      	ldr	r1, [r4, #0]
 800821a:	1a6d      	subs	r5, r5, r1
 800821c:	4629      	mov	r1, r5
 800821e:	4630      	mov	r0, r6
 8008220:	f7ff ffa6 	bl	8008170 <sbrk_aligned>
 8008224:	3001      	adds	r0, #1
 8008226:	d03a      	beq.n	800829e <_malloc_r+0xea>
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	442b      	add	r3, r5
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	f8d8 3000 	ldr.w	r3, [r8]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	bb62      	cbnz	r2, 8008290 <_malloc_r+0xdc>
 8008236:	f8c8 7000 	str.w	r7, [r8]
 800823a:	e00f      	b.n	800825c <_malloc_r+0xa8>
 800823c:	6822      	ldr	r2, [r4, #0]
 800823e:	1b52      	subs	r2, r2, r5
 8008240:	d420      	bmi.n	8008284 <_malloc_r+0xd0>
 8008242:	2a0b      	cmp	r2, #11
 8008244:	d917      	bls.n	8008276 <_malloc_r+0xc2>
 8008246:	1961      	adds	r1, r4, r5
 8008248:	42a3      	cmp	r3, r4
 800824a:	6025      	str	r5, [r4, #0]
 800824c:	bf18      	it	ne
 800824e:	6059      	strne	r1, [r3, #4]
 8008250:	6863      	ldr	r3, [r4, #4]
 8008252:	bf08      	it	eq
 8008254:	f8c8 1000 	streq.w	r1, [r8]
 8008258:	5162      	str	r2, [r4, r5]
 800825a:	604b      	str	r3, [r1, #4]
 800825c:	4630      	mov	r0, r6
 800825e:	f000 f82f 	bl	80082c0 <__malloc_unlock>
 8008262:	f104 000b 	add.w	r0, r4, #11
 8008266:	1d23      	adds	r3, r4, #4
 8008268:	f020 0007 	bic.w	r0, r0, #7
 800826c:	1ac2      	subs	r2, r0, r3
 800826e:	bf1c      	itt	ne
 8008270:	1a1b      	subne	r3, r3, r0
 8008272:	50a3      	strne	r3, [r4, r2]
 8008274:	e7af      	b.n	80081d6 <_malloc_r+0x22>
 8008276:	6862      	ldr	r2, [r4, #4]
 8008278:	42a3      	cmp	r3, r4
 800827a:	bf0c      	ite	eq
 800827c:	f8c8 2000 	streq.w	r2, [r8]
 8008280:	605a      	strne	r2, [r3, #4]
 8008282:	e7eb      	b.n	800825c <_malloc_r+0xa8>
 8008284:	4623      	mov	r3, r4
 8008286:	6864      	ldr	r4, [r4, #4]
 8008288:	e7ae      	b.n	80081e8 <_malloc_r+0x34>
 800828a:	463c      	mov	r4, r7
 800828c:	687f      	ldr	r7, [r7, #4]
 800828e:	e7b6      	b.n	80081fe <_malloc_r+0x4a>
 8008290:	461a      	mov	r2, r3
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	42a3      	cmp	r3, r4
 8008296:	d1fb      	bne.n	8008290 <_malloc_r+0xdc>
 8008298:	2300      	movs	r3, #0
 800829a:	6053      	str	r3, [r2, #4]
 800829c:	e7de      	b.n	800825c <_malloc_r+0xa8>
 800829e:	230c      	movs	r3, #12
 80082a0:	6033      	str	r3, [r6, #0]
 80082a2:	4630      	mov	r0, r6
 80082a4:	f000 f80c 	bl	80082c0 <__malloc_unlock>
 80082a8:	e794      	b.n	80081d4 <_malloc_r+0x20>
 80082aa:	6005      	str	r5, [r0, #0]
 80082ac:	e7d6      	b.n	800825c <_malloc_r+0xa8>
 80082ae:	bf00      	nop
 80082b0:	200026fc 	.word	0x200026fc

080082b4 <__malloc_lock>:
 80082b4:	4801      	ldr	r0, [pc, #4]	@ (80082bc <__malloc_lock+0x8>)
 80082b6:	f000 ba8a 	b.w	80087ce <__retarget_lock_acquire_recursive>
 80082ba:	bf00      	nop
 80082bc:	20002840 	.word	0x20002840

080082c0 <__malloc_unlock>:
 80082c0:	4801      	ldr	r0, [pc, #4]	@ (80082c8 <__malloc_unlock+0x8>)
 80082c2:	f000 ba85 	b.w	80087d0 <__retarget_lock_release_recursive>
 80082c6:	bf00      	nop
 80082c8:	20002840 	.word	0x20002840

080082cc <std>:
 80082cc:	2300      	movs	r3, #0
 80082ce:	b510      	push	{r4, lr}
 80082d0:	4604      	mov	r4, r0
 80082d2:	e9c0 3300 	strd	r3, r3, [r0]
 80082d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082da:	6083      	str	r3, [r0, #8]
 80082dc:	8181      	strh	r1, [r0, #12]
 80082de:	6643      	str	r3, [r0, #100]	@ 0x64
 80082e0:	81c2      	strh	r2, [r0, #14]
 80082e2:	6183      	str	r3, [r0, #24]
 80082e4:	4619      	mov	r1, r3
 80082e6:	2208      	movs	r2, #8
 80082e8:	305c      	adds	r0, #92	@ 0x5c
 80082ea:	f000 f9e7 	bl	80086bc <memset>
 80082ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008324 <std+0x58>)
 80082f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80082f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008328 <std+0x5c>)
 80082f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80082f6:	4b0d      	ldr	r3, [pc, #52]	@ (800832c <std+0x60>)
 80082f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80082fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008330 <std+0x64>)
 80082fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80082fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008334 <std+0x68>)
 8008300:	6224      	str	r4, [r4, #32]
 8008302:	429c      	cmp	r4, r3
 8008304:	d006      	beq.n	8008314 <std+0x48>
 8008306:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800830a:	4294      	cmp	r4, r2
 800830c:	d002      	beq.n	8008314 <std+0x48>
 800830e:	33d0      	adds	r3, #208	@ 0xd0
 8008310:	429c      	cmp	r4, r3
 8008312:	d105      	bne.n	8008320 <std+0x54>
 8008314:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800831c:	f000 ba56 	b.w	80087cc <__retarget_lock_init_recursive>
 8008320:	bd10      	pop	{r4, pc}
 8008322:	bf00      	nop
 8008324:	0800850d 	.word	0x0800850d
 8008328:	0800852f 	.word	0x0800852f
 800832c:	08008567 	.word	0x08008567
 8008330:	0800858b 	.word	0x0800858b
 8008334:	20002700 	.word	0x20002700

08008338 <stdio_exit_handler>:
 8008338:	4a02      	ldr	r2, [pc, #8]	@ (8008344 <stdio_exit_handler+0xc>)
 800833a:	4903      	ldr	r1, [pc, #12]	@ (8008348 <stdio_exit_handler+0x10>)
 800833c:	4803      	ldr	r0, [pc, #12]	@ (800834c <stdio_exit_handler+0x14>)
 800833e:	f000 b869 	b.w	8008414 <_fwalk_sglue>
 8008342:	bf00      	nop
 8008344:	20000010 	.word	0x20000010
 8008348:	0800898d 	.word	0x0800898d
 800834c:	20000020 	.word	0x20000020

08008350 <cleanup_stdio>:
 8008350:	6841      	ldr	r1, [r0, #4]
 8008352:	4b0c      	ldr	r3, [pc, #48]	@ (8008384 <cleanup_stdio+0x34>)
 8008354:	4299      	cmp	r1, r3
 8008356:	b510      	push	{r4, lr}
 8008358:	4604      	mov	r4, r0
 800835a:	d001      	beq.n	8008360 <cleanup_stdio+0x10>
 800835c:	f000 fb16 	bl	800898c <_fflush_r>
 8008360:	68a1      	ldr	r1, [r4, #8]
 8008362:	4b09      	ldr	r3, [pc, #36]	@ (8008388 <cleanup_stdio+0x38>)
 8008364:	4299      	cmp	r1, r3
 8008366:	d002      	beq.n	800836e <cleanup_stdio+0x1e>
 8008368:	4620      	mov	r0, r4
 800836a:	f000 fb0f 	bl	800898c <_fflush_r>
 800836e:	68e1      	ldr	r1, [r4, #12]
 8008370:	4b06      	ldr	r3, [pc, #24]	@ (800838c <cleanup_stdio+0x3c>)
 8008372:	4299      	cmp	r1, r3
 8008374:	d004      	beq.n	8008380 <cleanup_stdio+0x30>
 8008376:	4620      	mov	r0, r4
 8008378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800837c:	f000 bb06 	b.w	800898c <_fflush_r>
 8008380:	bd10      	pop	{r4, pc}
 8008382:	bf00      	nop
 8008384:	20002700 	.word	0x20002700
 8008388:	20002768 	.word	0x20002768
 800838c:	200027d0 	.word	0x200027d0

08008390 <global_stdio_init.part.0>:
 8008390:	b510      	push	{r4, lr}
 8008392:	4b0b      	ldr	r3, [pc, #44]	@ (80083c0 <global_stdio_init.part.0+0x30>)
 8008394:	4c0b      	ldr	r4, [pc, #44]	@ (80083c4 <global_stdio_init.part.0+0x34>)
 8008396:	4a0c      	ldr	r2, [pc, #48]	@ (80083c8 <global_stdio_init.part.0+0x38>)
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	4620      	mov	r0, r4
 800839c:	2200      	movs	r2, #0
 800839e:	2104      	movs	r1, #4
 80083a0:	f7ff ff94 	bl	80082cc <std>
 80083a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80083a8:	2201      	movs	r2, #1
 80083aa:	2109      	movs	r1, #9
 80083ac:	f7ff ff8e 	bl	80082cc <std>
 80083b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80083b4:	2202      	movs	r2, #2
 80083b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083ba:	2112      	movs	r1, #18
 80083bc:	f7ff bf86 	b.w	80082cc <std>
 80083c0:	20002838 	.word	0x20002838
 80083c4:	20002700 	.word	0x20002700
 80083c8:	08008339 	.word	0x08008339

080083cc <__sfp_lock_acquire>:
 80083cc:	4801      	ldr	r0, [pc, #4]	@ (80083d4 <__sfp_lock_acquire+0x8>)
 80083ce:	f000 b9fe 	b.w	80087ce <__retarget_lock_acquire_recursive>
 80083d2:	bf00      	nop
 80083d4:	20002841 	.word	0x20002841

080083d8 <__sfp_lock_release>:
 80083d8:	4801      	ldr	r0, [pc, #4]	@ (80083e0 <__sfp_lock_release+0x8>)
 80083da:	f000 b9f9 	b.w	80087d0 <__retarget_lock_release_recursive>
 80083de:	bf00      	nop
 80083e0:	20002841 	.word	0x20002841

080083e4 <__sinit>:
 80083e4:	b510      	push	{r4, lr}
 80083e6:	4604      	mov	r4, r0
 80083e8:	f7ff fff0 	bl	80083cc <__sfp_lock_acquire>
 80083ec:	6a23      	ldr	r3, [r4, #32]
 80083ee:	b11b      	cbz	r3, 80083f8 <__sinit+0x14>
 80083f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083f4:	f7ff bff0 	b.w	80083d8 <__sfp_lock_release>
 80083f8:	4b04      	ldr	r3, [pc, #16]	@ (800840c <__sinit+0x28>)
 80083fa:	6223      	str	r3, [r4, #32]
 80083fc:	4b04      	ldr	r3, [pc, #16]	@ (8008410 <__sinit+0x2c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1f5      	bne.n	80083f0 <__sinit+0xc>
 8008404:	f7ff ffc4 	bl	8008390 <global_stdio_init.part.0>
 8008408:	e7f2      	b.n	80083f0 <__sinit+0xc>
 800840a:	bf00      	nop
 800840c:	08008351 	.word	0x08008351
 8008410:	20002838 	.word	0x20002838

08008414 <_fwalk_sglue>:
 8008414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008418:	4607      	mov	r7, r0
 800841a:	4688      	mov	r8, r1
 800841c:	4614      	mov	r4, r2
 800841e:	2600      	movs	r6, #0
 8008420:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008424:	f1b9 0901 	subs.w	r9, r9, #1
 8008428:	d505      	bpl.n	8008436 <_fwalk_sglue+0x22>
 800842a:	6824      	ldr	r4, [r4, #0]
 800842c:	2c00      	cmp	r4, #0
 800842e:	d1f7      	bne.n	8008420 <_fwalk_sglue+0xc>
 8008430:	4630      	mov	r0, r6
 8008432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008436:	89ab      	ldrh	r3, [r5, #12]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d907      	bls.n	800844c <_fwalk_sglue+0x38>
 800843c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008440:	3301      	adds	r3, #1
 8008442:	d003      	beq.n	800844c <_fwalk_sglue+0x38>
 8008444:	4629      	mov	r1, r5
 8008446:	4638      	mov	r0, r7
 8008448:	47c0      	blx	r8
 800844a:	4306      	orrs	r6, r0
 800844c:	3568      	adds	r5, #104	@ 0x68
 800844e:	e7e9      	b.n	8008424 <_fwalk_sglue+0x10>

08008450 <_puts_r>:
 8008450:	6a03      	ldr	r3, [r0, #32]
 8008452:	b570      	push	{r4, r5, r6, lr}
 8008454:	6884      	ldr	r4, [r0, #8]
 8008456:	4605      	mov	r5, r0
 8008458:	460e      	mov	r6, r1
 800845a:	b90b      	cbnz	r3, 8008460 <_puts_r+0x10>
 800845c:	f7ff ffc2 	bl	80083e4 <__sinit>
 8008460:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008462:	07db      	lsls	r3, r3, #31
 8008464:	d405      	bmi.n	8008472 <_puts_r+0x22>
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	0598      	lsls	r0, r3, #22
 800846a:	d402      	bmi.n	8008472 <_puts_r+0x22>
 800846c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800846e:	f000 f9ae 	bl	80087ce <__retarget_lock_acquire_recursive>
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	0719      	lsls	r1, r3, #28
 8008476:	d502      	bpl.n	800847e <_puts_r+0x2e>
 8008478:	6923      	ldr	r3, [r4, #16]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d135      	bne.n	80084ea <_puts_r+0x9a>
 800847e:	4621      	mov	r1, r4
 8008480:	4628      	mov	r0, r5
 8008482:	f000 f8c5 	bl	8008610 <__swsetup_r>
 8008486:	b380      	cbz	r0, 80084ea <_puts_r+0x9a>
 8008488:	f04f 35ff 	mov.w	r5, #4294967295
 800848c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800848e:	07da      	lsls	r2, r3, #31
 8008490:	d405      	bmi.n	800849e <_puts_r+0x4e>
 8008492:	89a3      	ldrh	r3, [r4, #12]
 8008494:	059b      	lsls	r3, r3, #22
 8008496:	d402      	bmi.n	800849e <_puts_r+0x4e>
 8008498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800849a:	f000 f999 	bl	80087d0 <__retarget_lock_release_recursive>
 800849e:	4628      	mov	r0, r5
 80084a0:	bd70      	pop	{r4, r5, r6, pc}
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	da04      	bge.n	80084b0 <_puts_r+0x60>
 80084a6:	69a2      	ldr	r2, [r4, #24]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	dc17      	bgt.n	80084dc <_puts_r+0x8c>
 80084ac:	290a      	cmp	r1, #10
 80084ae:	d015      	beq.n	80084dc <_puts_r+0x8c>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	6022      	str	r2, [r4, #0]
 80084b6:	7019      	strb	r1, [r3, #0]
 80084b8:	68a3      	ldr	r3, [r4, #8]
 80084ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084be:	3b01      	subs	r3, #1
 80084c0:	60a3      	str	r3, [r4, #8]
 80084c2:	2900      	cmp	r1, #0
 80084c4:	d1ed      	bne.n	80084a2 <_puts_r+0x52>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	da11      	bge.n	80084ee <_puts_r+0x9e>
 80084ca:	4622      	mov	r2, r4
 80084cc:	210a      	movs	r1, #10
 80084ce:	4628      	mov	r0, r5
 80084d0:	f000 f85f 	bl	8008592 <__swbuf_r>
 80084d4:	3001      	adds	r0, #1
 80084d6:	d0d7      	beq.n	8008488 <_puts_r+0x38>
 80084d8:	250a      	movs	r5, #10
 80084da:	e7d7      	b.n	800848c <_puts_r+0x3c>
 80084dc:	4622      	mov	r2, r4
 80084de:	4628      	mov	r0, r5
 80084e0:	f000 f857 	bl	8008592 <__swbuf_r>
 80084e4:	3001      	adds	r0, #1
 80084e6:	d1e7      	bne.n	80084b8 <_puts_r+0x68>
 80084e8:	e7ce      	b.n	8008488 <_puts_r+0x38>
 80084ea:	3e01      	subs	r6, #1
 80084ec:	e7e4      	b.n	80084b8 <_puts_r+0x68>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	6022      	str	r2, [r4, #0]
 80084f4:	220a      	movs	r2, #10
 80084f6:	701a      	strb	r2, [r3, #0]
 80084f8:	e7ee      	b.n	80084d8 <_puts_r+0x88>
	...

080084fc <puts>:
 80084fc:	4b02      	ldr	r3, [pc, #8]	@ (8008508 <puts+0xc>)
 80084fe:	4601      	mov	r1, r0
 8008500:	6818      	ldr	r0, [r3, #0]
 8008502:	f7ff bfa5 	b.w	8008450 <_puts_r>
 8008506:	bf00      	nop
 8008508:	2000001c 	.word	0x2000001c

0800850c <__sread>:
 800850c:	b510      	push	{r4, lr}
 800850e:	460c      	mov	r4, r1
 8008510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008514:	f000 f8fc 	bl	8008710 <_read_r>
 8008518:	2800      	cmp	r0, #0
 800851a:	bfab      	itete	ge
 800851c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800851e:	89a3      	ldrhlt	r3, [r4, #12]
 8008520:	181b      	addge	r3, r3, r0
 8008522:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008526:	bfac      	ite	ge
 8008528:	6563      	strge	r3, [r4, #84]	@ 0x54
 800852a:	81a3      	strhlt	r3, [r4, #12]
 800852c:	bd10      	pop	{r4, pc}

0800852e <__swrite>:
 800852e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008532:	461f      	mov	r7, r3
 8008534:	898b      	ldrh	r3, [r1, #12]
 8008536:	05db      	lsls	r3, r3, #23
 8008538:	4605      	mov	r5, r0
 800853a:	460c      	mov	r4, r1
 800853c:	4616      	mov	r6, r2
 800853e:	d505      	bpl.n	800854c <__swrite+0x1e>
 8008540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008544:	2302      	movs	r3, #2
 8008546:	2200      	movs	r2, #0
 8008548:	f000 f8d0 	bl	80086ec <_lseek_r>
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008552:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008556:	81a3      	strh	r3, [r4, #12]
 8008558:	4632      	mov	r2, r6
 800855a:	463b      	mov	r3, r7
 800855c:	4628      	mov	r0, r5
 800855e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008562:	f000 b8f7 	b.w	8008754 <_write_r>

08008566 <__sseek>:
 8008566:	b510      	push	{r4, lr}
 8008568:	460c      	mov	r4, r1
 800856a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800856e:	f000 f8bd 	bl	80086ec <_lseek_r>
 8008572:	1c43      	adds	r3, r0, #1
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	bf15      	itete	ne
 8008578:	6560      	strne	r0, [r4, #84]	@ 0x54
 800857a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800857e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008582:	81a3      	strheq	r3, [r4, #12]
 8008584:	bf18      	it	ne
 8008586:	81a3      	strhne	r3, [r4, #12]
 8008588:	bd10      	pop	{r4, pc}

0800858a <__sclose>:
 800858a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800858e:	f000 b89d 	b.w	80086cc <_close_r>

08008592 <__swbuf_r>:
 8008592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008594:	460e      	mov	r6, r1
 8008596:	4614      	mov	r4, r2
 8008598:	4605      	mov	r5, r0
 800859a:	b118      	cbz	r0, 80085a4 <__swbuf_r+0x12>
 800859c:	6a03      	ldr	r3, [r0, #32]
 800859e:	b90b      	cbnz	r3, 80085a4 <__swbuf_r+0x12>
 80085a0:	f7ff ff20 	bl	80083e4 <__sinit>
 80085a4:	69a3      	ldr	r3, [r4, #24]
 80085a6:	60a3      	str	r3, [r4, #8]
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	071a      	lsls	r2, r3, #28
 80085ac:	d501      	bpl.n	80085b2 <__swbuf_r+0x20>
 80085ae:	6923      	ldr	r3, [r4, #16]
 80085b0:	b943      	cbnz	r3, 80085c4 <__swbuf_r+0x32>
 80085b2:	4621      	mov	r1, r4
 80085b4:	4628      	mov	r0, r5
 80085b6:	f000 f82b 	bl	8008610 <__swsetup_r>
 80085ba:	b118      	cbz	r0, 80085c4 <__swbuf_r+0x32>
 80085bc:	f04f 37ff 	mov.w	r7, #4294967295
 80085c0:	4638      	mov	r0, r7
 80085c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	6922      	ldr	r2, [r4, #16]
 80085c8:	1a98      	subs	r0, r3, r2
 80085ca:	6963      	ldr	r3, [r4, #20]
 80085cc:	b2f6      	uxtb	r6, r6
 80085ce:	4283      	cmp	r3, r0
 80085d0:	4637      	mov	r7, r6
 80085d2:	dc05      	bgt.n	80085e0 <__swbuf_r+0x4e>
 80085d4:	4621      	mov	r1, r4
 80085d6:	4628      	mov	r0, r5
 80085d8:	f000 f9d8 	bl	800898c <_fflush_r>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d1ed      	bne.n	80085bc <__swbuf_r+0x2a>
 80085e0:	68a3      	ldr	r3, [r4, #8]
 80085e2:	3b01      	subs	r3, #1
 80085e4:	60a3      	str	r3, [r4, #8]
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	6022      	str	r2, [r4, #0]
 80085ec:	701e      	strb	r6, [r3, #0]
 80085ee:	6962      	ldr	r2, [r4, #20]
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d004      	beq.n	8008600 <__swbuf_r+0x6e>
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	07db      	lsls	r3, r3, #31
 80085fa:	d5e1      	bpl.n	80085c0 <__swbuf_r+0x2e>
 80085fc:	2e0a      	cmp	r6, #10
 80085fe:	d1df      	bne.n	80085c0 <__swbuf_r+0x2e>
 8008600:	4621      	mov	r1, r4
 8008602:	4628      	mov	r0, r5
 8008604:	f000 f9c2 	bl	800898c <_fflush_r>
 8008608:	2800      	cmp	r0, #0
 800860a:	d0d9      	beq.n	80085c0 <__swbuf_r+0x2e>
 800860c:	e7d6      	b.n	80085bc <__swbuf_r+0x2a>
	...

08008610 <__swsetup_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4b29      	ldr	r3, [pc, #164]	@ (80086b8 <__swsetup_r+0xa8>)
 8008614:	4605      	mov	r5, r0
 8008616:	6818      	ldr	r0, [r3, #0]
 8008618:	460c      	mov	r4, r1
 800861a:	b118      	cbz	r0, 8008624 <__swsetup_r+0x14>
 800861c:	6a03      	ldr	r3, [r0, #32]
 800861e:	b90b      	cbnz	r3, 8008624 <__swsetup_r+0x14>
 8008620:	f7ff fee0 	bl	80083e4 <__sinit>
 8008624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008628:	0719      	lsls	r1, r3, #28
 800862a:	d422      	bmi.n	8008672 <__swsetup_r+0x62>
 800862c:	06da      	lsls	r2, r3, #27
 800862e:	d407      	bmi.n	8008640 <__swsetup_r+0x30>
 8008630:	2209      	movs	r2, #9
 8008632:	602a      	str	r2, [r5, #0]
 8008634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008638:	81a3      	strh	r3, [r4, #12]
 800863a:	f04f 30ff 	mov.w	r0, #4294967295
 800863e:	e033      	b.n	80086a8 <__swsetup_r+0x98>
 8008640:	0758      	lsls	r0, r3, #29
 8008642:	d512      	bpl.n	800866a <__swsetup_r+0x5a>
 8008644:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008646:	b141      	cbz	r1, 800865a <__swsetup_r+0x4a>
 8008648:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800864c:	4299      	cmp	r1, r3
 800864e:	d002      	beq.n	8008656 <__swsetup_r+0x46>
 8008650:	4628      	mov	r0, r5
 8008652:	f000 f8cd 	bl	80087f0 <_free_r>
 8008656:	2300      	movs	r3, #0
 8008658:	6363      	str	r3, [r4, #52]	@ 0x34
 800865a:	89a3      	ldrh	r3, [r4, #12]
 800865c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008660:	81a3      	strh	r3, [r4, #12]
 8008662:	2300      	movs	r3, #0
 8008664:	6063      	str	r3, [r4, #4]
 8008666:	6923      	ldr	r3, [r4, #16]
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	89a3      	ldrh	r3, [r4, #12]
 800866c:	f043 0308 	orr.w	r3, r3, #8
 8008670:	81a3      	strh	r3, [r4, #12]
 8008672:	6923      	ldr	r3, [r4, #16]
 8008674:	b94b      	cbnz	r3, 800868a <__swsetup_r+0x7a>
 8008676:	89a3      	ldrh	r3, [r4, #12]
 8008678:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800867c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008680:	d003      	beq.n	800868a <__swsetup_r+0x7a>
 8008682:	4621      	mov	r1, r4
 8008684:	4628      	mov	r0, r5
 8008686:	f000 f9cf 	bl	8008a28 <__smakebuf_r>
 800868a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800868e:	f013 0201 	ands.w	r2, r3, #1
 8008692:	d00a      	beq.n	80086aa <__swsetup_r+0x9a>
 8008694:	2200      	movs	r2, #0
 8008696:	60a2      	str	r2, [r4, #8]
 8008698:	6962      	ldr	r2, [r4, #20]
 800869a:	4252      	negs	r2, r2
 800869c:	61a2      	str	r2, [r4, #24]
 800869e:	6922      	ldr	r2, [r4, #16]
 80086a0:	b942      	cbnz	r2, 80086b4 <__swsetup_r+0xa4>
 80086a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086a6:	d1c5      	bne.n	8008634 <__swsetup_r+0x24>
 80086a8:	bd38      	pop	{r3, r4, r5, pc}
 80086aa:	0799      	lsls	r1, r3, #30
 80086ac:	bf58      	it	pl
 80086ae:	6962      	ldrpl	r2, [r4, #20]
 80086b0:	60a2      	str	r2, [r4, #8]
 80086b2:	e7f4      	b.n	800869e <__swsetup_r+0x8e>
 80086b4:	2000      	movs	r0, #0
 80086b6:	e7f7      	b.n	80086a8 <__swsetup_r+0x98>
 80086b8:	2000001c 	.word	0x2000001c

080086bc <memset>:
 80086bc:	4402      	add	r2, r0
 80086be:	4603      	mov	r3, r0
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d100      	bne.n	80086c6 <memset+0xa>
 80086c4:	4770      	bx	lr
 80086c6:	f803 1b01 	strb.w	r1, [r3], #1
 80086ca:	e7f9      	b.n	80086c0 <memset+0x4>

080086cc <_close_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4d06      	ldr	r5, [pc, #24]	@ (80086e8 <_close_r+0x1c>)
 80086d0:	2300      	movs	r3, #0
 80086d2:	4604      	mov	r4, r0
 80086d4:	4608      	mov	r0, r1
 80086d6:	602b      	str	r3, [r5, #0]
 80086d8:	f7f8 fb2d 	bl	8000d36 <_close>
 80086dc:	1c43      	adds	r3, r0, #1
 80086de:	d102      	bne.n	80086e6 <_close_r+0x1a>
 80086e0:	682b      	ldr	r3, [r5, #0]
 80086e2:	b103      	cbz	r3, 80086e6 <_close_r+0x1a>
 80086e4:	6023      	str	r3, [r4, #0]
 80086e6:	bd38      	pop	{r3, r4, r5, pc}
 80086e8:	2000283c 	.word	0x2000283c

080086ec <_lseek_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	4d07      	ldr	r5, [pc, #28]	@ (800870c <_lseek_r+0x20>)
 80086f0:	4604      	mov	r4, r0
 80086f2:	4608      	mov	r0, r1
 80086f4:	4611      	mov	r1, r2
 80086f6:	2200      	movs	r2, #0
 80086f8:	602a      	str	r2, [r5, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	f7f8 fb42 	bl	8000d84 <_lseek>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_lseek_r+0x1e>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_lseek_r+0x1e>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	2000283c 	.word	0x2000283c

08008710 <_read_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d07      	ldr	r5, [pc, #28]	@ (8008730 <_read_r+0x20>)
 8008714:	4604      	mov	r4, r0
 8008716:	4608      	mov	r0, r1
 8008718:	4611      	mov	r1, r2
 800871a:	2200      	movs	r2, #0
 800871c:	602a      	str	r2, [r5, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	f7f8 fad0 	bl	8000cc4 <_read>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d102      	bne.n	800872e <_read_r+0x1e>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b103      	cbz	r3, 800872e <_read_r+0x1e>
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	2000283c 	.word	0x2000283c

08008734 <_sbrk_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4d06      	ldr	r5, [pc, #24]	@ (8008750 <_sbrk_r+0x1c>)
 8008738:	2300      	movs	r3, #0
 800873a:	4604      	mov	r4, r0
 800873c:	4608      	mov	r0, r1
 800873e:	602b      	str	r3, [r5, #0]
 8008740:	f7f8 fb2e 	bl	8000da0 <_sbrk>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d102      	bne.n	800874e <_sbrk_r+0x1a>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	b103      	cbz	r3, 800874e <_sbrk_r+0x1a>
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	2000283c 	.word	0x2000283c

08008754 <_write_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	4d07      	ldr	r5, [pc, #28]	@ (8008774 <_write_r+0x20>)
 8008758:	4604      	mov	r4, r0
 800875a:	4608      	mov	r0, r1
 800875c:	4611      	mov	r1, r2
 800875e:	2200      	movs	r2, #0
 8008760:	602a      	str	r2, [r5, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	f7f8 facb 	bl	8000cfe <_write>
 8008768:	1c43      	adds	r3, r0, #1
 800876a:	d102      	bne.n	8008772 <_write_r+0x1e>
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	b103      	cbz	r3, 8008772 <_write_r+0x1e>
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	2000283c 	.word	0x2000283c

08008778 <__errno>:
 8008778:	4b01      	ldr	r3, [pc, #4]	@ (8008780 <__errno+0x8>)
 800877a:	6818      	ldr	r0, [r3, #0]
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	2000001c 	.word	0x2000001c

08008784 <__libc_init_array>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	4d0d      	ldr	r5, [pc, #52]	@ (80087bc <__libc_init_array+0x38>)
 8008788:	4c0d      	ldr	r4, [pc, #52]	@ (80087c0 <__libc_init_array+0x3c>)
 800878a:	1b64      	subs	r4, r4, r5
 800878c:	10a4      	asrs	r4, r4, #2
 800878e:	2600      	movs	r6, #0
 8008790:	42a6      	cmp	r6, r4
 8008792:	d109      	bne.n	80087a8 <__libc_init_array+0x24>
 8008794:	4d0b      	ldr	r5, [pc, #44]	@ (80087c4 <__libc_init_array+0x40>)
 8008796:	4c0c      	ldr	r4, [pc, #48]	@ (80087c8 <__libc_init_array+0x44>)
 8008798:	f000 f9a4 	bl	8008ae4 <_init>
 800879c:	1b64      	subs	r4, r4, r5
 800879e:	10a4      	asrs	r4, r4, #2
 80087a0:	2600      	movs	r6, #0
 80087a2:	42a6      	cmp	r6, r4
 80087a4:	d105      	bne.n	80087b2 <__libc_init_array+0x2e>
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ac:	4798      	blx	r3
 80087ae:	3601      	adds	r6, #1
 80087b0:	e7ee      	b.n	8008790 <__libc_init_array+0xc>
 80087b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b6:	4798      	blx	r3
 80087b8:	3601      	adds	r6, #1
 80087ba:	e7f2      	b.n	80087a2 <__libc_init_array+0x1e>
 80087bc:	08008c44 	.word	0x08008c44
 80087c0:	08008c44 	.word	0x08008c44
 80087c4:	08008c44 	.word	0x08008c44
 80087c8:	08008c48 	.word	0x08008c48

080087cc <__retarget_lock_init_recursive>:
 80087cc:	4770      	bx	lr

080087ce <__retarget_lock_acquire_recursive>:
 80087ce:	4770      	bx	lr

080087d0 <__retarget_lock_release_recursive>:
 80087d0:	4770      	bx	lr

080087d2 <memcpy>:
 80087d2:	440a      	add	r2, r1
 80087d4:	4291      	cmp	r1, r2
 80087d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80087da:	d100      	bne.n	80087de <memcpy+0xc>
 80087dc:	4770      	bx	lr
 80087de:	b510      	push	{r4, lr}
 80087e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087e8:	4291      	cmp	r1, r2
 80087ea:	d1f9      	bne.n	80087e0 <memcpy+0xe>
 80087ec:	bd10      	pop	{r4, pc}
	...

080087f0 <_free_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4605      	mov	r5, r0
 80087f4:	2900      	cmp	r1, #0
 80087f6:	d041      	beq.n	800887c <_free_r+0x8c>
 80087f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087fc:	1f0c      	subs	r4, r1, #4
 80087fe:	2b00      	cmp	r3, #0
 8008800:	bfb8      	it	lt
 8008802:	18e4      	addlt	r4, r4, r3
 8008804:	f7ff fd56 	bl	80082b4 <__malloc_lock>
 8008808:	4a1d      	ldr	r2, [pc, #116]	@ (8008880 <_free_r+0x90>)
 800880a:	6813      	ldr	r3, [r2, #0]
 800880c:	b933      	cbnz	r3, 800881c <_free_r+0x2c>
 800880e:	6063      	str	r3, [r4, #4]
 8008810:	6014      	str	r4, [r2, #0]
 8008812:	4628      	mov	r0, r5
 8008814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008818:	f7ff bd52 	b.w	80082c0 <__malloc_unlock>
 800881c:	42a3      	cmp	r3, r4
 800881e:	d908      	bls.n	8008832 <_free_r+0x42>
 8008820:	6820      	ldr	r0, [r4, #0]
 8008822:	1821      	adds	r1, r4, r0
 8008824:	428b      	cmp	r3, r1
 8008826:	bf01      	itttt	eq
 8008828:	6819      	ldreq	r1, [r3, #0]
 800882a:	685b      	ldreq	r3, [r3, #4]
 800882c:	1809      	addeq	r1, r1, r0
 800882e:	6021      	streq	r1, [r4, #0]
 8008830:	e7ed      	b.n	800880e <_free_r+0x1e>
 8008832:	461a      	mov	r2, r3
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	b10b      	cbz	r3, 800883c <_free_r+0x4c>
 8008838:	42a3      	cmp	r3, r4
 800883a:	d9fa      	bls.n	8008832 <_free_r+0x42>
 800883c:	6811      	ldr	r1, [r2, #0]
 800883e:	1850      	adds	r0, r2, r1
 8008840:	42a0      	cmp	r0, r4
 8008842:	d10b      	bne.n	800885c <_free_r+0x6c>
 8008844:	6820      	ldr	r0, [r4, #0]
 8008846:	4401      	add	r1, r0
 8008848:	1850      	adds	r0, r2, r1
 800884a:	4283      	cmp	r3, r0
 800884c:	6011      	str	r1, [r2, #0]
 800884e:	d1e0      	bne.n	8008812 <_free_r+0x22>
 8008850:	6818      	ldr	r0, [r3, #0]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	6053      	str	r3, [r2, #4]
 8008856:	4408      	add	r0, r1
 8008858:	6010      	str	r0, [r2, #0]
 800885a:	e7da      	b.n	8008812 <_free_r+0x22>
 800885c:	d902      	bls.n	8008864 <_free_r+0x74>
 800885e:	230c      	movs	r3, #12
 8008860:	602b      	str	r3, [r5, #0]
 8008862:	e7d6      	b.n	8008812 <_free_r+0x22>
 8008864:	6820      	ldr	r0, [r4, #0]
 8008866:	1821      	adds	r1, r4, r0
 8008868:	428b      	cmp	r3, r1
 800886a:	bf04      	itt	eq
 800886c:	6819      	ldreq	r1, [r3, #0]
 800886e:	685b      	ldreq	r3, [r3, #4]
 8008870:	6063      	str	r3, [r4, #4]
 8008872:	bf04      	itt	eq
 8008874:	1809      	addeq	r1, r1, r0
 8008876:	6021      	streq	r1, [r4, #0]
 8008878:	6054      	str	r4, [r2, #4]
 800887a:	e7ca      	b.n	8008812 <_free_r+0x22>
 800887c:	bd38      	pop	{r3, r4, r5, pc}
 800887e:	bf00      	nop
 8008880:	200026fc 	.word	0x200026fc

08008884 <__sflush_r>:
 8008884:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888c:	0716      	lsls	r6, r2, #28
 800888e:	4605      	mov	r5, r0
 8008890:	460c      	mov	r4, r1
 8008892:	d454      	bmi.n	800893e <__sflush_r+0xba>
 8008894:	684b      	ldr	r3, [r1, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	dc02      	bgt.n	80088a0 <__sflush_r+0x1c>
 800889a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800889c:	2b00      	cmp	r3, #0
 800889e:	dd48      	ble.n	8008932 <__sflush_r+0xae>
 80088a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088a2:	2e00      	cmp	r6, #0
 80088a4:	d045      	beq.n	8008932 <__sflush_r+0xae>
 80088a6:	2300      	movs	r3, #0
 80088a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088ac:	682f      	ldr	r7, [r5, #0]
 80088ae:	6a21      	ldr	r1, [r4, #32]
 80088b0:	602b      	str	r3, [r5, #0]
 80088b2:	d030      	beq.n	8008916 <__sflush_r+0x92>
 80088b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088b6:	89a3      	ldrh	r3, [r4, #12]
 80088b8:	0759      	lsls	r1, r3, #29
 80088ba:	d505      	bpl.n	80088c8 <__sflush_r+0x44>
 80088bc:	6863      	ldr	r3, [r4, #4]
 80088be:	1ad2      	subs	r2, r2, r3
 80088c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088c2:	b10b      	cbz	r3, 80088c8 <__sflush_r+0x44>
 80088c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088c6:	1ad2      	subs	r2, r2, r3
 80088c8:	2300      	movs	r3, #0
 80088ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088cc:	6a21      	ldr	r1, [r4, #32]
 80088ce:	4628      	mov	r0, r5
 80088d0:	47b0      	blx	r6
 80088d2:	1c43      	adds	r3, r0, #1
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	d106      	bne.n	80088e6 <__sflush_r+0x62>
 80088d8:	6829      	ldr	r1, [r5, #0]
 80088da:	291d      	cmp	r1, #29
 80088dc:	d82b      	bhi.n	8008936 <__sflush_r+0xb2>
 80088de:	4a2a      	ldr	r2, [pc, #168]	@ (8008988 <__sflush_r+0x104>)
 80088e0:	410a      	asrs	r2, r1
 80088e2:	07d6      	lsls	r6, r2, #31
 80088e4:	d427      	bmi.n	8008936 <__sflush_r+0xb2>
 80088e6:	2200      	movs	r2, #0
 80088e8:	6062      	str	r2, [r4, #4]
 80088ea:	04d9      	lsls	r1, r3, #19
 80088ec:	6922      	ldr	r2, [r4, #16]
 80088ee:	6022      	str	r2, [r4, #0]
 80088f0:	d504      	bpl.n	80088fc <__sflush_r+0x78>
 80088f2:	1c42      	adds	r2, r0, #1
 80088f4:	d101      	bne.n	80088fa <__sflush_r+0x76>
 80088f6:	682b      	ldr	r3, [r5, #0]
 80088f8:	b903      	cbnz	r3, 80088fc <__sflush_r+0x78>
 80088fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80088fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088fe:	602f      	str	r7, [r5, #0]
 8008900:	b1b9      	cbz	r1, 8008932 <__sflush_r+0xae>
 8008902:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008906:	4299      	cmp	r1, r3
 8008908:	d002      	beq.n	8008910 <__sflush_r+0x8c>
 800890a:	4628      	mov	r0, r5
 800890c:	f7ff ff70 	bl	80087f0 <_free_r>
 8008910:	2300      	movs	r3, #0
 8008912:	6363      	str	r3, [r4, #52]	@ 0x34
 8008914:	e00d      	b.n	8008932 <__sflush_r+0xae>
 8008916:	2301      	movs	r3, #1
 8008918:	4628      	mov	r0, r5
 800891a:	47b0      	blx	r6
 800891c:	4602      	mov	r2, r0
 800891e:	1c50      	adds	r0, r2, #1
 8008920:	d1c9      	bne.n	80088b6 <__sflush_r+0x32>
 8008922:	682b      	ldr	r3, [r5, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0c6      	beq.n	80088b6 <__sflush_r+0x32>
 8008928:	2b1d      	cmp	r3, #29
 800892a:	d001      	beq.n	8008930 <__sflush_r+0xac>
 800892c:	2b16      	cmp	r3, #22
 800892e:	d11e      	bne.n	800896e <__sflush_r+0xea>
 8008930:	602f      	str	r7, [r5, #0]
 8008932:	2000      	movs	r0, #0
 8008934:	e022      	b.n	800897c <__sflush_r+0xf8>
 8008936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800893a:	b21b      	sxth	r3, r3
 800893c:	e01b      	b.n	8008976 <__sflush_r+0xf2>
 800893e:	690f      	ldr	r7, [r1, #16]
 8008940:	2f00      	cmp	r7, #0
 8008942:	d0f6      	beq.n	8008932 <__sflush_r+0xae>
 8008944:	0793      	lsls	r3, r2, #30
 8008946:	680e      	ldr	r6, [r1, #0]
 8008948:	bf08      	it	eq
 800894a:	694b      	ldreq	r3, [r1, #20]
 800894c:	600f      	str	r7, [r1, #0]
 800894e:	bf18      	it	ne
 8008950:	2300      	movne	r3, #0
 8008952:	eba6 0807 	sub.w	r8, r6, r7
 8008956:	608b      	str	r3, [r1, #8]
 8008958:	f1b8 0f00 	cmp.w	r8, #0
 800895c:	dde9      	ble.n	8008932 <__sflush_r+0xae>
 800895e:	6a21      	ldr	r1, [r4, #32]
 8008960:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008962:	4643      	mov	r3, r8
 8008964:	463a      	mov	r2, r7
 8008966:	4628      	mov	r0, r5
 8008968:	47b0      	blx	r6
 800896a:	2800      	cmp	r0, #0
 800896c:	dc08      	bgt.n	8008980 <__sflush_r+0xfc>
 800896e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008976:	81a3      	strh	r3, [r4, #12]
 8008978:	f04f 30ff 	mov.w	r0, #4294967295
 800897c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008980:	4407      	add	r7, r0
 8008982:	eba8 0800 	sub.w	r8, r8, r0
 8008986:	e7e7      	b.n	8008958 <__sflush_r+0xd4>
 8008988:	dfbffffe 	.word	0xdfbffffe

0800898c <_fflush_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	690b      	ldr	r3, [r1, #16]
 8008990:	4605      	mov	r5, r0
 8008992:	460c      	mov	r4, r1
 8008994:	b913      	cbnz	r3, 800899c <_fflush_r+0x10>
 8008996:	2500      	movs	r5, #0
 8008998:	4628      	mov	r0, r5
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	b118      	cbz	r0, 80089a6 <_fflush_r+0x1a>
 800899e:	6a03      	ldr	r3, [r0, #32]
 80089a0:	b90b      	cbnz	r3, 80089a6 <_fflush_r+0x1a>
 80089a2:	f7ff fd1f 	bl	80083e4 <__sinit>
 80089a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0f3      	beq.n	8008996 <_fflush_r+0xa>
 80089ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089b0:	07d0      	lsls	r0, r2, #31
 80089b2:	d404      	bmi.n	80089be <_fflush_r+0x32>
 80089b4:	0599      	lsls	r1, r3, #22
 80089b6:	d402      	bmi.n	80089be <_fflush_r+0x32>
 80089b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089ba:	f7ff ff08 	bl	80087ce <__retarget_lock_acquire_recursive>
 80089be:	4628      	mov	r0, r5
 80089c0:	4621      	mov	r1, r4
 80089c2:	f7ff ff5f 	bl	8008884 <__sflush_r>
 80089c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089c8:	07da      	lsls	r2, r3, #31
 80089ca:	4605      	mov	r5, r0
 80089cc:	d4e4      	bmi.n	8008998 <_fflush_r+0xc>
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	059b      	lsls	r3, r3, #22
 80089d2:	d4e1      	bmi.n	8008998 <_fflush_r+0xc>
 80089d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089d6:	f7ff fefb 	bl	80087d0 <__retarget_lock_release_recursive>
 80089da:	e7dd      	b.n	8008998 <_fflush_r+0xc>

080089dc <__swhatbuf_r>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	460c      	mov	r4, r1
 80089e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e4:	2900      	cmp	r1, #0
 80089e6:	b096      	sub	sp, #88	@ 0x58
 80089e8:	4615      	mov	r5, r2
 80089ea:	461e      	mov	r6, r3
 80089ec:	da0d      	bge.n	8008a0a <__swhatbuf_r+0x2e>
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089f4:	f04f 0100 	mov.w	r1, #0
 80089f8:	bf14      	ite	ne
 80089fa:	2340      	movne	r3, #64	@ 0x40
 80089fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a00:	2000      	movs	r0, #0
 8008a02:	6031      	str	r1, [r6, #0]
 8008a04:	602b      	str	r3, [r5, #0]
 8008a06:	b016      	add	sp, #88	@ 0x58
 8008a08:	bd70      	pop	{r4, r5, r6, pc}
 8008a0a:	466a      	mov	r2, sp
 8008a0c:	f000 f848 	bl	8008aa0 <_fstat_r>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	dbec      	blt.n	80089ee <__swhatbuf_r+0x12>
 8008a14:	9901      	ldr	r1, [sp, #4]
 8008a16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a1e:	4259      	negs	r1, r3
 8008a20:	4159      	adcs	r1, r3
 8008a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a26:	e7eb      	b.n	8008a00 <__swhatbuf_r+0x24>

08008a28 <__smakebuf_r>:
 8008a28:	898b      	ldrh	r3, [r1, #12]
 8008a2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a2c:	079d      	lsls	r5, r3, #30
 8008a2e:	4606      	mov	r6, r0
 8008a30:	460c      	mov	r4, r1
 8008a32:	d507      	bpl.n	8008a44 <__smakebuf_r+0x1c>
 8008a34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	6123      	str	r3, [r4, #16]
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	6163      	str	r3, [r4, #20]
 8008a40:	b003      	add	sp, #12
 8008a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a44:	ab01      	add	r3, sp, #4
 8008a46:	466a      	mov	r2, sp
 8008a48:	f7ff ffc8 	bl	80089dc <__swhatbuf_r>
 8008a4c:	9f00      	ldr	r7, [sp, #0]
 8008a4e:	4605      	mov	r5, r0
 8008a50:	4639      	mov	r1, r7
 8008a52:	4630      	mov	r0, r6
 8008a54:	f7ff fbae 	bl	80081b4 <_malloc_r>
 8008a58:	b948      	cbnz	r0, 8008a6e <__smakebuf_r+0x46>
 8008a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a5e:	059a      	lsls	r2, r3, #22
 8008a60:	d4ee      	bmi.n	8008a40 <__smakebuf_r+0x18>
 8008a62:	f023 0303 	bic.w	r3, r3, #3
 8008a66:	f043 0302 	orr.w	r3, r3, #2
 8008a6a:	81a3      	strh	r3, [r4, #12]
 8008a6c:	e7e2      	b.n	8008a34 <__smakebuf_r+0xc>
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	6020      	str	r0, [r4, #0]
 8008a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a76:	81a3      	strh	r3, [r4, #12]
 8008a78:	9b01      	ldr	r3, [sp, #4]
 8008a7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a7e:	b15b      	cbz	r3, 8008a98 <__smakebuf_r+0x70>
 8008a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a84:	4630      	mov	r0, r6
 8008a86:	f000 f81d 	bl	8008ac4 <_isatty_r>
 8008a8a:	b128      	cbz	r0, 8008a98 <__smakebuf_r+0x70>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	f023 0303 	bic.w	r3, r3, #3
 8008a92:	f043 0301 	orr.w	r3, r3, #1
 8008a96:	81a3      	strh	r3, [r4, #12]
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	431d      	orrs	r5, r3
 8008a9c:	81a5      	strh	r5, [r4, #12]
 8008a9e:	e7cf      	b.n	8008a40 <__smakebuf_r+0x18>

08008aa0 <_fstat_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d07      	ldr	r5, [pc, #28]	@ (8008ac0 <_fstat_r+0x20>)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	4611      	mov	r1, r2
 8008aac:	602b      	str	r3, [r5, #0]
 8008aae:	f7f8 f94e 	bl	8000d4e <_fstat>
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	d102      	bne.n	8008abc <_fstat_r+0x1c>
 8008ab6:	682b      	ldr	r3, [r5, #0]
 8008ab8:	b103      	cbz	r3, 8008abc <_fstat_r+0x1c>
 8008aba:	6023      	str	r3, [r4, #0]
 8008abc:	bd38      	pop	{r3, r4, r5, pc}
 8008abe:	bf00      	nop
 8008ac0:	2000283c 	.word	0x2000283c

08008ac4 <_isatty_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4d06      	ldr	r5, [pc, #24]	@ (8008ae0 <_isatty_r+0x1c>)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4604      	mov	r4, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	f7f8 f94d 	bl	8000d6e <_isatty>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_isatty_r+0x1a>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_isatty_r+0x1a>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	2000283c 	.word	0x2000283c

08008ae4 <_init>:
 8008ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae6:	bf00      	nop
 8008ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aea:	bc08      	pop	{r3}
 8008aec:	469e      	mov	lr, r3
 8008aee:	4770      	bx	lr

08008af0 <_fini>:
 8008af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af2:	bf00      	nop
 8008af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af6:	bc08      	pop	{r3}
 8008af8:	469e      	mov	lr, r3
 8008afa:	4770      	bx	lr
